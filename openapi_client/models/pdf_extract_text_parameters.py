# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfExtractTextParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'text_extraction_mode': 'PdfExtractTextMode',
        'text_extraction_area_left': 'float',
        'text_extraction_area_top': 'float',
        'text_extraction_area_width': 'float',
        'text_extraction_area_height': 'float',
        'include_header': 'bool'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'text_extraction_mode': 'TextExtractionMode',
        'text_extraction_area_left': 'TextExtractionAreaLeft',
        'text_extraction_area_top': 'TextExtractionAreaTop',
        'text_extraction_area_width': 'TextExtractionAreaWidth',
        'text_extraction_area_height': 'TextExtractionAreaHeight',
        'include_header': 'IncludeHeader'
    }

    def __init__(self, file_id=None, page_range=None, text_extraction_mode=None, text_extraction_area_left=0, text_extraction_area_top=0, text_extraction_area_width=0, text_extraction_area_height=0, include_header=False, local_vars_configuration=None):  # noqa: E501
        """PdfExtractTextParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._text_extraction_mode = None
        self._text_extraction_area_left = None
        self._text_extraction_area_top = None
        self._text_extraction_area_width = None
        self._text_extraction_area_height = None
        self._include_header = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        if text_extraction_mode is not None:
            self.text_extraction_mode = text_extraction_mode
        if text_extraction_area_left is not None:
            self.text_extraction_area_left = text_extraction_area_left
        if text_extraction_area_top is not None:
            self.text_extraction_area_top = text_extraction_area_top
        if text_extraction_area_width is not None:
            self.text_extraction_area_width = text_extraction_area_width
        if text_extraction_area_height is not None:
            self.text_extraction_area_height = text_extraction_area_height
        if include_header is not None:
            self.include_header = include_header

    @property
    def file_id(self):
        """Gets the file_id of this PdfExtractTextParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfExtractTextParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfExtractTextParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfExtractTextParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this PdfExtractTextParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to extract text from.  # noqa: E501

        :return: The page_range of this PdfExtractTextParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this PdfExtractTextParameters.

        Specifies the number of the page, or the range of pages to extract text from.  # noqa: E501

        :param page_range: The page_range of this PdfExtractTextParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def text_extraction_mode(self):
        """Gets the text_extraction_mode of this PdfExtractTextParameters.  # noqa: E501


        :return: The text_extraction_mode of this PdfExtractTextParameters.  # noqa: E501
        :rtype: PdfExtractTextMode
        """
        return self._text_extraction_mode

    @text_extraction_mode.setter
    def text_extraction_mode(self, text_extraction_mode):
        """Sets the text_extraction_mode of this PdfExtractTextParameters.


        :param text_extraction_mode: The text_extraction_mode of this PdfExtractTextParameters.  # noqa: E501
        :type: PdfExtractTextMode
        """

        self._text_extraction_mode = text_extraction_mode

    @property
    def text_extraction_area_left(self):
        """Gets the text_extraction_area_left of this PdfExtractTextParameters.  # noqa: E501

        Specifies the left coordinate of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :return: The text_extraction_area_left of this PdfExtractTextParameters.  # noqa: E501
        :rtype: float
        """
        return self._text_extraction_area_left

    @text_extraction_area_left.setter
    def text_extraction_area_left(self, text_extraction_area_left):
        """Sets the text_extraction_area_left of this PdfExtractTextParameters.

        Specifies the left coordinate of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :param text_extraction_area_left: The text_extraction_area_left of this PdfExtractTextParameters.  # noqa: E501
        :type: float
        """

        self._text_extraction_area_left = text_extraction_area_left

    @property
    def text_extraction_area_top(self):
        """Gets the text_extraction_area_top of this PdfExtractTextParameters.  # noqa: E501

        Specifies the top coordinate of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :return: The text_extraction_area_top of this PdfExtractTextParameters.  # noqa: E501
        :rtype: float
        """
        return self._text_extraction_area_top

    @text_extraction_area_top.setter
    def text_extraction_area_top(self, text_extraction_area_top):
        """Sets the text_extraction_area_top of this PdfExtractTextParameters.

        Specifies the top coordinate of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :param text_extraction_area_top: The text_extraction_area_top of this PdfExtractTextParameters.  # noqa: E501
        :type: float
        """

        self._text_extraction_area_top = text_extraction_area_top

    @property
    def text_extraction_area_width(self):
        """Gets the text_extraction_area_width of this PdfExtractTextParameters.  # noqa: E501

        Specifies the width of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :return: The text_extraction_area_width of this PdfExtractTextParameters.  # noqa: E501
        :rtype: float
        """
        return self._text_extraction_area_width

    @text_extraction_area_width.setter
    def text_extraction_area_width(self, text_extraction_area_width):
        """Sets the text_extraction_area_width of this PdfExtractTextParameters.

        Specifies the width of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :param text_extraction_area_width: The text_extraction_area_width of this PdfExtractTextParameters.  # noqa: E501
        :type: float
        """

        self._text_extraction_area_width = text_extraction_area_width

    @property
    def text_extraction_area_height(self):
        """Gets the text_extraction_area_height of this PdfExtractTextParameters.  # noqa: E501

        Specifies the height of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :return: The text_extraction_area_height of this PdfExtractTextParameters.  # noqa: E501
        :rtype: float
        """
        return self._text_extraction_area_height

    @text_extraction_area_height.setter
    def text_extraction_area_height(self, text_extraction_area_height):
        """Sets the text_extraction_area_height of this PdfExtractTextParameters.

        Specifies the height of the text extraction area for the PageAreaFormated extract mode.  # noqa: E501

        :param text_extraction_area_height: The text_extraction_area_height of this PdfExtractTextParameters.  # noqa: E501
        :type: float
        """

        self._text_extraction_area_height = text_extraction_area_height

    @property
    def include_header(self):
        """Gets the include_header of this PdfExtractTextParameters.  # noqa: E501

        Specifies whether the CSV output should include header information.  # noqa: E501

        :return: The include_header of this PdfExtractTextParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_header

    @include_header.setter
    def include_header(self, include_header):
        """Sets the include_header of this PdfExtractTextParameters.

        Specifies whether the CSV output should include header information.  # noqa: E501

        :param include_header: The include_header of this PdfExtractTextParameters.  # noqa: E501
        :type: bool
        """

        self._include_header = include_header

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfExtractTextParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfExtractTextParameters):
            return True

        return self.to_dict() != other.to_dict()
