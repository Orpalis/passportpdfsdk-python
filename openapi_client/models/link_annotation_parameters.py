# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LinkAnnotationParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotation_layout': 'DrawableContentLayoutParameters',
        'link_type': 'LinkAnnotationType',
        'link_page': 'int',
        'link_uri': 'str',
        'show_border': 'bool',
        'color': 'str'
    }

    attribute_map = {
        'annotation_layout': 'AnnotationLayout',
        'link_type': 'LinkType',
        'link_page': 'LinkPage',
        'link_uri': 'LinkUri',
        'show_border': 'ShowBorder',
        'color': 'Color'
    }

    def __init__(self, annotation_layout=None, link_type=None, link_page=None, link_uri=None, show_border=None, color='red', local_vars_configuration=None):  # noqa: E501
        """LinkAnnotationParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotation_layout = None
        self._link_type = None
        self._link_page = None
        self._link_uri = None
        self._show_border = None
        self._color = None
        self.discriminator = None

        self.annotation_layout = annotation_layout
        if link_type is not None:
            self.link_type = link_type
        if link_page is not None:
            self.link_page = link_page
        self.link_uri = link_uri
        if show_border is not None:
            self.show_border = show_border
        self.color = color

    @property
    def annotation_layout(self):
        """Gets the annotation_layout of this LinkAnnotationParameters.  # noqa: E501


        :return: The annotation_layout of this LinkAnnotationParameters.  # noqa: E501
        :rtype: DrawableContentLayoutParameters
        """
        return self._annotation_layout

    @annotation_layout.setter
    def annotation_layout(self, annotation_layout):
        """Sets the annotation_layout of this LinkAnnotationParameters.


        :param annotation_layout: The annotation_layout of this LinkAnnotationParameters.  # noqa: E501
        :type: DrawableContentLayoutParameters
        """
        if self.local_vars_configuration.client_side_validation and annotation_layout is None:  # noqa: E501
            raise ValueError("Invalid value for `annotation_layout`, must not be `None`")  # noqa: E501

        self._annotation_layout = annotation_layout

    @property
    def link_type(self):
        """Gets the link_type of this LinkAnnotationParameters.  # noqa: E501


        :return: The link_type of this LinkAnnotationParameters.  # noqa: E501
        :rtype: LinkAnnotationType
        """
        return self._link_type

    @link_type.setter
    def link_type(self, link_type):
        """Sets the link_type of this LinkAnnotationParameters.


        :param link_type: The link_type of this LinkAnnotationParameters.  # noqa: E501
        :type: LinkAnnotationType
        """

        self._link_type = link_type

    @property
    def link_page(self):
        """Gets the link_page of this LinkAnnotationParameters.  # noqa: E501

        Specifies the link annotation destination page if the Page type is specified.  # noqa: E501

        :return: The link_page of this LinkAnnotationParameters.  # noqa: E501
        :rtype: int
        """
        return self._link_page

    @link_page.setter
    def link_page(self, link_page):
        """Sets the link_page of this LinkAnnotationParameters.

        Specifies the link annotation destination page if the Page type is specified.  # noqa: E501

        :param link_page: The link_page of this LinkAnnotationParameters.  # noqa: E501
        :type: int
        """

        self._link_page = link_page

    @property
    def link_uri(self):
        """Gets the link_uri of this LinkAnnotationParameters.  # noqa: E501

        Specifies the link annotation destination URI if the Web type is specified.  # noqa: E501

        :return: The link_uri of this LinkAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._link_uri

    @link_uri.setter
    def link_uri(self, link_uri):
        """Sets the link_uri of this LinkAnnotationParameters.

        Specifies the link annotation destination URI if the Web type is specified.  # noqa: E501

        :param link_uri: The link_uri of this LinkAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._link_uri = link_uri

    @property
    def show_border(self):
        """Gets the show_border of this LinkAnnotationParameters.  # noqa: E501

        Specifies if the annotation border shall be drawn.  # noqa: E501

        :return: The show_border of this LinkAnnotationParameters.  # noqa: E501
        :rtype: bool
        """
        return self._show_border

    @show_border.setter
    def show_border(self, show_border):
        """Sets the show_border of this LinkAnnotationParameters.

        Specifies if the annotation border shall be drawn.  # noqa: E501

        :param show_border: The show_border of this LinkAnnotationParameters.  # noqa: E501
        :type: bool
        """

        self._show_border = show_border

    @property
    def color(self):
        """Gets the color of this LinkAnnotationParameters.  # noqa: E501

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :return: The color of this LinkAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this LinkAnnotationParameters.

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :param color: The color of this LinkAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkAnnotationParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LinkAnnotationParameters):
            return True

        return self.to_dict() != other.to_dict()
