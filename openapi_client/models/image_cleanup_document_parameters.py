# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageCleanupDocumentParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'remove_black_borders': 'bool',
        'deskew': 'bool',
        'remove_left_margin_punch_holes': 'bool',
        'remove_top_margin_punch_holes': 'bool',
        'remove_right_margin_punch_holes': 'bool',
        'remove_bottom_margin_punch_holes': 'bool',
        'despeckle_strength': 'int'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'remove_black_borders': 'RemoveBlackBorders',
        'deskew': 'Deskew',
        'remove_left_margin_punch_holes': 'RemoveLeftMarginPunchHoles',
        'remove_top_margin_punch_holes': 'RemoveTopMarginPunchHoles',
        'remove_right_margin_punch_holes': 'RemoveRightMarginPunchHoles',
        'remove_bottom_margin_punch_holes': 'RemoveBottomMarginPunchHoles',
        'despeckle_strength': 'DespeckleStrength'
    }

    def __init__(self, file_id=None, page_range=None, remove_black_borders=False, deskew=False, remove_left_margin_punch_holes=False, remove_top_margin_punch_holes=False, remove_right_margin_punch_holes=False, remove_bottom_margin_punch_holes=False, despeckle_strength=0, local_vars_configuration=None):  # noqa: E501
        """ImageCleanupDocumentParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._remove_black_borders = None
        self._deskew = None
        self._remove_left_margin_punch_holes = None
        self._remove_top_margin_punch_holes = None
        self._remove_right_margin_punch_holes = None
        self._remove_bottom_margin_punch_holes = None
        self._despeckle_strength = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        if remove_black_borders is not None:
            self.remove_black_borders = remove_black_borders
        if deskew is not None:
            self.deskew = deskew
        if remove_left_margin_punch_holes is not None:
            self.remove_left_margin_punch_holes = remove_left_margin_punch_holes
        if remove_top_margin_punch_holes is not None:
            self.remove_top_margin_punch_holes = remove_top_margin_punch_holes
        if remove_right_margin_punch_holes is not None:
            self.remove_right_margin_punch_holes = remove_right_margin_punch_holes
        if remove_bottom_margin_punch_holes is not None:
            self.remove_bottom_margin_punch_holes = remove_bottom_margin_punch_holes
        if despeckle_strength is not None:
            self.despeckle_strength = despeckle_strength

    @property
    def file_id(self):
        """Gets the file_id of this ImageCleanupDocumentParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageCleanupDocumentParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to cleanup.  # noqa: E501

        :return: The page_range of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageCleanupDocumentParameters.

        Specifies the number of the page, or the range of pages to cleanup.  # noqa: E501

        :param page_range: The page_range of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def remove_black_borders(self):
        """Gets the remove_black_borders of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether the dark borders of the document image shall be replaced with white content.  # noqa: E501

        :return: The remove_black_borders of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_black_borders

    @remove_black_borders.setter
    def remove_black_borders(self, remove_black_borders):
        """Sets the remove_black_borders of this ImageCleanupDocumentParameters.

        Specifies whether the dark borders of the document image shall be replaced with white content.  # noqa: E501

        :param remove_black_borders: The remove_black_borders of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._remove_black_borders = remove_black_borders

    @property
    def deskew(self):
        """Gets the deskew of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether the document shall be deskewed.  # noqa: E501

        :return: The deskew of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._deskew

    @deskew.setter
    def deskew(self, deskew):
        """Sets the deskew of this ImageCleanupDocumentParameters.

        Specifies whether the document shall be deskewed.  # noqa: E501

        :param deskew: The deskew of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._deskew = deskew

    @property
    def remove_left_margin_punch_holes(self):
        """Gets the remove_left_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether punch holes shall be removed from the left margin of the document.  # noqa: E501

        :return: The remove_left_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_left_margin_punch_holes

    @remove_left_margin_punch_holes.setter
    def remove_left_margin_punch_holes(self, remove_left_margin_punch_holes):
        """Sets the remove_left_margin_punch_holes of this ImageCleanupDocumentParameters.

        Specifies whether punch holes shall be removed from the left margin of the document.  # noqa: E501

        :param remove_left_margin_punch_holes: The remove_left_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._remove_left_margin_punch_holes = remove_left_margin_punch_holes

    @property
    def remove_top_margin_punch_holes(self):
        """Gets the remove_top_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether punch holes shall be removed from the top margin of the document.  # noqa: E501

        :return: The remove_top_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_top_margin_punch_holes

    @remove_top_margin_punch_holes.setter
    def remove_top_margin_punch_holes(self, remove_top_margin_punch_holes):
        """Sets the remove_top_margin_punch_holes of this ImageCleanupDocumentParameters.

        Specifies whether punch holes shall be removed from the top margin of the document.  # noqa: E501

        :param remove_top_margin_punch_holes: The remove_top_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._remove_top_margin_punch_holes = remove_top_margin_punch_holes

    @property
    def remove_right_margin_punch_holes(self):
        """Gets the remove_right_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether punch holes shall be removed from the right margin of the document.  # noqa: E501

        :return: The remove_right_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_right_margin_punch_holes

    @remove_right_margin_punch_holes.setter
    def remove_right_margin_punch_holes(self, remove_right_margin_punch_holes):
        """Sets the remove_right_margin_punch_holes of this ImageCleanupDocumentParameters.

        Specifies whether punch holes shall be removed from the right margin of the document.  # noqa: E501

        :param remove_right_margin_punch_holes: The remove_right_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._remove_right_margin_punch_holes = remove_right_margin_punch_holes

    @property
    def remove_bottom_margin_punch_holes(self):
        """Gets the remove_bottom_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies whether punch holes shall be removed from the bottom margin of the document.  # noqa: E501

        :return: The remove_bottom_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_bottom_margin_punch_holes

    @remove_bottom_margin_punch_holes.setter
    def remove_bottom_margin_punch_holes(self, remove_bottom_margin_punch_holes):
        """Sets the remove_bottom_margin_punch_holes of this ImageCleanupDocumentParameters.

        Specifies whether punch holes shall be removed from the bottom margin of the document.  # noqa: E501

        :param remove_bottom_margin_punch_holes: The remove_bottom_margin_punch_holes of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: bool
        """

        self._remove_bottom_margin_punch_holes = remove_bottom_margin_punch_holes

    @property
    def despeckle_strength(self):
        """Gets the despeckle_strength of this ImageCleanupDocumentParameters.  # noqa: E501

        Specifies the strength of the despeckle filter to be applied on the image.  # noqa: E501

        :return: The despeckle_strength of this ImageCleanupDocumentParameters.  # noqa: E501
        :rtype: int
        """
        return self._despeckle_strength

    @despeckle_strength.setter
    def despeckle_strength(self, despeckle_strength):
        """Sets the despeckle_strength of this ImageCleanupDocumentParameters.

        Specifies the strength of the despeckle filter to be applied on the image.  # noqa: E501

        :param despeckle_strength: The despeckle_strength of this ImageCleanupDocumentParameters.  # noqa: E501
        :type: int
        """

        self._despeckle_strength = despeckle_strength

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageCleanupDocumentParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageCleanupDocumentParameters):
            return True

        return self.to_dict() != other.to_dict()
