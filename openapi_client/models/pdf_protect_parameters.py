# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfProtectParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'owner_password': 'str',
        'user_password': 'str',
        'encryption': 'EncryptionAlgorithm',
        'can_print': 'bool',
        'can_copy': 'bool',
        'can_modify': 'bool',
        'can_add_notes': 'bool',
        'can_fill_fields': 'bool',
        'can_copy_access': 'bool',
        'can_assemble': 'bool',
        'can_print_full': 'bool'
    }

    attribute_map = {
        'file_id': 'FileId',
        'owner_password': 'OwnerPassword',
        'user_password': 'UserPassword',
        'encryption': 'Encryption',
        'can_print': 'CanPrint',
        'can_copy': 'CanCopy',
        'can_modify': 'CanModify',
        'can_add_notes': 'CanAddNotes',
        'can_fill_fields': 'CanFillFields',
        'can_copy_access': 'CanCopyAccess',
        'can_assemble': 'CanAssemble',
        'can_print_full': 'CanPrintFull'
    }

    def __init__(self, file_id=None, owner_password='', user_password='', encryption=None, can_print=True, can_copy=True, can_modify=True, can_add_notes=True, can_fill_fields=True, can_copy_access=True, can_assemble=True, can_print_full=True, local_vars_configuration=None):  # noqa: E501
        """PdfProtectParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._owner_password = None
        self._user_password = None
        self._encryption = None
        self._can_print = None
        self._can_copy = None
        self._can_modify = None
        self._can_add_notes = None
        self._can_fill_fields = None
        self._can_copy_access = None
        self._can_assemble = None
        self._can_print_full = None
        self.discriminator = None

        self.file_id = file_id
        self.owner_password = owner_password
        self.user_password = user_password
        if encryption is not None:
            self.encryption = encryption
        if can_print is not None:
            self.can_print = can_print
        if can_copy is not None:
            self.can_copy = can_copy
        if can_modify is not None:
            self.can_modify = can_modify
        if can_add_notes is not None:
            self.can_add_notes = can_add_notes
        if can_fill_fields is not None:
            self.can_fill_fields = can_fill_fields
        if can_copy_access is not None:
            self.can_copy_access = can_copy_access
        if can_assemble is not None:
            self.can_assemble = can_assemble
        if can_print_full is not None:
            self.can_print_full = can_print_full

    @property
    def file_id(self):
        """Gets the file_id of this PdfProtectParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfProtectParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfProtectParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfProtectParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def owner_password(self):
        """Gets the owner_password of this PdfProtectParameters.  # noqa: E501

        Specifies the owner password to be set.  # noqa: E501

        :return: The owner_password of this PdfProtectParameters.  # noqa: E501
        :rtype: str
        """
        return self._owner_password

    @owner_password.setter
    def owner_password(self, owner_password):
        """Sets the owner_password of this PdfProtectParameters.

        Specifies the owner password to be set.  # noqa: E501

        :param owner_password: The owner_password of this PdfProtectParameters.  # noqa: E501
        :type: str
        """

        self._owner_password = owner_password

    @property
    def user_password(self):
        """Gets the user_password of this PdfProtectParameters.  # noqa: E501

        Specifies the user password to be set.  # noqa: E501

        :return: The user_password of this PdfProtectParameters.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this PdfProtectParameters.

        Specifies the user password to be set.  # noqa: E501

        :param user_password: The user_password of this PdfProtectParameters.  # noqa: E501
        :type: str
        """

        self._user_password = user_password

    @property
    def encryption(self):
        """Gets the encryption of this PdfProtectParameters.  # noqa: E501


        :return: The encryption of this PdfProtectParameters.  # noqa: E501
        :rtype: EncryptionAlgorithm
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this PdfProtectParameters.


        :param encryption: The encryption of this PdfProtectParameters.  # noqa: E501
        :type: EncryptionAlgorithm
        """

        self._encryption = encryption

    @property
    def can_print(self):
        """Gets the can_print of this PdfProtectParameters.  # noqa: E501

        Allows the user to print the document, but possibly not at the highest quality level. Ignored if no encryption algorithm is set.  # noqa: E501

        :return: The can_print of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_print

    @can_print.setter
    def can_print(self, can_print):
        """Sets the can_print of this PdfProtectParameters.

        Allows the user to print the document, but possibly not at the highest quality level. Ignored if no encryption algorithm is set.  # noqa: E501

        :param can_print: The can_print of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_print = can_print

    @property
    def can_copy(self):
        """Gets the can_copy of this PdfProtectParameters.  # noqa: E501

        Allows the user to copy or extract text and graphics from the document. Ignored if the no encryption scheme is set.  # noqa: E501

        :return: The can_copy of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_copy

    @can_copy.setter
    def can_copy(self, can_copy):
        """Sets the can_copy of this PdfProtectParameters.

        Allows the user to copy or extract text and graphics from the document. Ignored if the no encryption scheme is set.  # noqa: E501

        :param can_copy: The can_copy of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_copy = can_copy

    @property
    def can_modify(self):
        """Gets the can_modify of this PdfProtectParameters.  # noqa: E501

        Allows the user to modify the document. Ignored if the no encryption scheme is set.  # noqa: E501

        :return: The can_modify of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_modify

    @can_modify.setter
    def can_modify(self, can_modify):
        """Sets the can_modify of this PdfProtectParameters.

        Allows the user to modify the document. Ignored if the no encryption scheme is set.  # noqa: E501

        :param can_modify: The can_modify of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_modify = can_modify

    @property
    def can_add_notes(self):
        """Gets the can_add_notes of this PdfProtectParameters.  # noqa: E501

        Allows the user to add annotations. Ignored if the no encryption scheme is set.  # noqa: E501

        :return: The can_add_notes of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_add_notes

    @can_add_notes.setter
    def can_add_notes(self, can_add_notes):
        """Sets the can_add_notes of this PdfProtectParameters.

        Allows the user to add annotations. Ignored if the no encryption scheme is set.  # noqa: E501

        :param can_add_notes: The can_add_notes of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_add_notes = can_add_notes

    @property
    def can_fill_fields(self):
        """Gets the can_fill_fields of this PdfProtectParameters.  # noqa: E501

        Allows the user to fill-in form fields. Only works with 128-bit encryption.  # noqa: E501

        :return: The can_fill_fields of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_fill_fields

    @can_fill_fields.setter
    def can_fill_fields(self, can_fill_fields):
        """Sets the can_fill_fields of this PdfProtectParameters.

        Allows the user to fill-in form fields. Only works with 128-bit encryption.  # noqa: E501

        :param can_fill_fields: The can_fill_fields of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_fill_fields = can_fill_fields

    @property
    def can_copy_access(self):
        """Gets the can_copy_access of this PdfProtectParameters.  # noqa: E501

        Enables copying or extracting for use with accessibility features. Only works with 128-bit encryption.  # noqa: E501

        :return: The can_copy_access of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_copy_access

    @can_copy_access.setter
    def can_copy_access(self, can_copy_access):
        """Sets the can_copy_access of this PdfProtectParameters.

        Enables copying or extracting for use with accessibility features. Only works with 128-bit encryption.  # noqa: E501

        :param can_copy_access: The can_copy_access of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_copy_access = can_copy_access

    @property
    def can_assemble(self):
        """Gets the can_assemble of this PdfProtectParameters.  # noqa: E501

        Allows the user to assemble the document. Only works with 128-bit encryption.  # noqa: E501

        :return: The can_assemble of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_assemble

    @can_assemble.setter
    def can_assemble(self, can_assemble):
        """Sets the can_assemble of this PdfProtectParameters.

        Allows the user to assemble the document. Only works with 128-bit encryption.  # noqa: E501

        :param can_assemble: The can_assemble of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_assemble = can_assemble

    @property
    def can_print_full(self):
        """Gets the can_print_full of this PdfProtectParameters.  # noqa: E501

        Allows high resolution printing of the document. Only works with 128-bit encryption.  # noqa: E501

        :return: The can_print_full of this PdfProtectParameters.  # noqa: E501
        :rtype: bool
        """
        return self._can_print_full

    @can_print_full.setter
    def can_print_full(self, can_print_full):
        """Sets the can_print_full of this PdfProtectParameters.

        Allows high resolution printing of the document. Only works with 128-bit encryption.  # noqa: E501

        :param can_print_full: The can_print_full of this PdfProtectParameters.  # noqa: E501
        :type: bool
        """

        self._can_print_full = can_print_full

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfProtectParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfProtectParameters):
            return True

        return self.to_dict() != other.to_dict()
