# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfSaveAsPNGParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'compression': 'int',
        'interlaced': 'bool',
        'resolution': 'float',
        'render_form_fields': 'bool',
        'keep_raster_pdf_resolution': 'bool'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'compression': 'Compression',
        'interlaced': 'Interlaced',
        'resolution': 'Resolution',
        'render_form_fields': 'RenderFormFields',
        'keep_raster_pdf_resolution': 'KeepRasterPDFResolution'
    }

    def __init__(self, file_id=None, page_range='*', compression=6, interlaced=False, resolution=200, render_form_fields=False, keep_raster_pdf_resolution=True, local_vars_configuration=None):  # noqa: E501
        """PdfSaveAsPNGParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._compression = None
        self._interlaced = None
        self._resolution = None
        self._render_form_fields = None
        self._keep_raster_pdf_resolution = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        if compression is not None:
            self.compression = compression
        if interlaced is not None:
            self.interlaced = interlaced
        if resolution is not None:
            self.resolution = resolution
        if render_form_fields is not None:
            self.render_form_fields = render_form_fields
        if keep_raster_pdf_resolution is not None:
            self.keep_raster_pdf_resolution = keep_raster_pdf_resolution

    @property
    def file_id(self):
        """Gets the file_id of this PdfSaveAsPNGParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfSaveAsPNGParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to be saved as PNG.  # noqa: E501

        :return: The page_range of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this PdfSaveAsPNGParameters.

        Specifies the number of the page, or the range of pages to be saved as PNG.  # noqa: E501

        :param page_range: The page_range of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: str
        """

        self._page_range = page_range

    @property
    def compression(self):
        """Gets the compression of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies the level of compression to be used for the PNG output, between 0 (no compression - faster encoding) to 9(max compression - slower encoding).  # noqa: E501

        :return: The compression of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: int
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this PdfSaveAsPNGParameters.

        Specifies the level of compression to be used for the PNG output, between 0 (no compression - faster encoding) to 9(max compression - slower encoding).  # noqa: E501

        :param compression: The compression of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: int
        """

        self._compression = compression

    @property
    def interlaced(self):
        """Gets the interlaced of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies if the produced PNG image must be interlaced.  # noqa: E501

        :return: The interlaced of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: bool
        """
        return self._interlaced

    @interlaced.setter
    def interlaced(self, interlaced):
        """Sets the interlaced of this PdfSaveAsPNGParameters.

        Specifies if the produced PNG image must be interlaced.  # noqa: E501

        :param interlaced: The interlaced of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: bool
        """

        self._interlaced = interlaced

    @property
    def resolution(self):
        """Gets the resolution of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies the resolution to be used for the rendition process.  # noqa: E501

        :return: The resolution of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this PdfSaveAsPNGParameters.

        Specifies the resolution to be used for the rendition process.  # noqa: E501

        :param resolution: The resolution of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def render_form_fields(self):
        """Gets the render_form_fields of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies whether the form fields of the PDF shall be rendered.  # noqa: E501

        :return: The render_form_fields of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: bool
        """
        return self._render_form_fields

    @render_form_fields.setter
    def render_form_fields(self, render_form_fields):
        """Sets the render_form_fields of this PdfSaveAsPNGParameters.

        Specifies whether the form fields of the PDF shall be rendered.  # noqa: E501

        :param render_form_fields: The render_form_fields of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: bool
        """

        self._render_form_fields = render_form_fields

    @property
    def keep_raster_pdf_resolution(self):
        """Gets the keep_raster_pdf_resolution of this PdfSaveAsPNGParameters.  # noqa: E501

        Specifies if the initial image resolution must be kept in case of raster-pdf processing.  # noqa: E501

        :return: The keep_raster_pdf_resolution of this PdfSaveAsPNGParameters.  # noqa: E501
        :rtype: bool
        """
        return self._keep_raster_pdf_resolution

    @keep_raster_pdf_resolution.setter
    def keep_raster_pdf_resolution(self, keep_raster_pdf_resolution):
        """Sets the keep_raster_pdf_resolution of this PdfSaveAsPNGParameters.

        Specifies if the initial image resolution must be kept in case of raster-pdf processing.  # noqa: E501

        :param keep_raster_pdf_resolution: The keep_raster_pdf_resolution of this PdfSaveAsPNGParameters.  # noqa: E501
        :type: bool
        """

        self._keep_raster_pdf_resolution = keep_raster_pdf_resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfSaveAsPNGParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfSaveAsPNGParameters):
            return True

        return self.to_dict() != other.to_dict()
