# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DrawableContentLayoutParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'horizontal_position': 'ContentHorizontalPosition',
        'vertical_position': 'ContentVerticalPosition',
        'size': 'ContentSize',
        'indent_from_edges': 'bool',
        'absolute_position_left': 'float',
        'absolute_position_top': 'float',
        'absolute_width': 'float',
        'absolute_height': 'float'
    }

    attribute_map = {
        'horizontal_position': 'HorizontalPosition',
        'vertical_position': 'VerticalPosition',
        'size': 'Size',
        'indent_from_edges': 'IndentFromEdges',
        'absolute_position_left': 'AbsolutePositionLeft',
        'absolute_position_top': 'AbsolutePositionTop',
        'absolute_width': 'AbsoluteWidth',
        'absolute_height': 'AbsoluteHeight'
    }

    def __init__(self, horizontal_position=None, vertical_position=None, size=None, indent_from_edges=True, absolute_position_left=None, absolute_position_top=None, absolute_width=None, absolute_height=None, local_vars_configuration=None):  # noqa: E501
        """DrawableContentLayoutParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._horizontal_position = None
        self._vertical_position = None
        self._size = None
        self._indent_from_edges = None
        self._absolute_position_left = None
        self._absolute_position_top = None
        self._absolute_width = None
        self._absolute_height = None
        self.discriminator = None

        if horizontal_position is not None:
            self.horizontal_position = horizontal_position
        if vertical_position is not None:
            self.vertical_position = vertical_position
        if size is not None:
            self.size = size
        if indent_from_edges is not None:
            self.indent_from_edges = indent_from_edges
        if absolute_position_left is not None:
            self.absolute_position_left = absolute_position_left
        if absolute_position_top is not None:
            self.absolute_position_top = absolute_position_top
        if absolute_width is not None:
            self.absolute_width = absolute_width
        if absolute_height is not None:
            self.absolute_height = absolute_height

    @property
    def horizontal_position(self):
        """Gets the horizontal_position of this DrawableContentLayoutParameters.  # noqa: E501


        :return: The horizontal_position of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: ContentHorizontalPosition
        """
        return self._horizontal_position

    @horizontal_position.setter
    def horizontal_position(self, horizontal_position):
        """Sets the horizontal_position of this DrawableContentLayoutParameters.


        :param horizontal_position: The horizontal_position of this DrawableContentLayoutParameters.  # noqa: E501
        :type: ContentHorizontalPosition
        """

        self._horizontal_position = horizontal_position

    @property
    def vertical_position(self):
        """Gets the vertical_position of this DrawableContentLayoutParameters.  # noqa: E501


        :return: The vertical_position of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: ContentVerticalPosition
        """
        return self._vertical_position

    @vertical_position.setter
    def vertical_position(self, vertical_position):
        """Sets the vertical_position of this DrawableContentLayoutParameters.


        :param vertical_position: The vertical_position of this DrawableContentLayoutParameters.  # noqa: E501
        :type: ContentVerticalPosition
        """

        self._vertical_position = vertical_position

    @property
    def size(self):
        """Gets the size of this DrawableContentLayoutParameters.  # noqa: E501


        :return: The size of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: ContentSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DrawableContentLayoutParameters.


        :param size: The size of this DrawableContentLayoutParameters.  # noqa: E501
        :type: ContentSize
        """

        self._size = size

    @property
    def indent_from_edges(self):
        """Gets the indent_from_edges of this DrawableContentLayoutParameters.  # noqa: E501

        Specifies whether the content shall be slightly indented from the nearest page edges.  # noqa: E501

        :return: The indent_from_edges of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: bool
        """
        return self._indent_from_edges

    @indent_from_edges.setter
    def indent_from_edges(self, indent_from_edges):
        """Sets the indent_from_edges of this DrawableContentLayoutParameters.

        Specifies whether the content shall be slightly indented from the nearest page edges.  # noqa: E501

        :param indent_from_edges: The indent_from_edges of this DrawableContentLayoutParameters.  # noqa: E501
        :type: bool
        """

        self._indent_from_edges = indent_from_edges

    @property
    def absolute_position_left(self):
        """Gets the absolute_position_left of this DrawableContentLayoutParameters.  # noqa: E501

        Specifies the absolute horizontal position of the top-left edge of the content, in points.  # noqa: E501

        :return: The absolute_position_left of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: float
        """
        return self._absolute_position_left

    @absolute_position_left.setter
    def absolute_position_left(self, absolute_position_left):
        """Sets the absolute_position_left of this DrawableContentLayoutParameters.

        Specifies the absolute horizontal position of the top-left edge of the content, in points.  # noqa: E501

        :param absolute_position_left: The absolute_position_left of this DrawableContentLayoutParameters.  # noqa: E501
        :type: float
        """

        self._absolute_position_left = absolute_position_left

    @property
    def absolute_position_top(self):
        """Gets the absolute_position_top of this DrawableContentLayoutParameters.  # noqa: E501

        Specifies the absolute vertical position of the top-left edge of the content, in points.  # noqa: E501

        :return: The absolute_position_top of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: float
        """
        return self._absolute_position_top

    @absolute_position_top.setter
    def absolute_position_top(self, absolute_position_top):
        """Sets the absolute_position_top of this DrawableContentLayoutParameters.

        Specifies the absolute vertical position of the top-left edge of the content, in points.  # noqa: E501

        :param absolute_position_top: The absolute_position_top of this DrawableContentLayoutParameters.  # noqa: E501
        :type: float
        """

        self._absolute_position_top = absolute_position_top

    @property
    def absolute_width(self):
        """Gets the absolute_width of this DrawableContentLayoutParameters.  # noqa: E501

        Specifies the absolute width of the content, in points.  # noqa: E501

        :return: The absolute_width of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: float
        """
        return self._absolute_width

    @absolute_width.setter
    def absolute_width(self, absolute_width):
        """Sets the absolute_width of this DrawableContentLayoutParameters.

        Specifies the absolute width of the content, in points.  # noqa: E501

        :param absolute_width: The absolute_width of this DrawableContentLayoutParameters.  # noqa: E501
        :type: float
        """

        self._absolute_width = absolute_width

    @property
    def absolute_height(self):
        """Gets the absolute_height of this DrawableContentLayoutParameters.  # noqa: E501

        Specifies the absolute height of the content, in points.  # noqa: E501

        :return: The absolute_height of this DrawableContentLayoutParameters.  # noqa: E501
        :rtype: float
        """
        return self._absolute_height

    @absolute_height.setter
    def absolute_height(self, absolute_height):
        """Sets the absolute_height of this DrawableContentLayoutParameters.

        Specifies the absolute height of the content, in points.  # noqa: E501

        :param absolute_height: The absolute_height of this DrawableContentLayoutParameters.  # noqa: E501
        :type: float
        """

        self._absolute_height = absolute_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrawableContentLayoutParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DrawableContentLayoutParameters):
            return True

        return self.to_dict() != other.to_dict()
