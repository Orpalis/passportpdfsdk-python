# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageRegion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'page_number': 'int',
        'left': 'int',
        'top': 'int',
        'width': 'int',
        'height': 'int'
    }

    attribute_map = {
        'page_number': 'PageNumber',
        'left': 'Left',
        'top': 'Top',
        'width': 'Width',
        'height': 'Height'
    }

    def __init__(self, page_number=None, left=None, top=None, width=None, height=None, local_vars_configuration=None):  # noqa: E501
        """ImageRegion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._page_number = None
        self._left = None
        self._top = None
        self._width = None
        self._height = None
        self.discriminator = None

        if page_number is not None:
            self.page_number = page_number
        if left is not None:
            self.left = left
        if top is not None:
            self.top = top
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height

    @property
    def page_number(self):
        """Gets the page_number of this ImageRegion.  # noqa: E501

        Specifies the number of the page.  # noqa: E501

        :return: The page_number of this ImageRegion.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this ImageRegion.

        Specifies the number of the page.  # noqa: E501

        :param page_number: The page_number of this ImageRegion.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def left(self):
        """Gets the left of this ImageRegion.  # noqa: E501

        Specifies, in pixels, the left coordinate of the region.  # noqa: E501

        :return: The left of this ImageRegion.  # noqa: E501
        :rtype: int
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this ImageRegion.

        Specifies, in pixels, the left coordinate of the region.  # noqa: E501

        :param left: The left of this ImageRegion.  # noqa: E501
        :type: int
        """

        self._left = left

    @property
    def top(self):
        """Gets the top of this ImageRegion.  # noqa: E501

        Specifies, in pixels, the top coordinate of the region.  # noqa: E501

        :return: The top of this ImageRegion.  # noqa: E501
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this ImageRegion.

        Specifies, in pixels, the top coordinate of the region.  # noqa: E501

        :param top: The top of this ImageRegion.  # noqa: E501
        :type: int
        """

        self._top = top

    @property
    def width(self):
        """Gets the width of this ImageRegion.  # noqa: E501

        Specifies, in pixels, the width of the region.  # noqa: E501

        :return: The width of this ImageRegion.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageRegion.

        Specifies, in pixels, the width of the region.  # noqa: E501

        :param width: The width of this ImageRegion.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this ImageRegion.  # noqa: E501

        Specifies, in pixels, the height of the region.  # noqa: E501

        :return: The height of this ImageRegion.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageRegion.

        Specifies, in pixels, the height of the region.  # noqa: E501

        :param height: The height of this ImageRegion.  # noqa: E501
        :type: int
        """

        self._height = height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageRegion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageRegion):
            return True

        return self.to_dict() != other.to_dict()
