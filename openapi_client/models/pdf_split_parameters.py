# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfSplitParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'split_method': 'PdfSplitMethod',
        'split_value': 'int',
        'immediate_download': 'bool'
    }

    attribute_map = {
        'file_id': 'FileId',
        'split_method': 'SplitMethod',
        'split_value': 'SplitValue',
        'immediate_download': 'ImmediateDownload'
    }

    def __init__(self, file_id=None, split_method=None, split_value=None, immediate_download=False, local_vars_configuration=None):  # noqa: E501
        """PdfSplitParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._split_method = None
        self._split_value = None
        self._immediate_download = None
        self.discriminator = None

        self.file_id = file_id
        self.split_method = split_method
        self.split_value = split_value
        if immediate_download is not None:
            self.immediate_download = immediate_download

    @property
    def file_id(self):
        """Gets the file_id of this PdfSplitParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfSplitParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfSplitParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfSplitParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def split_method(self):
        """Gets the split_method of this PdfSplitParameters.  # noqa: E501


        :return: The split_method of this PdfSplitParameters.  # noqa: E501
        :rtype: PdfSplitMethod
        """
        return self._split_method

    @split_method.setter
    def split_method(self, split_method):
        """Sets the split_method of this PdfSplitParameters.


        :param split_method: The split_method of this PdfSplitParameters.  # noqa: E501
        :type: PdfSplitMethod
        """
        if self.local_vars_configuration.client_side_validation and split_method is None:  # noqa: E501
            raise ValueError("Invalid value for `split_method`, must not be `None`")  # noqa: E501

        self._split_method = split_method

    @property
    def split_value(self):
        """Gets the split_value of this PdfSplitParameters.  # noqa: E501

        Specifies, respectively for the SplitByPageCount and SplitByFileSize split methods, the number of pages or the maximum size, in kilobytes, of the produced files.  # noqa: E501

        :return: The split_value of this PdfSplitParameters.  # noqa: E501
        :rtype: int
        """
        return self._split_value

    @split_value.setter
    def split_value(self, split_value):
        """Sets the split_value of this PdfSplitParameters.

        Specifies, respectively for the SplitByPageCount and SplitByFileSize split methods, the number of pages or the maximum size, in kilobytes, of the produced files.  # noqa: E501

        :param split_value: The split_value of this PdfSplitParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and split_value is None:  # noqa: E501
            raise ValueError("Invalid value for `split_value`, must not be `None`")  # noqa: E501

        self._split_value = split_value

    @property
    def immediate_download(self):
        """Gets the immediate_download of this PdfSplitParameters.  # noqa: E501

        Specifies whether the file(s) created as a result of the action shall be available for immediate download.  # noqa: E501

        :return: The immediate_download of this PdfSplitParameters.  # noqa: E501
        :rtype: bool
        """
        return self._immediate_download

    @immediate_download.setter
    def immediate_download(self, immediate_download):
        """Sets the immediate_download of this PdfSplitParameters.

        Specifies whether the file(s) created as a result of the action shall be available for immediate download.  # noqa: E501

        :param immediate_download: The immediate_download of this PdfSplitParameters.  # noqa: E501
        :type: bool
        """

        self._immediate_download = immediate_download

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfSplitParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfSplitParameters):
            return True

        return self.to_dict() != other.to_dict()
