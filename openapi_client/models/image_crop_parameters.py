# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageCropParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'crop_box_left': 'int',
        'crop_box_top': 'int',
        'crop_box_width': 'int',
        'crop_box_height': 'int',
        'crop_unit': 'CropUnit'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'crop_box_left': 'CropBoxLeft',
        'crop_box_top': 'CropBoxTop',
        'crop_box_width': 'CropBoxWidth',
        'crop_box_height': 'CropBoxHeight',
        'crop_unit': 'CropUnit'
    }

    def __init__(self, file_id=None, page_range=None, crop_box_left=None, crop_box_top=None, crop_box_width=None, crop_box_height=None, crop_unit=None, local_vars_configuration=None):  # noqa: E501
        """ImageCropParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._crop_box_left = None
        self._crop_box_top = None
        self._crop_box_width = None
        self._crop_box_height = None
        self._crop_unit = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        self.crop_box_left = crop_box_left
        self.crop_box_top = crop_box_top
        self.crop_box_width = crop_box_width
        self.crop_box_height = crop_box_height
        if crop_unit is not None:
            self.crop_unit = crop_unit

    @property
    def file_id(self):
        """Gets the file_id of this ImageCropParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageCropParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageCropParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageCropParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageCropParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to crop.  # noqa: E501

        :return: The page_range of this ImageCropParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageCropParameters.

        Specifies the number of the page, or the range of pages to crop.  # noqa: E501

        :param page_range: The page_range of this ImageCropParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def crop_box_left(self):
        """Gets the crop_box_left of this ImageCropParameters.  # noqa: E501

        Specifies the crop box left coordinate.  # noqa: E501

        :return: The crop_box_left of this ImageCropParameters.  # noqa: E501
        :rtype: int
        """
        return self._crop_box_left

    @crop_box_left.setter
    def crop_box_left(self, crop_box_left):
        """Sets the crop_box_left of this ImageCropParameters.

        Specifies the crop box left coordinate.  # noqa: E501

        :param crop_box_left: The crop_box_left of this ImageCropParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and crop_box_left is None:  # noqa: E501
            raise ValueError("Invalid value for `crop_box_left`, must not be `None`")  # noqa: E501

        self._crop_box_left = crop_box_left

    @property
    def crop_box_top(self):
        """Gets the crop_box_top of this ImageCropParameters.  # noqa: E501

        Specifies the crop box top coordinate.  # noqa: E501

        :return: The crop_box_top of this ImageCropParameters.  # noqa: E501
        :rtype: int
        """
        return self._crop_box_top

    @crop_box_top.setter
    def crop_box_top(self, crop_box_top):
        """Sets the crop_box_top of this ImageCropParameters.

        Specifies the crop box top coordinate.  # noqa: E501

        :param crop_box_top: The crop_box_top of this ImageCropParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and crop_box_top is None:  # noqa: E501
            raise ValueError("Invalid value for `crop_box_top`, must not be `None`")  # noqa: E501

        self._crop_box_top = crop_box_top

    @property
    def crop_box_width(self):
        """Gets the crop_box_width of this ImageCropParameters.  # noqa: E501

        Specifies the crop box width.  # noqa: E501

        :return: The crop_box_width of this ImageCropParameters.  # noqa: E501
        :rtype: int
        """
        return self._crop_box_width

    @crop_box_width.setter
    def crop_box_width(self, crop_box_width):
        """Sets the crop_box_width of this ImageCropParameters.

        Specifies the crop box width.  # noqa: E501

        :param crop_box_width: The crop_box_width of this ImageCropParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and crop_box_width is None:  # noqa: E501
            raise ValueError("Invalid value for `crop_box_width`, must not be `None`")  # noqa: E501

        self._crop_box_width = crop_box_width

    @property
    def crop_box_height(self):
        """Gets the crop_box_height of this ImageCropParameters.  # noqa: E501

        Specifies the crop box height.  # noqa: E501

        :return: The crop_box_height of this ImageCropParameters.  # noqa: E501
        :rtype: int
        """
        return self._crop_box_height

    @crop_box_height.setter
    def crop_box_height(self, crop_box_height):
        """Sets the crop_box_height of this ImageCropParameters.

        Specifies the crop box height.  # noqa: E501

        :param crop_box_height: The crop_box_height of this ImageCropParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and crop_box_height is None:  # noqa: E501
            raise ValueError("Invalid value for `crop_box_height`, must not be `None`")  # noqa: E501

        self._crop_box_height = crop_box_height

    @property
    def crop_unit(self):
        """Gets the crop_unit of this ImageCropParameters.  # noqa: E501


        :return: The crop_unit of this ImageCropParameters.  # noqa: E501
        :rtype: CropUnit
        """
        return self._crop_unit

    @crop_unit.setter
    def crop_unit(self, crop_unit):
        """Sets the crop_unit of this ImageCropParameters.


        :param crop_unit: The crop_unit of this ImageCropParameters.  # noqa: E501
        :type: CropUnit
        """

        self._crop_unit = crop_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageCropParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageCropParameters):
            return True

        return self.to_dict() != other.to_dict()
