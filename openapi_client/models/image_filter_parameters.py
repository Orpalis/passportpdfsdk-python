# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageFilterParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'filters': 'list[ImageFilters]',
        'roi_left': 'int',
        'roi_top': 'int',
        'roi_width': 'int',
        'roi_height': 'int',
        'gaussian_kernel_size': 'int',
        'unsharp_mask_radius': 'int',
        'unsharp_mask_amount': 'float',
        'unsharp_mask_threshold': 'int',
        'subtract_background_rolling_ball_size': 'int',
        'subtract_background_light_background': 'bool',
        'median_kernel_size': 'int',
        'min_kernel_size': 'int',
        'max_kernel_size': 'int',
        'soften_value': 'int',
        'colorize_hue': 'float',
        'colorize_saturation': 'float',
        'colorize_luminosity': 'float'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'filters': 'Filters',
        'roi_left': 'RoiLeft',
        'roi_top': 'RoiTop',
        'roi_width': 'RoiWidth',
        'roi_height': 'RoiHeight',
        'gaussian_kernel_size': 'GaussianKernelSize',
        'unsharp_mask_radius': 'UnsharpMaskRadius',
        'unsharp_mask_amount': 'UnsharpMaskAmount',
        'unsharp_mask_threshold': 'UnsharpMaskThreshold',
        'subtract_background_rolling_ball_size': 'SubtractBackgroundRollingBallSize',
        'subtract_background_light_background': 'SubtractBackgroundLightBackground',
        'median_kernel_size': 'MedianKernelSize',
        'min_kernel_size': 'MinKernelSize',
        'max_kernel_size': 'MaxKernelSize',
        'soften_value': 'SoftenValue',
        'colorize_hue': 'ColorizeHue',
        'colorize_saturation': 'ColorizeSaturation',
        'colorize_luminosity': 'ColorizeLuminosity'
    }

    def __init__(self, file_id=None, page_range=None, filters=None, roi_left=0, roi_top=0, roi_width=0, roi_height=0, gaussian_kernel_size=3, unsharp_mask_radius=5, unsharp_mask_amount=0.5, unsharp_mask_threshold=40, subtract_background_rolling_ball_size=50, subtract_background_light_background=True, median_kernel_size=4, min_kernel_size=2, max_kernel_size=2, soften_value=0, colorize_hue=0, colorize_saturation=0, colorize_luminosity=0, local_vars_configuration=None):  # noqa: E501
        """ImageFilterParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._filters = None
        self._roi_left = None
        self._roi_top = None
        self._roi_width = None
        self._roi_height = None
        self._gaussian_kernel_size = None
        self._unsharp_mask_radius = None
        self._unsharp_mask_amount = None
        self._unsharp_mask_threshold = None
        self._subtract_background_rolling_ball_size = None
        self._subtract_background_light_background = None
        self._median_kernel_size = None
        self._min_kernel_size = None
        self._max_kernel_size = None
        self._soften_value = None
        self._colorize_hue = None
        self._colorize_saturation = None
        self._colorize_luminosity = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        self.filters = filters
        if roi_left is not None:
            self.roi_left = roi_left
        if roi_top is not None:
            self.roi_top = roi_top
        if roi_width is not None:
            self.roi_width = roi_width
        if roi_height is not None:
            self.roi_height = roi_height
        if gaussian_kernel_size is not None:
            self.gaussian_kernel_size = gaussian_kernel_size
        if unsharp_mask_radius is not None:
            self.unsharp_mask_radius = unsharp_mask_radius
        if unsharp_mask_amount is not None:
            self.unsharp_mask_amount = unsharp_mask_amount
        if unsharp_mask_threshold is not None:
            self.unsharp_mask_threshold = unsharp_mask_threshold
        if subtract_background_rolling_ball_size is not None:
            self.subtract_background_rolling_ball_size = subtract_background_rolling_ball_size
        if subtract_background_light_background is not None:
            self.subtract_background_light_background = subtract_background_light_background
        if median_kernel_size is not None:
            self.median_kernel_size = median_kernel_size
        if min_kernel_size is not None:
            self.min_kernel_size = min_kernel_size
        if max_kernel_size is not None:
            self.max_kernel_size = max_kernel_size
        if soften_value is not None:
            self.soften_value = soften_value
        if colorize_hue is not None:
            self.colorize_hue = colorize_hue
        if colorize_saturation is not None:
            self.colorize_saturation = colorize_saturation
        if colorize_luminosity is not None:
            self.colorize_luminosity = colorize_luminosity

    @property
    def file_id(self):
        """Gets the file_id of this ImageFilterParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageFilterParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageFilterParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageFilterParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageFilterParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to apply the filter(s) to.  # noqa: E501

        :return: The page_range of this ImageFilterParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageFilterParameters.

        Specifies the number of the page, or the range of pages to apply the filter(s) to.  # noqa: E501

        :param page_range: The page_range of this ImageFilterParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def filters(self):
        """Gets the filters of this ImageFilterParameters.  # noqa: E501

        Specifies an array of filters to be applied.  A maximum of 5 entries is supported.  # noqa: E501

        :return: The filters of this ImageFilterParameters.  # noqa: E501
        :rtype: list[ImageFilters]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ImageFilterParameters.

        Specifies an array of filters to be applied.  A maximum of 5 entries is supported.  # noqa: E501

        :param filters: The filters of this ImageFilterParameters.  # noqa: E501
        :type: list[ImageFilters]
        """
        if self.local_vars_configuration.client_side_validation and filters is None:  # noqa: E501
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def roi_left(self):
        """Gets the roi_left of this ImageFilterParameters.  # noqa: E501

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_left of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_left

    @roi_left.setter
    def roi_left(self, roi_left):
        """Sets the roi_left of this ImageFilterParameters.

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_left: The roi_left of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._roi_left = roi_left

    @property
    def roi_top(self):
        """Gets the roi_top of this ImageFilterParameters.  # noqa: E501

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_top of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_top

    @roi_top.setter
    def roi_top(self, roi_top):
        """Sets the roi_top of this ImageFilterParameters.

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_top: The roi_top of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._roi_top = roi_top

    @property
    def roi_width(self):
        """Gets the roi_width of this ImageFilterParameters.  # noqa: E501

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_width of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_width

    @roi_width.setter
    def roi_width(self, roi_width):
        """Sets the roi_width of this ImageFilterParameters.

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_width: The roi_width of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._roi_width = roi_width

    @property
    def roi_height(self):
        """Gets the roi_height of this ImageFilterParameters.  # noqa: E501

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_height of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_height

    @roi_height.setter
    def roi_height(self, roi_height):
        """Sets the roi_height of this ImageFilterParameters.

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_height: The roi_height of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._roi_height = roi_height

    @property
    def gaussian_kernel_size(self):
        """Gets the gaussian_kernel_size of this ImageFilterParameters.  # noqa: E501

        Specifies the kernel size for the Gaussian filter (if enabled). The size of the square kernel to use. Should be a odd value. For example, a size of 3 will involve 3 * 3 pixels in each pass. The larger the value the more blur you get. The range is larger or equal than 3, and less than the Image's Smaller Dimension (Width, Height) divided by 2. Suggested value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.  # noqa: E501

        :return: The gaussian_kernel_size of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._gaussian_kernel_size

    @gaussian_kernel_size.setter
    def gaussian_kernel_size(self, gaussian_kernel_size):
        """Sets the gaussian_kernel_size of this ImageFilterParameters.

        Specifies the kernel size for the Gaussian filter (if enabled). The size of the square kernel to use. Should be a odd value. For example, a size of 3 will involve 3 * 3 pixels in each pass. The larger the value the more blur you get. The range is larger or equal than 3, and less than the Image's Smaller Dimension (Width, Height) divided by 2. Suggested value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.  # noqa: E501

        :param gaussian_kernel_size: The gaussian_kernel_size of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._gaussian_kernel_size = gaussian_kernel_size

    @property
    def unsharp_mask_radius(self):
        """Gets the unsharp_mask_radius of this ImageFilterParameters.  # noqa: E501

        Size of Edges to become after the unsharp mask effect is applied. It controls how wide they get after the filter is applied. Radius and Amount interact, reducing one, allows more of the other. Minimum Value of Radius should be 3 or more to allow for enough pixels surrounding the edge to be investigated. If value passed less than 3 is passed it will be ammended automatically to 3. Proper value is 5. Value >= 3.  # noqa: E501

        :return: The unsharp_mask_radius of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._unsharp_mask_radius

    @unsharp_mask_radius.setter
    def unsharp_mask_radius(self, unsharp_mask_radius):
        """Sets the unsharp_mask_radius of this ImageFilterParameters.

        Size of Edges to become after the unsharp mask effect is applied. It controls how wide they get after the filter is applied. Radius and Amount interact, reducing one, allows more of the other. Minimum Value of Radius should be 3 or more to allow for enough pixels surrounding the edge to be investigated. If value passed less than 3 is passed it will be ammended automatically to 3. Proper value is 5. Value >= 3.  # noqa: E501

        :param unsharp_mask_radius: The unsharp_mask_radius of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._unsharp_mask_radius = unsharp_mask_radius

    @property
    def unsharp_mask_amount(self):
        """Gets the unsharp_mask_amount of this ImageFilterParameters.  # noqa: E501

        Amount of Contrast to be added to areas of edges where filter will be applies. It controls how much darker and how much brighter the edges become. Proper value is 0.5, Value between 0.0-5.0.  # noqa: E501

        :return: The unsharp_mask_amount of this ImageFilterParameters.  # noqa: E501
        :rtype: float
        """
        return self._unsharp_mask_amount

    @unsharp_mask_amount.setter
    def unsharp_mask_amount(self, unsharp_mask_amount):
        """Sets the unsharp_mask_amount of this ImageFilterParameters.

        Amount of Contrast to be added to areas of edges where filter will be applies. It controls how much darker and how much brighter the edges become. Proper value is 0.5, Value between 0.0-5.0.  # noqa: E501

        :param unsharp_mask_amount: The unsharp_mask_amount of this ImageFilterParameters.  # noqa: E501
        :type: float
        """

        self._unsharp_mask_amount = unsharp_mask_amount

    @property
    def unsharp_mask_threshold(self):
        """Gets the unsharp_mask_threshold of this ImageFilterParameters.  # noqa: E501

        Specifies the amount of edges to be sharpened. Smaller values sharpen more, higher values exclude the subtle edges from being sharpened. Proper value is 40. Value between 0-255.  # noqa: E501

        :return: The unsharp_mask_threshold of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._unsharp_mask_threshold

    @unsharp_mask_threshold.setter
    def unsharp_mask_threshold(self, unsharp_mask_threshold):
        """Sets the unsharp_mask_threshold of this ImageFilterParameters.

        Specifies the amount of edges to be sharpened. Smaller values sharpen more, higher values exclude the subtle edges from being sharpened. Proper value is 40. Value between 0-255.  # noqa: E501

        :param unsharp_mask_threshold: The unsharp_mask_threshold of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._unsharp_mask_threshold = unsharp_mask_threshold

    @property
    def subtract_background_rolling_ball_size(self):
        """Gets the subtract_background_rolling_ball_size of this ImageFilterParameters.  # noqa: E501

        Size of ball rolled under the image. Controlled the amount of subtraction. Value >= 50.  # noqa: E501

        :return: The subtract_background_rolling_ball_size of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._subtract_background_rolling_ball_size

    @subtract_background_rolling_ball_size.setter
    def subtract_background_rolling_ball_size(self, subtract_background_rolling_ball_size):
        """Sets the subtract_background_rolling_ball_size of this ImageFilterParameters.

        Size of ball rolled under the image. Controlled the amount of subtraction. Value >= 50.  # noqa: E501

        :param subtract_background_rolling_ball_size: The subtract_background_rolling_ball_size of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._subtract_background_rolling_ball_size = subtract_background_rolling_ball_size

    @property
    def subtract_background_light_background(self):
        """Gets the subtract_background_light_background of this ImageFilterParameters.  # noqa: E501

        Whether a background is lighter or not than the foreground.Value >= true.  # noqa: E501

        :return: The subtract_background_light_background of this ImageFilterParameters.  # noqa: E501
        :rtype: bool
        """
        return self._subtract_background_light_background

    @subtract_background_light_background.setter
    def subtract_background_light_background(self, subtract_background_light_background):
        """Sets the subtract_background_light_background of this ImageFilterParameters.

        Whether a background is lighter or not than the foreground.Value >= true.  # noqa: E501

        :param subtract_background_light_background: The subtract_background_light_background of this ImageFilterParameters.  # noqa: E501
        :type: bool
        """

        self._subtract_background_light_background = subtract_background_light_background

    @property
    def median_kernel_size(self):
        """Gets the median_kernel_size of this ImageFilterParameters.  # noqa: E501

        Specifies the kernel size for the median filter (if enabled). Level corresponding to number of pixels to include in the median operation, where Level = n, corresponds to (n*2+1)^2 pixels to be included. For Example, KernelSize = 1 includes 9 pixels in the median operation, KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.  # noqa: E501

        :return: The median_kernel_size of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._median_kernel_size

    @median_kernel_size.setter
    def median_kernel_size(self, median_kernel_size):
        """Sets the median_kernel_size of this ImageFilterParameters.

        Specifies the kernel size for the median filter (if enabled). Level corresponding to number of pixels to include in the median operation, where Level = n, corresponds to (n*2+1)^2 pixels to be included. For Example, KernelSize = 1 includes 9 pixels in the median operation, KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.  # noqa: E501

        :param median_kernel_size: The median_kernel_size of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._median_kernel_size = median_kernel_size

    @property
    def min_kernel_size(self):
        """Gets the min_kernel_size of this ImageFilterParameters.  # noqa: E501

        Specifies the kernel size for the minimum filter (if enabled). How large should objects grow in each direction of the four directions, left, right, top, and bottom This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.  # noqa: E501

        :return: The min_kernel_size of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._min_kernel_size

    @min_kernel_size.setter
    def min_kernel_size(self, min_kernel_size):
        """Sets the min_kernel_size of this ImageFilterParameters.

        Specifies the kernel size for the minimum filter (if enabled). How large should objects grow in each direction of the four directions, left, right, top, and bottom This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.  # noqa: E501

        :param min_kernel_size: The min_kernel_size of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._min_kernel_size = min_kernel_size

    @property
    def max_kernel_size(self):
        """Gets the max_kernel_size of this ImageFilterParameters.  # noqa: E501

        Specifies the kernel size for the maximum filter (if enabled). How much smaller should objects become in each direction of the four directions, left, right, top, and bottom. This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.  # noqa: E501

        :return: The max_kernel_size of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._max_kernel_size

    @max_kernel_size.setter
    def max_kernel_size(self, max_kernel_size):
        """Sets the max_kernel_size of this ImageFilterParameters.

        Specifies the kernel size for the maximum filter (if enabled). How much smaller should objects become in each direction of the four directions, left, right, top, and bottom. This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.  # noqa: E501

        :param max_kernel_size: The max_kernel_size of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._max_kernel_size = max_kernel_size

    @property
    def soften_value(self):
        """Gets the soften_value of this ImageFilterParameters.  # noqa: E501

        Specifies the value for the soften filter (if enabled). Factor between 1 and 100.  # noqa: E501

        :return: The soften_value of this ImageFilterParameters.  # noqa: E501
        :rtype: int
        """
        return self._soften_value

    @soften_value.setter
    def soften_value(self, soften_value):
        """Sets the soften_value of this ImageFilterParameters.

        Specifies the value for the soften filter (if enabled). Factor between 1 and 100.  # noqa: E501

        :param soften_value: The soften_value of this ImageFilterParameters.  # noqa: E501
        :type: int
        """

        self._soften_value = soften_value

    @property
    def colorize_hue(self):
        """Gets the colorize_hue of this ImageFilterParameters.  # noqa: E501

        Hue for the colorization effect (if enabled) [0..100].  # noqa: E501

        :return: The colorize_hue of this ImageFilterParameters.  # noqa: E501
        :rtype: float
        """
        return self._colorize_hue

    @colorize_hue.setter
    def colorize_hue(self, colorize_hue):
        """Sets the colorize_hue of this ImageFilterParameters.

        Hue for the colorization effect (if enabled) [0..100].  # noqa: E501

        :param colorize_hue: The colorize_hue of this ImageFilterParameters.  # noqa: E501
        :type: float
        """

        self._colorize_hue = colorize_hue

    @property
    def colorize_saturation(self):
        """Gets the colorize_saturation of this ImageFilterParameters.  # noqa: E501

        Saturation for the colorization effect (if enabled) [0..100].  # noqa: E501

        :return: The colorize_saturation of this ImageFilterParameters.  # noqa: E501
        :rtype: float
        """
        return self._colorize_saturation

    @colorize_saturation.setter
    def colorize_saturation(self, colorize_saturation):
        """Sets the colorize_saturation of this ImageFilterParameters.

        Saturation for the colorization effect (if enabled) [0..100].  # noqa: E501

        :param colorize_saturation: The colorize_saturation of this ImageFilterParameters.  # noqa: E501
        :type: float
        """

        self._colorize_saturation = colorize_saturation

    @property
    def colorize_luminosity(self):
        """Gets the colorize_luminosity of this ImageFilterParameters.  # noqa: E501

        Luminosity for the colorization effect  (if enabled) [0..100].  # noqa: E501

        :return: The colorize_luminosity of this ImageFilterParameters.  # noqa: E501
        :rtype: float
        """
        return self._colorize_luminosity

    @colorize_luminosity.setter
    def colorize_luminosity(self, colorize_luminosity):
        """Sets the colorize_luminosity of this ImageFilterParameters.

        Luminosity for the colorization effect  (if enabled) [0..100].  # noqa: E501

        :param colorize_luminosity: The colorize_luminosity of this ImageFilterParameters.  # noqa: E501
        :type: float
        """

        self._colorize_luminosity = colorize_luminosity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageFilterParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageFilterParameters):
            return True

        return self.to_dict() != other.to_dict()
