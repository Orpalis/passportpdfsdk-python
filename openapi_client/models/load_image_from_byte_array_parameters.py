# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class LoadImageFromByteArrayParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'str',
        'file_name': 'str',
        'content_encoding': 'ContentEncoding',
        'get_preview': 'bool',
        'thumbnail_width': 'int',
        'thumbnail_height': 'int',
        'thumbnail_background_color': 'str',
        'thumbnail_fit_to_page_size': 'bool'
    }

    attribute_map = {
        'content': 'Content',
        'file_name': 'FileName',
        'content_encoding': 'ContentEncoding',
        'get_preview': 'GetPreview',
        'thumbnail_width': 'ThumbnailWidth',
        'thumbnail_height': 'ThumbnailHeight',
        'thumbnail_background_color': 'ThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size': 'ThumbnailFitToPageSize'
    }

    def __init__(self, content=None, file_name=None, content_encoding=None, get_preview=False, thumbnail_width=140, thumbnail_height=220, thumbnail_background_color='rgba(0,0,0,0)', thumbnail_fit_to_page_size=True, local_vars_configuration=None):  # noqa: E501
        """LoadImageFromByteArrayParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._file_name = None
        self._content_encoding = None
        self._get_preview = None
        self._thumbnail_width = None
        self._thumbnail_height = None
        self._thumbnail_background_color = None
        self._thumbnail_fit_to_page_size = None
        self.discriminator = None

        self.content = content
        self.file_name = file_name
        if content_encoding is not None:
            self.content_encoding = content_encoding
        if get_preview is not None:
            self.get_preview = get_preview
        if thumbnail_width is not None:
            self.thumbnail_width = thumbnail_width
        if thumbnail_height is not None:
            self.thumbnail_height = thumbnail_height
        self.thumbnail_background_color = thumbnail_background_color
        if thumbnail_fit_to_page_size is not None:
            self.thumbnail_fit_to_page_size = thumbnail_fit_to_page_size

    @property
    def content(self):
        """Gets the content of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies the data of the image.  # noqa: E501

        :return: The content of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LoadImageFromByteArrayParameters.

        Specifies the data of the image.  # noqa: E501

        :param content: The content of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def file_name(self):
        """Gets the file_name of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies the name of the document.  # noqa: E501

        :return: The file_name of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this LoadImageFromByteArrayParameters.

        Specifies the name of the document.  # noqa: E501

        :param file_name: The file_name of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def content_encoding(self):
        """Gets the content_encoding of this LoadImageFromByteArrayParameters.  # noqa: E501


        :return: The content_encoding of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: ContentEncoding
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this LoadImageFromByteArrayParameters.


        :param content_encoding: The content_encoding of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: ContentEncoding
        """

        self._content_encoding = content_encoding

    @property
    def get_preview(self):
        """Gets the get_preview of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies whether the response must contain a thumbnail of the first page of the document.  # noqa: E501

        :return: The get_preview of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._get_preview

    @get_preview.setter
    def get_preview(self, get_preview):
        """Sets the get_preview of this LoadImageFromByteArrayParameters.

        Specifies whether the response must contain a thumbnail of the first page of the document.  # noqa: E501

        :param get_preview: The get_preview of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._get_preview = get_preview

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_width of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this LoadImageFromByteArrayParameters.

        Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_width: The thumbnail_width of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_height of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this LoadImageFromByteArrayParameters.

        Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_height: The thumbnail_height of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_background_color(self):
        """Gets the thumbnail_background_color of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_background_color of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_background_color

    @thumbnail_background_color.setter
    def thumbnail_background_color(self, thumbnail_background_color):
        """Sets the thumbnail_background_color of this LoadImageFromByteArrayParameters.

        Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_background_color: The thumbnail_background_color of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._thumbnail_background_color = thumbnail_background_color

    @property
    def thumbnail_fit_to_page_size(self):
        """Gets the thumbnail_fit_to_page_size of this LoadImageFromByteArrayParameters.  # noqa: E501

        Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_fit_to_page_size of this LoadImageFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_fit_to_page_size

    @thumbnail_fit_to_page_size.setter
    def thumbnail_fit_to_page_size(self, thumbnail_fit_to_page_size):
        """Sets the thumbnail_fit_to_page_size of this LoadImageFromByteArrayParameters.

        Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_fit_to_page_size: The thumbnail_fit_to_page_size of this LoadImageFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._thumbnail_fit_to_page_size = thumbnail_fit_to_page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoadImageFromByteArrayParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoadImageFromByteArrayParameters):
            return True

        return self.to_dict() != other.to_dict()
