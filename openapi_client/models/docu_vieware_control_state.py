# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocuViewareControlState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timeout': 'int',
        'control_id': 'str',
        'show_logo': 'bool',
        'remote_ip': 'str',
        'file_hosting_uri': 'str',
        'document_uri': 'str',
        'document_file_name': 'str',
        'disable_download_progress': 'bool',
        'document_alignment': 'DocumentAlignment',
        'document_position': 'DocumentPosition',
        'enable_gd_picture_annotations': 'bool',
        'disable_annotation_printing': 'bool',
        'enable_form_fields_edition': 'bool',
        'annotation_editor_mode': 'bool',
        'link_annotation_click_behaviour': 'LinkAnnotationClickBehaviour',
        'zoom': 'float',
        'zoom_mode': 'ViewerZoomMode',
        'open_zoom_mode': 'ViewerZoomMode',
        'view_rotation': 'RotateFlip',
        'page_rotation': 'RotateFlip',
        'zoom_step': 'int',
        'scroll_bars': 'bool',
        'force_scroll_bars': 'bool',
        'page_view_mode': 'PageViewMode',
        'enable_text_selection': 'bool',
        'enable_text_selection_annotation': 'bool',
        'locale': 'DocuViewareLocale',
        'user_languages': 'list[str]',
        'control_width': 'str',
        'control_height': 'str',
        'annotation_drop_shadow': 'bool',
        'allow_print': 'bool',
        'allow_upload': 'bool',
        'enable_multiple_thumbnail_selection': 'bool',
        'enable_thumbnail_drag_drop': 'bool',
        'enable_file_upload_button': 'bool',
        'enable_load_from_uri_button': 'bool',
        'enable_save_button': 'bool',
        'enable_pages_navigation_buttons': 'bool',
        'enable_print_button': 'bool',
        'enable_print_to_pdf': 'bool',
        'enable_fit_width_button': 'bool',
        'enable_zoom100_button': 'bool',
        'enable_mouse_mode_buttons': 'bool',
        'enable_pan_mode_button': 'bool',
        'enable_select_mode_button': 'bool',
        'enable_marquee_zoom_mode_button': 'bool',
        'enable_full_screen_button': 'bool',
        'enable_fit_page_button': 'bool',
        'enable_zoom_buttons': 'bool',
        'enable_page_view_buttons': 'bool',
        'rotate_buttons_mode': 'RotateMode',
        'enable_rotate_buttons': 'bool',
        'enable_annotation_action_buttons': 'bool',
        'enable_selected_text_annotation_edition': 'bool',
        'enable_rectangle_highlighter_annotation_button': 'bool',
        'enable_freehand_highlighter_annotation_button': 'bool',
        'enable_rubber_stamp_annotation_button': 'bool',
        'enable_rectangle_annotation_button': 'bool',
        'enable_ellipse_annotation_button': 'bool',
        'enable_line_annotation_button': 'bool',
        'enable_connected_line_annotation_button': 'bool',
        'enable_freehand_annotation_button': 'bool',
        'enable_line_arrow_annotation_button': 'bool',
        'enable_link_annotation_button': 'bool',
        'enable_ruler_annotation_button': 'bool',
        'enable_poly_ruler_annotation_button': 'bool',
        'enable_text_annotation_button': 'bool',
        'enable_sticky_note_annotation_button': 'bool',
        'enable_twain_acquisition_button': 'bool',
        'twain_source_enable_custom_configuration': 'bool',
        'twain_source_select_feeder': 'bool',
        'twain_source_bit_depth': 'int',
        'twain_source_resolution': 'int',
        'twain_source_enable_duplex': 'bool',
        'twain_source_hide_ui': 'bool',
        'free_hand_continuous_drawing_mode': 'bool',
        'show_text_search_snap_in': 'bool',
        'show_thumbnails_snap_in': 'bool',
        'show_bookmarks_snap_in': 'bool',
        'show_annotations_snap_in': 'bool',
        'show_annotations_comments_snap_in': 'bool',
        'show_redaction_snap_in': 'bool',
        'show_digital_signature_snap_in': 'bool',
        'thumbnail_width': 'int',
        'thumbnail_height': 'int',
        'snap_in_panel_default_width': 'str',
        'collapsed_snap_in': 'bool',
        'collapse_snapin_on_document_closed': 'bool',
        'show_snap_in_collapse_button': 'bool',
        'show_snap_in_panel_header': 'bool',
        'show_snap_in_button_strip': 'bool',
        'show_toolbar': 'bool',
        'toolbar_style': 'ToolbarStyle',
        'toolbar_buttons_spacing': 'int',
        'toolbar_height': 'int',
        'stroke_color': 'str',
        'misc_border_color': 'str',
        'header_color': 'str',
        'panel_back_color': 'str',
        'viewer_back_color': 'str',
        'active_selected_color': 'str',
        'toolbar_back_color': 'str',
        'custom_notification_icon_error': 'str',
        'custom_notification_icon_question': 'str',
        'custom_notification_icon_warning': 'str',
        'custom_notification_icon_info': 'str',
        'custom_notification_icon_ok': 'str',
        'allowed_export_formats': 'str',
        'disable_annotation_drawing_mode_panel': 'bool',
        'image_quality': 'int',
        'print_quality': 'PrintQuality',
        'enable_documents_drop': 'bool',
        'ajax_custom_headers': 'str',
        'file_download_custom_headers': 'str',
        'text_search_max_results': 'int',
        'max_upload_size': 'int',
        'max_download_size': 'int',
        'max_pages': 'int',
        'certificates': 'list[DocuViewareCertificate]',
        'extra_features': 'str'
    }

    attribute_map = {
        'timeout': 'Timeout',
        'control_id': 'ControlID',
        'show_logo': 'ShowLogo',
        'remote_ip': 'RemoteIP',
        'file_hosting_uri': 'FileHostingURI',
        'document_uri': 'DocumentURI',
        'document_file_name': 'DocumentFileName',
        'disable_download_progress': 'DisableDownloadProgress',
        'document_alignment': 'DocumentAlignment',
        'document_position': 'DocumentPosition',
        'enable_gd_picture_annotations': 'EnableGdPictureAnnotations',
        'disable_annotation_printing': 'DisableAnnotationPrinting',
        'enable_form_fields_edition': 'EnableFormFieldsEdition',
        'annotation_editor_mode': 'AnnotationEditorMode',
        'link_annotation_click_behaviour': 'LinkAnnotationClickBehaviour',
        'zoom': 'Zoom',
        'zoom_mode': 'ZoomMode',
        'open_zoom_mode': 'OpenZoomMode',
        'view_rotation': 'ViewRotation',
        'page_rotation': 'PageRotation',
        'zoom_step': 'ZoomStep',
        'scroll_bars': 'ScrollBars',
        'force_scroll_bars': 'ForceScrollBars',
        'page_view_mode': 'PageViewMode',
        'enable_text_selection': 'EnableTextSelection',
        'enable_text_selection_annotation': 'EnableTextSelectionAnnotation',
        'locale': 'Locale',
        'user_languages': 'UserLanguages',
        'control_width': 'ControlWidth',
        'control_height': 'ControlHeight',
        'annotation_drop_shadow': 'AnnotationDropShadow',
        'allow_print': 'AllowPrint',
        'allow_upload': 'AllowUpload',
        'enable_multiple_thumbnail_selection': 'EnableMultipleThumbnailSelection',
        'enable_thumbnail_drag_drop': 'EnableThumbnailDragDrop',
        'enable_file_upload_button': 'EnableFileUploadButton',
        'enable_load_from_uri_button': 'EnableLoadFromUriButton',
        'enable_save_button': 'EnableSaveButton',
        'enable_pages_navigation_buttons': 'EnablePagesNavigationButtons',
        'enable_print_button': 'EnablePrintButton',
        'enable_print_to_pdf': 'EnablePrintToPDF',
        'enable_fit_width_button': 'EnableFitWidthButton',
        'enable_zoom100_button': 'EnableZoom100Button',
        'enable_mouse_mode_buttons': 'EnableMouseModeButtons',
        'enable_pan_mode_button': 'EnablePanModeButton',
        'enable_select_mode_button': 'EnableSelectModeButton',
        'enable_marquee_zoom_mode_button': 'EnableMarqueeZoomModeButton',
        'enable_full_screen_button': 'EnableFullScreenButton',
        'enable_fit_page_button': 'EnableFitPageButton',
        'enable_zoom_buttons': 'EnableZoomButtons',
        'enable_page_view_buttons': 'EnablePageViewButtons',
        'rotate_buttons_mode': 'RotateButtonsMode',
        'enable_rotate_buttons': 'EnableRotateButtons',
        'enable_annotation_action_buttons': 'EnableAnnotationActionButtons',
        'enable_selected_text_annotation_edition': 'EnableSelectedTextAnnotationEdition',
        'enable_rectangle_highlighter_annotation_button': 'EnableRectangleHighlighterAnnotationButton',
        'enable_freehand_highlighter_annotation_button': 'EnableFreehandHighlighterAnnotationButton',
        'enable_rubber_stamp_annotation_button': 'EnableRubberStampAnnotationButton',
        'enable_rectangle_annotation_button': 'EnableRectangleAnnotationButton',
        'enable_ellipse_annotation_button': 'EnableEllipseAnnotationButton',
        'enable_line_annotation_button': 'EnableLineAnnotationButton',
        'enable_connected_line_annotation_button': 'EnableConnectedLineAnnotationButton',
        'enable_freehand_annotation_button': 'EnableFreehandAnnotationButton',
        'enable_line_arrow_annotation_button': 'EnableLineArrowAnnotationButton',
        'enable_link_annotation_button': 'EnableLinkAnnotationButton',
        'enable_ruler_annotation_button': 'EnableRulerAnnotationButton',
        'enable_poly_ruler_annotation_button': 'EnablePolyRulerAnnotationButton',
        'enable_text_annotation_button': 'EnableTextAnnotationButton',
        'enable_sticky_note_annotation_button': 'EnableStickyNoteAnnotationButton',
        'enable_twain_acquisition_button': 'EnableTwainAcquisitionButton',
        'twain_source_enable_custom_configuration': 'TwainSourceEnableCustomConfiguration',
        'twain_source_select_feeder': 'TwainSourceSelectFeeder',
        'twain_source_bit_depth': 'TwainSourceBitDepth',
        'twain_source_resolution': 'TwainSourceResolution',
        'twain_source_enable_duplex': 'TwainSourceEnableDuplex',
        'twain_source_hide_ui': 'TwainSourceHideUI',
        'free_hand_continuous_drawing_mode': 'FreeHandContinuousDrawingMode',
        'show_text_search_snap_in': 'ShowTextSearchSnapIn',
        'show_thumbnails_snap_in': 'ShowThumbnailsSnapIn',
        'show_bookmarks_snap_in': 'ShowBookmarksSnapIn',
        'show_annotations_snap_in': 'ShowAnnotationsSnapIn',
        'show_annotations_comments_snap_in': 'ShowAnnotationsCommentsSnapIn',
        'show_redaction_snap_in': 'ShowRedactionSnapIn',
        'show_digital_signature_snap_in': 'ShowDigitalSignatureSnapIn',
        'thumbnail_width': 'ThumbnailWidth',
        'thumbnail_height': 'ThumbnailHeight',
        'snap_in_panel_default_width': 'SnapInPanelDefaultWidth',
        'collapsed_snap_in': 'CollapsedSnapIn',
        'collapse_snapin_on_document_closed': 'CollapseSnapinOnDocumentClosed',
        'show_snap_in_collapse_button': 'ShowSnapInCollapseButton',
        'show_snap_in_panel_header': 'ShowSnapInPanelHeader',
        'show_snap_in_button_strip': 'ShowSnapInButtonStrip',
        'show_toolbar': 'ShowToolbar',
        'toolbar_style': 'ToolbarStyle',
        'toolbar_buttons_spacing': 'ToolbarButtonsSpacing',
        'toolbar_height': 'ToolbarHeight',
        'stroke_color': 'StrokeColor',
        'misc_border_color': 'MiscBorderColor',
        'header_color': 'HeaderColor',
        'panel_back_color': 'PanelBackColor',
        'viewer_back_color': 'ViewerBackColor',
        'active_selected_color': 'ActiveSelectedColor',
        'toolbar_back_color': 'ToolbarBackColor',
        'custom_notification_icon_error': 'CustomNotificationIconError',
        'custom_notification_icon_question': 'CustomNotificationIconQuestion',
        'custom_notification_icon_warning': 'CustomNotificationIconWarning',
        'custom_notification_icon_info': 'CustomNotificationIconInfo',
        'custom_notification_icon_ok': 'CustomNotificationIconOk',
        'allowed_export_formats': 'AllowedExportFormats',
        'disable_annotation_drawing_mode_panel': 'DisableAnnotationDrawingModePanel',
        'image_quality': 'ImageQuality',
        'print_quality': 'PrintQuality',
        'enable_documents_drop': 'EnableDocumentsDrop',
        'ajax_custom_headers': 'AjaxCustomHeaders',
        'file_download_custom_headers': 'FileDownloadCustomHeaders',
        'text_search_max_results': 'TextSearchMaxResults',
        'max_upload_size': 'MaxUploadSize',
        'max_download_size': 'MaxDownloadSize',
        'max_pages': 'MaxPages',
        'certificates': 'Certificates',
        'extra_features': 'ExtraFeatures'
    }

    def __init__(self, timeout=20, control_id='DocuVieware1', show_logo=True, remote_ip='', file_hosting_uri='', document_uri='', document_file_name='', disable_download_progress=False, document_alignment=None, document_position=None, enable_gd_picture_annotations=True, disable_annotation_printing=False, enable_form_fields_edition=True, annotation_editor_mode=True, link_annotation_click_behaviour=None, zoom=1, zoom_mode=None, open_zoom_mode=None, view_rotation=None, page_rotation=None, zoom_step=30, scroll_bars=True, force_scroll_bars=False, page_view_mode=None, enable_text_selection=True, enable_text_selection_annotation=True, locale=None, user_languages=None, control_width='100%', control_height='100%', annotation_drop_shadow=True, allow_print=True, allow_upload=True, enable_multiple_thumbnail_selection=False, enable_thumbnail_drag_drop=False, enable_file_upload_button=True, enable_load_from_uri_button=True, enable_save_button=True, enable_pages_navigation_buttons=True, enable_print_button=True, enable_print_to_pdf=True, enable_fit_width_button=True, enable_zoom100_button=True, enable_mouse_mode_buttons=True, enable_pan_mode_button=True, enable_select_mode_button=True, enable_marquee_zoom_mode_button=True, enable_full_screen_button=True, enable_fit_page_button=True, enable_zoom_buttons=True, enable_page_view_buttons=True, rotate_buttons_mode=None, enable_rotate_buttons=True, enable_annotation_action_buttons=True, enable_selected_text_annotation_edition=True, enable_rectangle_highlighter_annotation_button=True, enable_freehand_highlighter_annotation_button=True, enable_rubber_stamp_annotation_button=True, enable_rectangle_annotation_button=True, enable_ellipse_annotation_button=True, enable_line_annotation_button=True, enable_connected_line_annotation_button=True, enable_freehand_annotation_button=True, enable_line_arrow_annotation_button=True, enable_link_annotation_button=True, enable_ruler_annotation_button=True, enable_poly_ruler_annotation_button=True, enable_text_annotation_button=True, enable_sticky_note_annotation_button=True, enable_twain_acquisition_button=True, twain_source_enable_custom_configuration=False, twain_source_select_feeder=True, twain_source_bit_depth=24, twain_source_resolution=200, twain_source_enable_duplex=False, twain_source_hide_ui=True, free_hand_continuous_drawing_mode=True, show_text_search_snap_in=True, show_thumbnails_snap_in=True, show_bookmarks_snap_in=True, show_annotations_snap_in=True, show_annotations_comments_snap_in=True, show_redaction_snap_in=True, show_digital_signature_snap_in=False, thumbnail_width=192, thumbnail_height=256, snap_in_panel_default_width='280px', collapsed_snap_in=False, collapse_snapin_on_document_closed=True, show_snap_in_collapse_button=True, show_snap_in_panel_header=True, show_snap_in_button_strip=True, show_toolbar=True, toolbar_style=None, toolbar_buttons_spacing=12, toolbar_height=48, stroke_color='#646464', misc_border_color='#DCDCDC', header_color='#213E4E', panel_back_color='#FFFFFF', viewer_back_color='#565656', active_selected_color='#0382D4', toolbar_back_color='#F2F2F2', custom_notification_icon_error='', custom_notification_icon_question='', custom_notification_icon_warning='', custom_notification_icon_info='', custom_notification_icon_ok='', allowed_export_formats='*', disable_annotation_drawing_mode_panel=False, image_quality=10, print_quality=None, enable_documents_drop=True, ajax_custom_headers='', file_download_custom_headers='', text_search_max_results=100, max_upload_size=10485760, max_download_size=10485760, max_pages=3000, certificates=None, extra_features='', local_vars_configuration=None):  # noqa: E501
        """DocuViewareControlState - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timeout = None
        self._control_id = None
        self._show_logo = None
        self._remote_ip = None
        self._file_hosting_uri = None
        self._document_uri = None
        self._document_file_name = None
        self._disable_download_progress = None
        self._document_alignment = None
        self._document_position = None
        self._enable_gd_picture_annotations = None
        self._disable_annotation_printing = None
        self._enable_form_fields_edition = None
        self._annotation_editor_mode = None
        self._link_annotation_click_behaviour = None
        self._zoom = None
        self._zoom_mode = None
        self._open_zoom_mode = None
        self._view_rotation = None
        self._page_rotation = None
        self._zoom_step = None
        self._scroll_bars = None
        self._force_scroll_bars = None
        self._page_view_mode = None
        self._enable_text_selection = None
        self._enable_text_selection_annotation = None
        self._locale = None
        self._user_languages = None
        self._control_width = None
        self._control_height = None
        self._annotation_drop_shadow = None
        self._allow_print = None
        self._allow_upload = None
        self._enable_multiple_thumbnail_selection = None
        self._enable_thumbnail_drag_drop = None
        self._enable_file_upload_button = None
        self._enable_load_from_uri_button = None
        self._enable_save_button = None
        self._enable_pages_navigation_buttons = None
        self._enable_print_button = None
        self._enable_print_to_pdf = None
        self._enable_fit_width_button = None
        self._enable_zoom100_button = None
        self._enable_mouse_mode_buttons = None
        self._enable_pan_mode_button = None
        self._enable_select_mode_button = None
        self._enable_marquee_zoom_mode_button = None
        self._enable_full_screen_button = None
        self._enable_fit_page_button = None
        self._enable_zoom_buttons = None
        self._enable_page_view_buttons = None
        self._rotate_buttons_mode = None
        self._enable_rotate_buttons = None
        self._enable_annotation_action_buttons = None
        self._enable_selected_text_annotation_edition = None
        self._enable_rectangle_highlighter_annotation_button = None
        self._enable_freehand_highlighter_annotation_button = None
        self._enable_rubber_stamp_annotation_button = None
        self._enable_rectangle_annotation_button = None
        self._enable_ellipse_annotation_button = None
        self._enable_line_annotation_button = None
        self._enable_connected_line_annotation_button = None
        self._enable_freehand_annotation_button = None
        self._enable_line_arrow_annotation_button = None
        self._enable_link_annotation_button = None
        self._enable_ruler_annotation_button = None
        self._enable_poly_ruler_annotation_button = None
        self._enable_text_annotation_button = None
        self._enable_sticky_note_annotation_button = None
        self._enable_twain_acquisition_button = None
        self._twain_source_enable_custom_configuration = None
        self._twain_source_select_feeder = None
        self._twain_source_bit_depth = None
        self._twain_source_resolution = None
        self._twain_source_enable_duplex = None
        self._twain_source_hide_ui = None
        self._free_hand_continuous_drawing_mode = None
        self._show_text_search_snap_in = None
        self._show_thumbnails_snap_in = None
        self._show_bookmarks_snap_in = None
        self._show_annotations_snap_in = None
        self._show_annotations_comments_snap_in = None
        self._show_redaction_snap_in = None
        self._show_digital_signature_snap_in = None
        self._thumbnail_width = None
        self._thumbnail_height = None
        self._snap_in_panel_default_width = None
        self._collapsed_snap_in = None
        self._collapse_snapin_on_document_closed = None
        self._show_snap_in_collapse_button = None
        self._show_snap_in_panel_header = None
        self._show_snap_in_button_strip = None
        self._show_toolbar = None
        self._toolbar_style = None
        self._toolbar_buttons_spacing = None
        self._toolbar_height = None
        self._stroke_color = None
        self._misc_border_color = None
        self._header_color = None
        self._panel_back_color = None
        self._viewer_back_color = None
        self._active_selected_color = None
        self._toolbar_back_color = None
        self._custom_notification_icon_error = None
        self._custom_notification_icon_question = None
        self._custom_notification_icon_warning = None
        self._custom_notification_icon_info = None
        self._custom_notification_icon_ok = None
        self._allowed_export_formats = None
        self._disable_annotation_drawing_mode_panel = None
        self._image_quality = None
        self._print_quality = None
        self._enable_documents_drop = None
        self._ajax_custom_headers = None
        self._file_download_custom_headers = None
        self._text_search_max_results = None
        self._max_upload_size = None
        self._max_download_size = None
        self._max_pages = None
        self._certificates = None
        self._extra_features = None
        self.discriminator = None

        if timeout is not None:
            self.timeout = timeout
        self.control_id = control_id
        if show_logo is not None:
            self.show_logo = show_logo
        self.remote_ip = remote_ip
        self.file_hosting_uri = file_hosting_uri
        self.document_uri = document_uri
        self.document_file_name = document_file_name
        if disable_download_progress is not None:
            self.disable_download_progress = disable_download_progress
        if document_alignment is not None:
            self.document_alignment = document_alignment
        if document_position is not None:
            self.document_position = document_position
        if enable_gd_picture_annotations is not None:
            self.enable_gd_picture_annotations = enable_gd_picture_annotations
        if disable_annotation_printing is not None:
            self.disable_annotation_printing = disable_annotation_printing
        if enable_form_fields_edition is not None:
            self.enable_form_fields_edition = enable_form_fields_edition
        if annotation_editor_mode is not None:
            self.annotation_editor_mode = annotation_editor_mode
        if link_annotation_click_behaviour is not None:
            self.link_annotation_click_behaviour = link_annotation_click_behaviour
        if zoom is not None:
            self.zoom = zoom
        if zoom_mode is not None:
            self.zoom_mode = zoom_mode
        if open_zoom_mode is not None:
            self.open_zoom_mode = open_zoom_mode
        if view_rotation is not None:
            self.view_rotation = view_rotation
        if page_rotation is not None:
            self.page_rotation = page_rotation
        if zoom_step is not None:
            self.zoom_step = zoom_step
        if scroll_bars is not None:
            self.scroll_bars = scroll_bars
        if force_scroll_bars is not None:
            self.force_scroll_bars = force_scroll_bars
        if page_view_mode is not None:
            self.page_view_mode = page_view_mode
        if enable_text_selection is not None:
            self.enable_text_selection = enable_text_selection
        if enable_text_selection_annotation is not None:
            self.enable_text_selection_annotation = enable_text_selection_annotation
        if locale is not None:
            self.locale = locale
        self.user_languages = user_languages
        self.control_width = control_width
        self.control_height = control_height
        if annotation_drop_shadow is not None:
            self.annotation_drop_shadow = annotation_drop_shadow
        if allow_print is not None:
            self.allow_print = allow_print
        if allow_upload is not None:
            self.allow_upload = allow_upload
        if enable_multiple_thumbnail_selection is not None:
            self.enable_multiple_thumbnail_selection = enable_multiple_thumbnail_selection
        if enable_thumbnail_drag_drop is not None:
            self.enable_thumbnail_drag_drop = enable_thumbnail_drag_drop
        if enable_file_upload_button is not None:
            self.enable_file_upload_button = enable_file_upload_button
        if enable_load_from_uri_button is not None:
            self.enable_load_from_uri_button = enable_load_from_uri_button
        if enable_save_button is not None:
            self.enable_save_button = enable_save_button
        if enable_pages_navigation_buttons is not None:
            self.enable_pages_navigation_buttons = enable_pages_navigation_buttons
        if enable_print_button is not None:
            self.enable_print_button = enable_print_button
        if enable_print_to_pdf is not None:
            self.enable_print_to_pdf = enable_print_to_pdf
        if enable_fit_width_button is not None:
            self.enable_fit_width_button = enable_fit_width_button
        if enable_zoom100_button is not None:
            self.enable_zoom100_button = enable_zoom100_button
        if enable_mouse_mode_buttons is not None:
            self.enable_mouse_mode_buttons = enable_mouse_mode_buttons
        if enable_pan_mode_button is not None:
            self.enable_pan_mode_button = enable_pan_mode_button
        if enable_select_mode_button is not None:
            self.enable_select_mode_button = enable_select_mode_button
        if enable_marquee_zoom_mode_button is not None:
            self.enable_marquee_zoom_mode_button = enable_marquee_zoom_mode_button
        if enable_full_screen_button is not None:
            self.enable_full_screen_button = enable_full_screen_button
        if enable_fit_page_button is not None:
            self.enable_fit_page_button = enable_fit_page_button
        if enable_zoom_buttons is not None:
            self.enable_zoom_buttons = enable_zoom_buttons
        if enable_page_view_buttons is not None:
            self.enable_page_view_buttons = enable_page_view_buttons
        if rotate_buttons_mode is not None:
            self.rotate_buttons_mode = rotate_buttons_mode
        if enable_rotate_buttons is not None:
            self.enable_rotate_buttons = enable_rotate_buttons
        if enable_annotation_action_buttons is not None:
            self.enable_annotation_action_buttons = enable_annotation_action_buttons
        if enable_selected_text_annotation_edition is not None:
            self.enable_selected_text_annotation_edition = enable_selected_text_annotation_edition
        if enable_rectangle_highlighter_annotation_button is not None:
            self.enable_rectangle_highlighter_annotation_button = enable_rectangle_highlighter_annotation_button
        if enable_freehand_highlighter_annotation_button is not None:
            self.enable_freehand_highlighter_annotation_button = enable_freehand_highlighter_annotation_button
        if enable_rubber_stamp_annotation_button is not None:
            self.enable_rubber_stamp_annotation_button = enable_rubber_stamp_annotation_button
        if enable_rectangle_annotation_button is not None:
            self.enable_rectangle_annotation_button = enable_rectangle_annotation_button
        if enable_ellipse_annotation_button is not None:
            self.enable_ellipse_annotation_button = enable_ellipse_annotation_button
        if enable_line_annotation_button is not None:
            self.enable_line_annotation_button = enable_line_annotation_button
        if enable_connected_line_annotation_button is not None:
            self.enable_connected_line_annotation_button = enable_connected_line_annotation_button
        if enable_freehand_annotation_button is not None:
            self.enable_freehand_annotation_button = enable_freehand_annotation_button
        if enable_line_arrow_annotation_button is not None:
            self.enable_line_arrow_annotation_button = enable_line_arrow_annotation_button
        if enable_link_annotation_button is not None:
            self.enable_link_annotation_button = enable_link_annotation_button
        if enable_ruler_annotation_button is not None:
            self.enable_ruler_annotation_button = enable_ruler_annotation_button
        if enable_poly_ruler_annotation_button is not None:
            self.enable_poly_ruler_annotation_button = enable_poly_ruler_annotation_button
        if enable_text_annotation_button is not None:
            self.enable_text_annotation_button = enable_text_annotation_button
        if enable_sticky_note_annotation_button is not None:
            self.enable_sticky_note_annotation_button = enable_sticky_note_annotation_button
        if enable_twain_acquisition_button is not None:
            self.enable_twain_acquisition_button = enable_twain_acquisition_button
        if twain_source_enable_custom_configuration is not None:
            self.twain_source_enable_custom_configuration = twain_source_enable_custom_configuration
        if twain_source_select_feeder is not None:
            self.twain_source_select_feeder = twain_source_select_feeder
        if twain_source_bit_depth is not None:
            self.twain_source_bit_depth = twain_source_bit_depth
        if twain_source_resolution is not None:
            self.twain_source_resolution = twain_source_resolution
        if twain_source_enable_duplex is not None:
            self.twain_source_enable_duplex = twain_source_enable_duplex
        if twain_source_hide_ui is not None:
            self.twain_source_hide_ui = twain_source_hide_ui
        if free_hand_continuous_drawing_mode is not None:
            self.free_hand_continuous_drawing_mode = free_hand_continuous_drawing_mode
        if show_text_search_snap_in is not None:
            self.show_text_search_snap_in = show_text_search_snap_in
        if show_thumbnails_snap_in is not None:
            self.show_thumbnails_snap_in = show_thumbnails_snap_in
        if show_bookmarks_snap_in is not None:
            self.show_bookmarks_snap_in = show_bookmarks_snap_in
        if show_annotations_snap_in is not None:
            self.show_annotations_snap_in = show_annotations_snap_in
        if show_annotations_comments_snap_in is not None:
            self.show_annotations_comments_snap_in = show_annotations_comments_snap_in
        if show_redaction_snap_in is not None:
            self.show_redaction_snap_in = show_redaction_snap_in
        if show_digital_signature_snap_in is not None:
            self.show_digital_signature_snap_in = show_digital_signature_snap_in
        if thumbnail_width is not None:
            self.thumbnail_width = thumbnail_width
        if thumbnail_height is not None:
            self.thumbnail_height = thumbnail_height
        self.snap_in_panel_default_width = snap_in_panel_default_width
        if collapsed_snap_in is not None:
            self.collapsed_snap_in = collapsed_snap_in
        if collapse_snapin_on_document_closed is not None:
            self.collapse_snapin_on_document_closed = collapse_snapin_on_document_closed
        if show_snap_in_collapse_button is not None:
            self.show_snap_in_collapse_button = show_snap_in_collapse_button
        if show_snap_in_panel_header is not None:
            self.show_snap_in_panel_header = show_snap_in_panel_header
        if show_snap_in_button_strip is not None:
            self.show_snap_in_button_strip = show_snap_in_button_strip
        if show_toolbar is not None:
            self.show_toolbar = show_toolbar
        if toolbar_style is not None:
            self.toolbar_style = toolbar_style
        if toolbar_buttons_spacing is not None:
            self.toolbar_buttons_spacing = toolbar_buttons_spacing
        if toolbar_height is not None:
            self.toolbar_height = toolbar_height
        self.stroke_color = stroke_color
        self.misc_border_color = misc_border_color
        self.header_color = header_color
        self.panel_back_color = panel_back_color
        self.viewer_back_color = viewer_back_color
        self.active_selected_color = active_selected_color
        self.toolbar_back_color = toolbar_back_color
        self.custom_notification_icon_error = custom_notification_icon_error
        self.custom_notification_icon_question = custom_notification_icon_question
        self.custom_notification_icon_warning = custom_notification_icon_warning
        self.custom_notification_icon_info = custom_notification_icon_info
        self.custom_notification_icon_ok = custom_notification_icon_ok
        self.allowed_export_formats = allowed_export_formats
        if disable_annotation_drawing_mode_panel is not None:
            self.disable_annotation_drawing_mode_panel = disable_annotation_drawing_mode_panel
        if image_quality is not None:
            self.image_quality = image_quality
        if print_quality is not None:
            self.print_quality = print_quality
        if enable_documents_drop is not None:
            self.enable_documents_drop = enable_documents_drop
        self.ajax_custom_headers = ajax_custom_headers
        self.file_download_custom_headers = file_download_custom_headers
        if text_search_max_results is not None:
            self.text_search_max_results = text_search_max_results
        if max_upload_size is not None:
            self.max_upload_size = max_upload_size
        if max_download_size is not None:
            self.max_download_size = max_download_size
        if max_pages is not None:
            self.max_pages = max_pages
        self.certificates = certificates
        self.extra_features = extra_features

    @property
    def timeout(self):
        """Gets the timeout of this DocuViewareControlState.  # noqa: E501

        Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />  # noqa: E501

        :return: The timeout of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this DocuViewareControlState.

        Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />  # noqa: E501

        :param timeout: The timeout of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def control_id(self):
        """Gets the control_id of this DocuViewareControlState.  # noqa: E501

        Specifies client the identifier associated with the control.  # noqa: E501

        :return: The control_id of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._control_id

    @control_id.setter
    def control_id(self, control_id):
        """Sets the control_id of this DocuViewareControlState.

        Specifies client the identifier associated with the control.  # noqa: E501

        :param control_id: The control_id of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._control_id = control_id

    @property
    def show_logo(self):
        """Gets the show_logo of this DocuViewareControlState.  # noqa: E501

        Specifies if the DocuVieware logo is displayed in the toolbar.  # noqa: E501

        :return: The show_logo of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_logo

    @show_logo.setter
    def show_logo(self, show_logo):
        """Sets the show_logo of this DocuViewareControlState.

        Specifies if the DocuVieware logo is displayed in the toolbar.  # noqa: E501

        :param show_logo: The show_logo of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_logo = show_logo

    @property
    def remote_ip(self):
        """Gets the remote_ip of this DocuViewareControlState.  # noqa: E501

        Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.  # noqa: E501

        :return: The remote_ip of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this DocuViewareControlState.

        Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.  # noqa: E501

        :param remote_ip: The remote_ip of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def file_hosting_uri(self):
        """Gets the file_hosting_uri of this DocuViewareControlState.  # noqa: E501


        :return: The file_hosting_uri of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._file_hosting_uri

    @file_hosting_uri.setter
    def file_hosting_uri(self, file_hosting_uri):
        """Sets the file_hosting_uri of this DocuViewareControlState.


        :param file_hosting_uri: The file_hosting_uri of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._file_hosting_uri = file_hosting_uri

    @property
    def document_uri(self):
        """Gets the document_uri of this DocuViewareControlState.  # noqa: E501

        Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.  # noqa: E501

        :return: The document_uri of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._document_uri

    @document_uri.setter
    def document_uri(self, document_uri):
        """Sets the document_uri of this DocuViewareControlState.

        Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.  # noqa: E501

        :param document_uri: The document_uri of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._document_uri = document_uri

    @property
    def document_file_name(self):
        """Gets the document_file_name of this DocuViewareControlState.  # noqa: E501

        Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.  # noqa: E501

        :return: The document_file_name of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._document_file_name

    @document_file_name.setter
    def document_file_name(self, document_file_name):
        """Sets the document_file_name of this DocuViewareControlState.

        Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.  # noqa: E501

        :param document_file_name: The document_file_name of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._document_file_name = document_file_name

    @property
    def disable_download_progress(self):
        """Gets the disable_download_progress of this DocuViewareControlState.  # noqa: E501

        A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.  # noqa: E501

        :return: The disable_download_progress of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._disable_download_progress

    @disable_download_progress.setter
    def disable_download_progress(self, disable_download_progress):
        """Sets the disable_download_progress of this DocuViewareControlState.

        A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.  # noqa: E501

        :param disable_download_progress: The disable_download_progress of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._disable_download_progress = disable_download_progress

    @property
    def document_alignment(self):
        """Gets the document_alignment of this DocuViewareControlState.  # noqa: E501


        :return: The document_alignment of this DocuViewareControlState.  # noqa: E501
        :rtype: DocumentAlignment
        """
        return self._document_alignment

    @document_alignment.setter
    def document_alignment(self, document_alignment):
        """Sets the document_alignment of this DocuViewareControlState.


        :param document_alignment: The document_alignment of this DocuViewareControlState.  # noqa: E501
        :type: DocumentAlignment
        """

        self._document_alignment = document_alignment

    @property
    def document_position(self):
        """Gets the document_position of this DocuViewareControlState.  # noqa: E501


        :return: The document_position of this DocuViewareControlState.  # noqa: E501
        :rtype: DocumentPosition
        """
        return self._document_position

    @document_position.setter
    def document_position(self, document_position):
        """Sets the document_position of this DocuViewareControlState.


        :param document_position: The document_position of this DocuViewareControlState.  # noqa: E501
        :type: DocumentPosition
        """

        self._document_position = document_position

    @property
    def enable_gd_picture_annotations(self):
        """Gets the enable_gd_picture_annotations of this DocuViewareControlState.  # noqa: E501

        Specifies if GdPicture/XMP annotations support is activated.  # noqa: E501

        :return: The enable_gd_picture_annotations of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_gd_picture_annotations

    @enable_gd_picture_annotations.setter
    def enable_gd_picture_annotations(self, enable_gd_picture_annotations):
        """Sets the enable_gd_picture_annotations of this DocuViewareControlState.

        Specifies if GdPicture/XMP annotations support is activated.  # noqa: E501

        :param enable_gd_picture_annotations: The enable_gd_picture_annotations of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_gd_picture_annotations = enable_gd_picture_annotations

    @property
    def disable_annotation_printing(self):
        """Gets the disable_annotation_printing of this DocuViewareControlState.  # noqa: E501

        Specifies whether printing support is disabled for annotations.  # noqa: E501

        :return: The disable_annotation_printing of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._disable_annotation_printing

    @disable_annotation_printing.setter
    def disable_annotation_printing(self, disable_annotation_printing):
        """Sets the disable_annotation_printing of this DocuViewareControlState.

        Specifies whether printing support is disabled for annotations.  # noqa: E501

        :param disable_annotation_printing: The disable_annotation_printing of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._disable_annotation_printing = disable_annotation_printing

    @property
    def enable_form_fields_edition(self):
        """Gets the enable_form_fields_edition of this DocuViewareControlState.  # noqa: E501

        Specifies whether form fields can be edited into the client browser or not.  # noqa: E501

        :return: The enable_form_fields_edition of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_form_fields_edition

    @enable_form_fields_edition.setter
    def enable_form_fields_edition(self, enable_form_fields_edition):
        """Sets the enable_form_fields_edition of this DocuViewareControlState.

        Specifies whether form fields can be edited into the client browser or not.  # noqa: E501

        :param enable_form_fields_edition: The enable_form_fields_edition of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_form_fields_edition = enable_form_fields_edition

    @property
    def annotation_editor_mode(self):
        """Gets the annotation_editor_mode of this DocuViewareControlState.  # noqa: E501

        Specifies the editor mode for the GdPicture/XMP annotation support.<br />  # noqa: E501

        :return: The annotation_editor_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._annotation_editor_mode

    @annotation_editor_mode.setter
    def annotation_editor_mode(self, annotation_editor_mode):
        """Sets the annotation_editor_mode of this DocuViewareControlState.

        Specifies the editor mode for the GdPicture/XMP annotation support.<br />  # noqa: E501

        :param annotation_editor_mode: The annotation_editor_mode of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._annotation_editor_mode = annotation_editor_mode

    @property
    def link_annotation_click_behaviour(self):
        """Gets the link_annotation_click_behaviour of this DocuViewareControlState.  # noqa: E501


        :return: The link_annotation_click_behaviour of this DocuViewareControlState.  # noqa: E501
        :rtype: LinkAnnotationClickBehaviour
        """
        return self._link_annotation_click_behaviour

    @link_annotation_click_behaviour.setter
    def link_annotation_click_behaviour(self, link_annotation_click_behaviour):
        """Sets the link_annotation_click_behaviour of this DocuViewareControlState.


        :param link_annotation_click_behaviour: The link_annotation_click_behaviour of this DocuViewareControlState.  # noqa: E501
        :type: LinkAnnotationClickBehaviour
        """

        self._link_annotation_click_behaviour = link_annotation_click_behaviour

    @property
    def zoom(self):
        """Gets the zoom of this DocuViewareControlState.  # noqa: E501

        Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...  # noqa: E501

        :return: The zoom of this DocuViewareControlState.  # noqa: E501
        :rtype: float
        """
        return self._zoom

    @zoom.setter
    def zoom(self, zoom):
        """Sets the zoom of this DocuViewareControlState.

        Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...  # noqa: E501

        :param zoom: The zoom of this DocuViewareControlState.  # noqa: E501
        :type: float
        """

        self._zoom = zoom

    @property
    def zoom_mode(self):
        """Gets the zoom_mode of this DocuViewareControlState.  # noqa: E501


        :return: The zoom_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: ViewerZoomMode
        """
        return self._zoom_mode

    @zoom_mode.setter
    def zoom_mode(self, zoom_mode):
        """Sets the zoom_mode of this DocuViewareControlState.


        :param zoom_mode: The zoom_mode of this DocuViewareControlState.  # noqa: E501
        :type: ViewerZoomMode
        """

        self._zoom_mode = zoom_mode

    @property
    def open_zoom_mode(self):
        """Gets the open_zoom_mode of this DocuViewareControlState.  # noqa: E501


        :return: The open_zoom_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: ViewerZoomMode
        """
        return self._open_zoom_mode

    @open_zoom_mode.setter
    def open_zoom_mode(self, open_zoom_mode):
        """Sets the open_zoom_mode of this DocuViewareControlState.


        :param open_zoom_mode: The open_zoom_mode of this DocuViewareControlState.  # noqa: E501
        :type: ViewerZoomMode
        """

        self._open_zoom_mode = open_zoom_mode

    @property
    def view_rotation(self):
        """Gets the view_rotation of this DocuViewareControlState.  # noqa: E501


        :return: The view_rotation of this DocuViewareControlState.  # noqa: E501
        :rtype: RotateFlip
        """
        return self._view_rotation

    @view_rotation.setter
    def view_rotation(self, view_rotation):
        """Sets the view_rotation of this DocuViewareControlState.


        :param view_rotation: The view_rotation of this DocuViewareControlState.  # noqa: E501
        :type: RotateFlip
        """

        self._view_rotation = view_rotation

    @property
    def page_rotation(self):
        """Gets the page_rotation of this DocuViewareControlState.  # noqa: E501


        :return: The page_rotation of this DocuViewareControlState.  # noqa: E501
        :rtype: RotateFlip
        """
        return self._page_rotation

    @page_rotation.setter
    def page_rotation(self, page_rotation):
        """Sets the page_rotation of this DocuViewareControlState.


        :param page_rotation: The page_rotation of this DocuViewareControlState.  # noqa: E501
        :type: RotateFlip
        """

        self._page_rotation = page_rotation

    @property
    def zoom_step(self):
        """Gets the zoom_step of this DocuViewareControlState.  # noqa: E501

        Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.  # noqa: E501

        :return: The zoom_step of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._zoom_step

    @zoom_step.setter
    def zoom_step(self, zoom_step):
        """Sets the zoom_step of this DocuViewareControlState.

        Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.  # noqa: E501

        :param zoom_step: The zoom_step of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._zoom_step = zoom_step

    @property
    def scroll_bars(self):
        """Gets the scroll_bars of this DocuViewareControlState.  # noqa: E501

        Specifies whether scrollbars can be displayed or not within the viewer.<br />  # noqa: E501

        :return: The scroll_bars of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._scroll_bars

    @scroll_bars.setter
    def scroll_bars(self, scroll_bars):
        """Sets the scroll_bars of this DocuViewareControlState.

        Specifies whether scrollbars can be displayed or not within the viewer.<br />  # noqa: E501

        :param scroll_bars: The scroll_bars of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._scroll_bars = scroll_bars

    @property
    def force_scroll_bars(self):
        """Gets the force_scroll_bars of this DocuViewareControlState.  # noqa: E501

        Specifies whether the viewer shall always show scrollbars.  # noqa: E501

        :return: The force_scroll_bars of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._force_scroll_bars

    @force_scroll_bars.setter
    def force_scroll_bars(self, force_scroll_bars):
        """Sets the force_scroll_bars of this DocuViewareControlState.

        Specifies whether the viewer shall always show scrollbars.  # noqa: E501

        :param force_scroll_bars: The force_scroll_bars of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._force_scroll_bars = force_scroll_bars

    @property
    def page_view_mode(self):
        """Gets the page_view_mode of this DocuViewareControlState.  # noqa: E501


        :return: The page_view_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: PageViewMode
        """
        return self._page_view_mode

    @page_view_mode.setter
    def page_view_mode(self, page_view_mode):
        """Sets the page_view_mode of this DocuViewareControlState.


        :param page_view_mode: The page_view_mode of this DocuViewareControlState.  # noqa: E501
        :type: PageViewMode
        """

        self._page_view_mode = page_view_mode

    @property
    def enable_text_selection(self):
        """Gets the enable_text_selection of this DocuViewareControlState.  # noqa: E501

        Specifies if text selection is permitted.  # noqa: E501

        :return: The enable_text_selection of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_text_selection

    @enable_text_selection.setter
    def enable_text_selection(self, enable_text_selection):
        """Sets the enable_text_selection of this DocuViewareControlState.

        Specifies if text selection is permitted.  # noqa: E501

        :param enable_text_selection: The enable_text_selection of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_text_selection = enable_text_selection

    @property
    def enable_text_selection_annotation(self):
        """Gets the enable_text_selection_annotation of this DocuViewareControlState.  # noqa: E501

        Specifies whether the selected text context menu options should contain annotations entries.  # noqa: E501

        :return: The enable_text_selection_annotation of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_text_selection_annotation

    @enable_text_selection_annotation.setter
    def enable_text_selection_annotation(self, enable_text_selection_annotation):
        """Sets the enable_text_selection_annotation of this DocuViewareControlState.

        Specifies whether the selected text context menu options should contain annotations entries.  # noqa: E501

        :param enable_text_selection_annotation: The enable_text_selection_annotation of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_text_selection_annotation = enable_text_selection_annotation

    @property
    def locale(self):
        """Gets the locale of this DocuViewareControlState.  # noqa: E501


        :return: The locale of this DocuViewareControlState.  # noqa: E501
        :rtype: DocuViewareLocale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this DocuViewareControlState.


        :param locale: The locale of this DocuViewareControlState.  # noqa: E501
        :type: DocuViewareLocale
        """

        self._locale = locale

    @property
    def user_languages(self):
        """Gets the user_languages of this DocuViewareControlState.  # noqa: E501

        Specifies the different languages used by the user's browser.  # noqa: E501

        :return: The user_languages of this DocuViewareControlState.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_languages

    @user_languages.setter
    def user_languages(self, user_languages):
        """Sets the user_languages of this DocuViewareControlState.

        Specifies the different languages used by the user's browser.  # noqa: E501

        :param user_languages: The user_languages of this DocuViewareControlState.  # noqa: E501
        :type: list[str]
        """

        self._user_languages = user_languages

    @property
    def control_width(self):
        """Gets the control_width of this DocuViewareControlState.  # noqa: E501

        Specifies the width of the control within its container.  # noqa: E501

        :return: The control_width of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._control_width

    @control_width.setter
    def control_width(self, control_width):
        """Sets the control_width of this DocuViewareControlState.

        Specifies the width of the control within its container.  # noqa: E501

        :param control_width: The control_width of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._control_width = control_width

    @property
    def control_height(self):
        """Gets the control_height of this DocuViewareControlState.  # noqa: E501

        Specifies, the height of the control within its container.  # noqa: E501

        :return: The control_height of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._control_height

    @control_height.setter
    def control_height(self, control_height):
        """Sets the control_height of this DocuViewareControlState.

        Specifies, the height of the control within its container.  # noqa: E501

        :param control_height: The control_height of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._control_height = control_height

    @property
    def annotation_drop_shadow(self):
        """Gets the annotation_drop_shadow of this DocuViewareControlState.  # noqa: E501

        Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.  # noqa: E501

        :return: The annotation_drop_shadow of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._annotation_drop_shadow

    @annotation_drop_shadow.setter
    def annotation_drop_shadow(self, annotation_drop_shadow):
        """Sets the annotation_drop_shadow of this DocuViewareControlState.

        Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.  # noqa: E501

        :param annotation_drop_shadow: The annotation_drop_shadow of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._annotation_drop_shadow = annotation_drop_shadow

    @property
    def allow_print(self):
        """Gets the allow_print of this DocuViewareControlState.  # noqa: E501

        Specifies whether printing is allowed.  # noqa: E501

        :return: The allow_print of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._allow_print

    @allow_print.setter
    def allow_print(self, allow_print):
        """Sets the allow_print of this DocuViewareControlState.

        Specifies whether printing is allowed.  # noqa: E501

        :param allow_print: The allow_print of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._allow_print = allow_print

    @property
    def allow_upload(self):
        """Gets the allow_upload of this DocuViewareControlState.  # noqa: E501

        Specifies whether file upload is allowed.  # noqa: E501

        :return: The allow_upload of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._allow_upload

    @allow_upload.setter
    def allow_upload(self, allow_upload):
        """Sets the allow_upload of this DocuViewareControlState.

        Specifies whether file upload is allowed.  # noqa: E501

        :param allow_upload: The allow_upload of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._allow_upload = allow_upload

    @property
    def enable_multiple_thumbnail_selection(self):
        """Gets the enable_multiple_thumbnail_selection of this DocuViewareControlState.  # noqa: E501

        Specifies whether multiple thumbnails selection is allowed.  # noqa: E501

        :return: The enable_multiple_thumbnail_selection of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_multiple_thumbnail_selection

    @enable_multiple_thumbnail_selection.setter
    def enable_multiple_thumbnail_selection(self, enable_multiple_thumbnail_selection):
        """Sets the enable_multiple_thumbnail_selection of this DocuViewareControlState.

        Specifies whether multiple thumbnails selection is allowed.  # noqa: E501

        :param enable_multiple_thumbnail_selection: The enable_multiple_thumbnail_selection of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_multiple_thumbnail_selection = enable_multiple_thumbnail_selection

    @property
    def enable_thumbnail_drag_drop(self):
        """Gets the enable_thumbnail_drag_drop of this DocuViewareControlState.  # noqa: E501

        Specifies whether the thumbnails can be moved by drag and drop.  # noqa: E501

        :return: The enable_thumbnail_drag_drop of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_thumbnail_drag_drop

    @enable_thumbnail_drag_drop.setter
    def enable_thumbnail_drag_drop(self, enable_thumbnail_drag_drop):
        """Sets the enable_thumbnail_drag_drop of this DocuViewareControlState.

        Specifies whether the thumbnails can be moved by drag and drop.  # noqa: E501

        :param enable_thumbnail_drag_drop: The enable_thumbnail_drag_drop of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_thumbnail_drag_drop = enable_thumbnail_drag_drop

    @property
    def enable_file_upload_button(self):
        """Gets the enable_file_upload_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the open button shall be enabled.  # noqa: E501

        :return: The enable_file_upload_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_file_upload_button

    @enable_file_upload_button.setter
    def enable_file_upload_button(self, enable_file_upload_button):
        """Sets the enable_file_upload_button of this DocuViewareControlState.

        Specifies whether the open button shall be enabled.  # noqa: E501

        :param enable_file_upload_button: The enable_file_upload_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_file_upload_button = enable_file_upload_button

    @property
    def enable_load_from_uri_button(self):
        """Gets the enable_load_from_uri_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the 'open from uri' button shall be enabled.  # noqa: E501

        :return: The enable_load_from_uri_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_load_from_uri_button

    @enable_load_from_uri_button.setter
    def enable_load_from_uri_button(self, enable_load_from_uri_button):
        """Sets the enable_load_from_uri_button of this DocuViewareControlState.

        Specifies whether the 'open from uri' button shall be enabled.  # noqa: E501

        :param enable_load_from_uri_button: The enable_load_from_uri_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_load_from_uri_button = enable_load_from_uri_button

    @property
    def enable_save_button(self):
        """Gets the enable_save_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the save button shall be enabled.  # noqa: E501

        :return: The enable_save_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_save_button

    @enable_save_button.setter
    def enable_save_button(self, enable_save_button):
        """Sets the enable_save_button of this DocuViewareControlState.

        Specifies whether the save button shall be enabled.  # noqa: E501

        :param enable_save_button: The enable_save_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_save_button = enable_save_button

    @property
    def enable_pages_navigation_buttons(self):
        """Gets the enable_pages_navigation_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the save button shall be enabled.  # noqa: E501

        :return: The enable_pages_navigation_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_pages_navigation_buttons

    @enable_pages_navigation_buttons.setter
    def enable_pages_navigation_buttons(self, enable_pages_navigation_buttons):
        """Sets the enable_pages_navigation_buttons of this DocuViewareControlState.

        Specifies whether the save button shall be enabled.  # noqa: E501

        :param enable_pages_navigation_buttons: The enable_pages_navigation_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_pages_navigation_buttons = enable_pages_navigation_buttons

    @property
    def enable_print_button(self):
        """Gets the enable_print_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the print button shall be enabled.  # noqa: E501

        :return: The enable_print_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_print_button

    @enable_print_button.setter
    def enable_print_button(self, enable_print_button):
        """Sets the enable_print_button of this DocuViewareControlState.

        Specifies whether the print button shall be enabled.  # noqa: E501

        :param enable_print_button: The enable_print_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_print_button = enable_print_button

    @property
    def enable_print_to_pdf(self):
        """Gets the enable_print_to_pdf of this DocuViewareControlState.  # noqa: E501

        Specifies whether the print to pdf option shall be enabled.  # noqa: E501

        :return: The enable_print_to_pdf of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_print_to_pdf

    @enable_print_to_pdf.setter
    def enable_print_to_pdf(self, enable_print_to_pdf):
        """Sets the enable_print_to_pdf of this DocuViewareControlState.

        Specifies whether the print to pdf option shall be enabled.  # noqa: E501

        :param enable_print_to_pdf: The enable_print_to_pdf of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_print_to_pdf = enable_print_to_pdf

    @property
    def enable_fit_width_button(self):
        """Gets the enable_fit_width_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the fit width button shall be enabled.  # noqa: E501

        :return: The enable_fit_width_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_fit_width_button

    @enable_fit_width_button.setter
    def enable_fit_width_button(self, enable_fit_width_button):
        """Sets the enable_fit_width_button of this DocuViewareControlState.

        Specifies whether the fit width button shall be enabled.  # noqa: E501

        :param enable_fit_width_button: The enable_fit_width_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_fit_width_button = enable_fit_width_button

    @property
    def enable_zoom100_button(self):
        """Gets the enable_zoom100_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the fit original size button shall be enabled.  # noqa: E501

        :return: The enable_zoom100_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_zoom100_button

    @enable_zoom100_button.setter
    def enable_zoom100_button(self, enable_zoom100_button):
        """Sets the enable_zoom100_button of this DocuViewareControlState.

        Specifies whether the fit original size button shall be enabled.  # noqa: E501

        :param enable_zoom100_button: The enable_zoom100_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_zoom100_button = enable_zoom100_button

    @property
    def enable_mouse_mode_buttons(self):
        """Gets the enable_mouse_mode_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the mouse mode button group shall be enabled.  # noqa: E501

        :return: The enable_mouse_mode_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mouse_mode_buttons

    @enable_mouse_mode_buttons.setter
    def enable_mouse_mode_buttons(self, enable_mouse_mode_buttons):
        """Sets the enable_mouse_mode_buttons of this DocuViewareControlState.

        Specifies whether the mouse mode button group shall be enabled.  # noqa: E501

        :param enable_mouse_mode_buttons: The enable_mouse_mode_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_mouse_mode_buttons = enable_mouse_mode_buttons

    @property
    def enable_pan_mode_button(self):
        """Gets the enable_pan_mode_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the pan mode button shall be enabled.  # noqa: E501

        :return: The enable_pan_mode_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_pan_mode_button

    @enable_pan_mode_button.setter
    def enable_pan_mode_button(self, enable_pan_mode_button):
        """Sets the enable_pan_mode_button of this DocuViewareControlState.

        Specifies whether the pan mode button shall be enabled.  # noqa: E501

        :param enable_pan_mode_button: The enable_pan_mode_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_pan_mode_button = enable_pan_mode_button

    @property
    def enable_select_mode_button(self):
        """Gets the enable_select_mode_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the select mode button shall be enabled.  # noqa: E501

        :return: The enable_select_mode_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_select_mode_button

    @enable_select_mode_button.setter
    def enable_select_mode_button(self, enable_select_mode_button):
        """Sets the enable_select_mode_button of this DocuViewareControlState.

        Specifies whether the select mode button shall be enabled.  # noqa: E501

        :param enable_select_mode_button: The enable_select_mode_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_select_mode_button = enable_select_mode_button

    @property
    def enable_marquee_zoom_mode_button(self):
        """Gets the enable_marquee_zoom_mode_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the marquee zoom mode button shall be enabled.  # noqa: E501

        :return: The enable_marquee_zoom_mode_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_marquee_zoom_mode_button

    @enable_marquee_zoom_mode_button.setter
    def enable_marquee_zoom_mode_button(self, enable_marquee_zoom_mode_button):
        """Sets the enable_marquee_zoom_mode_button of this DocuViewareControlState.

        Specifies whether the marquee zoom mode button shall be enabled.  # noqa: E501

        :param enable_marquee_zoom_mode_button: The enable_marquee_zoom_mode_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_marquee_zoom_mode_button = enable_marquee_zoom_mode_button

    @property
    def enable_full_screen_button(self):
        """Gets the enable_full_screen_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the fullscreen button shall be enabled.  # noqa: E501

        :return: The enable_full_screen_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_full_screen_button

    @enable_full_screen_button.setter
    def enable_full_screen_button(self, enable_full_screen_button):
        """Sets the enable_full_screen_button of this DocuViewareControlState.

        Specifies whether the fullscreen button shall be enabled.  # noqa: E501

        :param enable_full_screen_button: The enable_full_screen_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_full_screen_button = enable_full_screen_button

    @property
    def enable_fit_page_button(self):
        """Gets the enable_fit_page_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the 'Fit Page' button shall be enabled.  # noqa: E501

        :return: The enable_fit_page_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_fit_page_button

    @enable_fit_page_button.setter
    def enable_fit_page_button(self, enable_fit_page_button):
        """Sets the enable_fit_page_button of this DocuViewareControlState.

        Specifies whether the 'Fit Page' button shall be enabled.  # noqa: E501

        :param enable_fit_page_button: The enable_fit_page_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_fit_page_button = enable_fit_page_button

    @property
    def enable_zoom_buttons(self):
        """Gets the enable_zoom_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the zoom button group shall be enabled.  # noqa: E501

        :return: The enable_zoom_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_zoom_buttons

    @enable_zoom_buttons.setter
    def enable_zoom_buttons(self, enable_zoom_buttons):
        """Sets the enable_zoom_buttons of this DocuViewareControlState.

        Specifies whether the zoom button group shall be enabled.  # noqa: E501

        :param enable_zoom_buttons: The enable_zoom_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_zoom_buttons = enable_zoom_buttons

    @property
    def enable_page_view_buttons(self):
        """Gets the enable_page_view_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the page view mode button shall be enabled.  # noqa: E501

        :return: The enable_page_view_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_page_view_buttons

    @enable_page_view_buttons.setter
    def enable_page_view_buttons(self, enable_page_view_buttons):
        """Sets the enable_page_view_buttons of this DocuViewareControlState.

        Specifies whether the page view mode button shall be enabled.  # noqa: E501

        :param enable_page_view_buttons: The enable_page_view_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_page_view_buttons = enable_page_view_buttons

    @property
    def rotate_buttons_mode(self):
        """Gets the rotate_buttons_mode of this DocuViewareControlState.  # noqa: E501


        :return: The rotate_buttons_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: RotateMode
        """
        return self._rotate_buttons_mode

    @rotate_buttons_mode.setter
    def rotate_buttons_mode(self, rotate_buttons_mode):
        """Sets the rotate_buttons_mode of this DocuViewareControlState.


        :param rotate_buttons_mode: The rotate_buttons_mode of this DocuViewareControlState.  # noqa: E501
        :type: RotateMode
        """

        self._rotate_buttons_mode = rotate_buttons_mode

    @property
    def enable_rotate_buttons(self):
        """Gets the enable_rotate_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the rotation button group shall be enabled.  # noqa: E501

        :return: The enable_rotate_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rotate_buttons

    @enable_rotate_buttons.setter
    def enable_rotate_buttons(self, enable_rotate_buttons):
        """Sets the enable_rotate_buttons of this DocuViewareControlState.

        Specifies whether the rotation button group shall be enabled.  # noqa: E501

        :param enable_rotate_buttons: The enable_rotate_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_rotate_buttons = enable_rotate_buttons

    @property
    def enable_annotation_action_buttons(self):
        """Gets the enable_annotation_action_buttons of this DocuViewareControlState.  # noqa: E501

        Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_annotation_action_buttons of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_annotation_action_buttons

    @enable_annotation_action_buttons.setter
    def enable_annotation_action_buttons(self, enable_annotation_action_buttons):
        """Sets the enable_annotation_action_buttons of this DocuViewareControlState.

        Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_annotation_action_buttons: The enable_annotation_action_buttons of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_annotation_action_buttons = enable_annotation_action_buttons

    @property
    def enable_selected_text_annotation_edition(self):
        """Gets the enable_selected_text_annotation_edition of this DocuViewareControlState.  # noqa: E501

        Specifies whether the selected text annotations shall be editable.  # noqa: E501

        :return: The enable_selected_text_annotation_edition of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_selected_text_annotation_edition

    @enable_selected_text_annotation_edition.setter
    def enable_selected_text_annotation_edition(self, enable_selected_text_annotation_edition):
        """Sets the enable_selected_text_annotation_edition of this DocuViewareControlState.

        Specifies whether the selected text annotations shall be editable.  # noqa: E501

        :param enable_selected_text_annotation_edition: The enable_selected_text_annotation_edition of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_selected_text_annotation_edition = enable_selected_text_annotation_edition

    @property
    def enable_rectangle_highlighter_annotation_button(self):
        """Gets the enable_rectangle_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_rectangle_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rectangle_highlighter_annotation_button

    @enable_rectangle_highlighter_annotation_button.setter
    def enable_rectangle_highlighter_annotation_button(self, enable_rectangle_highlighter_annotation_button):
        """Sets the enable_rectangle_highlighter_annotation_button of this DocuViewareControlState.

        Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_rectangle_highlighter_annotation_button: The enable_rectangle_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_rectangle_highlighter_annotation_button = enable_rectangle_highlighter_annotation_button

    @property
    def enable_freehand_highlighter_annotation_button(self):
        """Gets the enable_freehand_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_freehand_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_freehand_highlighter_annotation_button

    @enable_freehand_highlighter_annotation_button.setter
    def enable_freehand_highlighter_annotation_button(self, enable_freehand_highlighter_annotation_button):
        """Sets the enable_freehand_highlighter_annotation_button of this DocuViewareControlState.

        Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_freehand_highlighter_annotation_button: The enable_freehand_highlighter_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_freehand_highlighter_annotation_button = enable_freehand_highlighter_annotation_button

    @property
    def enable_rubber_stamp_annotation_button(self):
        """Gets the enable_rubber_stamp_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_rubber_stamp_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rubber_stamp_annotation_button

    @enable_rubber_stamp_annotation_button.setter
    def enable_rubber_stamp_annotation_button(self, enable_rubber_stamp_annotation_button):
        """Sets the enable_rubber_stamp_annotation_button of this DocuViewareControlState.

        Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_rubber_stamp_annotation_button: The enable_rubber_stamp_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_rubber_stamp_annotation_button = enable_rubber_stamp_annotation_button

    @property
    def enable_rectangle_annotation_button(self):
        """Gets the enable_rectangle_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_rectangle_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rectangle_annotation_button

    @enable_rectangle_annotation_button.setter
    def enable_rectangle_annotation_button(self, enable_rectangle_annotation_button):
        """Sets the enable_rectangle_annotation_button of this DocuViewareControlState.

        Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_rectangle_annotation_button: The enable_rectangle_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_rectangle_annotation_button = enable_rectangle_annotation_button

    @property
    def enable_ellipse_annotation_button(self):
        """Gets the enable_ellipse_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_ellipse_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ellipse_annotation_button

    @enable_ellipse_annotation_button.setter
    def enable_ellipse_annotation_button(self, enable_ellipse_annotation_button):
        """Sets the enable_ellipse_annotation_button of this DocuViewareControlState.

        Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_ellipse_annotation_button: The enable_ellipse_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_ellipse_annotation_button = enable_ellipse_annotation_button

    @property
    def enable_line_annotation_button(self):
        """Gets the enable_line_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_line_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_line_annotation_button

    @enable_line_annotation_button.setter
    def enable_line_annotation_button(self, enable_line_annotation_button):
        """Sets the enable_line_annotation_button of this DocuViewareControlState.

        Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_line_annotation_button: The enable_line_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_line_annotation_button = enable_line_annotation_button

    @property
    def enable_connected_line_annotation_button(self):
        """Gets the enable_connected_line_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_connected_line_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_connected_line_annotation_button

    @enable_connected_line_annotation_button.setter
    def enable_connected_line_annotation_button(self, enable_connected_line_annotation_button):
        """Sets the enable_connected_line_annotation_button of this DocuViewareControlState.

        Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_connected_line_annotation_button: The enable_connected_line_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_connected_line_annotation_button = enable_connected_line_annotation_button

    @property
    def enable_freehand_annotation_button(self):
        """Gets the enable_freehand_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_freehand_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_freehand_annotation_button

    @enable_freehand_annotation_button.setter
    def enable_freehand_annotation_button(self, enable_freehand_annotation_button):
        """Sets the enable_freehand_annotation_button of this DocuViewareControlState.

        Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_freehand_annotation_button: The enable_freehand_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_freehand_annotation_button = enable_freehand_annotation_button

    @property
    def enable_line_arrow_annotation_button(self):
        """Gets the enable_line_arrow_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_line_arrow_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_line_arrow_annotation_button

    @enable_line_arrow_annotation_button.setter
    def enable_line_arrow_annotation_button(self, enable_line_arrow_annotation_button):
        """Sets the enable_line_arrow_annotation_button of this DocuViewareControlState.

        Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_line_arrow_annotation_button: The enable_line_arrow_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_line_arrow_annotation_button = enable_line_arrow_annotation_button

    @property
    def enable_link_annotation_button(self):
        """Gets the enable_link_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_link_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_link_annotation_button

    @enable_link_annotation_button.setter
    def enable_link_annotation_button(self, enable_link_annotation_button):
        """Sets the enable_link_annotation_button of this DocuViewareControlState.

        Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_link_annotation_button: The enable_link_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_link_annotation_button = enable_link_annotation_button

    @property
    def enable_ruler_annotation_button(self):
        """Gets the enable_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ruler_annotation_button

    @enable_ruler_annotation_button.setter
    def enable_ruler_annotation_button(self, enable_ruler_annotation_button):
        """Sets the enable_ruler_annotation_button of this DocuViewareControlState.

        Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_ruler_annotation_button: The enable_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_ruler_annotation_button = enable_ruler_annotation_button

    @property
    def enable_poly_ruler_annotation_button(self):
        """Gets the enable_poly_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501


        :return: The enable_poly_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_poly_ruler_annotation_button

    @enable_poly_ruler_annotation_button.setter
    def enable_poly_ruler_annotation_button(self, enable_poly_ruler_annotation_button):
        """Sets the enable_poly_ruler_annotation_button of this DocuViewareControlState.


        :param enable_poly_ruler_annotation_button: The enable_poly_ruler_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_poly_ruler_annotation_button = enable_poly_ruler_annotation_button

    @property
    def enable_text_annotation_button(self):
        """Gets the enable_text_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_text_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_text_annotation_button

    @enable_text_annotation_button.setter
    def enable_text_annotation_button(self, enable_text_annotation_button):
        """Sets the enable_text_annotation_button of this DocuViewareControlState.

        Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_text_annotation_button: The enable_text_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_text_annotation_button = enable_text_annotation_button

    @property
    def enable_sticky_note_annotation_button(self):
        """Gets the enable_sticky_note_annotation_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The enable_sticky_note_annotation_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_sticky_note_annotation_button

    @enable_sticky_note_annotation_button.setter
    def enable_sticky_note_annotation_button(self, enable_sticky_note_annotation_button):
        """Sets the enable_sticky_note_annotation_button of this DocuViewareControlState.

        Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param enable_sticky_note_annotation_button: The enable_sticky_note_annotation_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_sticky_note_annotation_button = enable_sticky_note_annotation_button

    @property
    def enable_twain_acquisition_button(self):
        """Gets the enable_twain_acquisition_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the TWAIN acquisition button shall be enabled.  # noqa: E501

        :return: The enable_twain_acquisition_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_twain_acquisition_button

    @enable_twain_acquisition_button.setter
    def enable_twain_acquisition_button(self, enable_twain_acquisition_button):
        """Sets the enable_twain_acquisition_button of this DocuViewareControlState.

        Specifies whether the TWAIN acquisition button shall be enabled.  # noqa: E501

        :param enable_twain_acquisition_button: The enable_twain_acquisition_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_twain_acquisition_button = enable_twain_acquisition_button

    @property
    def twain_source_enable_custom_configuration(self):
        """Gets the twain_source_enable_custom_configuration of this DocuViewareControlState.  # noqa: E501

        Enables the custom configuration support for the TWAIN source.  # noqa: E501

        :return: The twain_source_enable_custom_configuration of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._twain_source_enable_custom_configuration

    @twain_source_enable_custom_configuration.setter
    def twain_source_enable_custom_configuration(self, twain_source_enable_custom_configuration):
        """Sets the twain_source_enable_custom_configuration of this DocuViewareControlState.

        Enables the custom configuration support for the TWAIN source.  # noqa: E501

        :param twain_source_enable_custom_configuration: The twain_source_enable_custom_configuration of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._twain_source_enable_custom_configuration = twain_source_enable_custom_configuration

    @property
    def twain_source_select_feeder(self):
        """Gets the twain_source_select_feeder of this DocuViewareControlState.  # noqa: E501

        Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :return: The twain_source_select_feeder of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._twain_source_select_feeder

    @twain_source_select_feeder.setter
    def twain_source_select_feeder(self, twain_source_select_feeder):
        """Sets the twain_source_select_feeder of this DocuViewareControlState.

        Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :param twain_source_select_feeder: The twain_source_select_feeder of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._twain_source_select_feeder = twain_source_select_feeder

    @property
    def twain_source_bit_depth(self):
        """Gets the twain_source_bit_depth of this DocuViewareControlState.  # noqa: E501

        Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :return: The twain_source_bit_depth of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._twain_source_bit_depth

    @twain_source_bit_depth.setter
    def twain_source_bit_depth(self, twain_source_bit_depth):
        """Sets the twain_source_bit_depth of this DocuViewareControlState.

        Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :param twain_source_bit_depth: The twain_source_bit_depth of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._twain_source_bit_depth = twain_source_bit_depth

    @property
    def twain_source_resolution(self):
        """Gets the twain_source_resolution of this DocuViewareControlState.  # noqa: E501

        Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :return: The twain_source_resolution of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._twain_source_resolution

    @twain_source_resolution.setter
    def twain_source_resolution(self, twain_source_resolution):
        """Sets the twain_source_resolution of this DocuViewareControlState.

        Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :param twain_source_resolution: The twain_source_resolution of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._twain_source_resolution = twain_source_resolution

    @property
    def twain_source_enable_duplex(self):
        """Gets the twain_source_enable_duplex of this DocuViewareControlState.  # noqa: E501

        Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :return: The twain_source_enable_duplex of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._twain_source_enable_duplex

    @twain_source_enable_duplex.setter
    def twain_source_enable_duplex(self, twain_source_enable_duplex):
        """Sets the twain_source_enable_duplex of this DocuViewareControlState.

        Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :param twain_source_enable_duplex: The twain_source_enable_duplex of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._twain_source_enable_duplex = twain_source_enable_duplex

    @property
    def twain_source_hide_ui(self):
        """Gets the twain_source_hide_ui of this DocuViewareControlState.  # noqa: E501

        Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :return: The twain_source_hide_ui of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._twain_source_hide_ui

    @twain_source_hide_ui.setter
    def twain_source_hide_ui(self, twain_source_hide_ui):
        """Sets the twain_source_hide_ui of this DocuViewareControlState.

        Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.  # noqa: E501

        :param twain_source_hide_ui: The twain_source_hide_ui of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._twain_source_hide_ui = twain_source_hide_ui

    @property
    def free_hand_continuous_drawing_mode(self):
        """Gets the free_hand_continuous_drawing_mode of this DocuViewareControlState.  # noqa: E501

        Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The free_hand_continuous_drawing_mode of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._free_hand_continuous_drawing_mode

    @free_hand_continuous_drawing_mode.setter
    def free_hand_continuous_drawing_mode(self, free_hand_continuous_drawing_mode):
        """Sets the free_hand_continuous_drawing_mode of this DocuViewareControlState.

        Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param free_hand_continuous_drawing_mode: The free_hand_continuous_drawing_mode of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._free_hand_continuous_drawing_mode = free_hand_continuous_drawing_mode

    @property
    def show_text_search_snap_in(self):
        """Gets the show_text_search_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the text search SnapIn is enabled.  # noqa: E501

        :return: The show_text_search_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_text_search_snap_in

    @show_text_search_snap_in.setter
    def show_text_search_snap_in(self, show_text_search_snap_in):
        """Sets the show_text_search_snap_in of this DocuViewareControlState.

        Specifies whether the text search SnapIn is enabled.  # noqa: E501

        :param show_text_search_snap_in: The show_text_search_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_text_search_snap_in = show_text_search_snap_in

    @property
    def show_thumbnails_snap_in(self):
        """Gets the show_thumbnails_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Thumbnails SnapIn is enabled.  # noqa: E501

        :return: The show_thumbnails_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_thumbnails_snap_in

    @show_thumbnails_snap_in.setter
    def show_thumbnails_snap_in(self, show_thumbnails_snap_in):
        """Sets the show_thumbnails_snap_in of this DocuViewareControlState.

        Specifies whether the Thumbnails SnapIn is enabled.  # noqa: E501

        :param show_thumbnails_snap_in: The show_thumbnails_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_thumbnails_snap_in = show_thumbnails_snap_in

    @property
    def show_bookmarks_snap_in(self):
        """Gets the show_bookmarks_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Bookmarks SnapIn is enabled.  # noqa: E501

        :return: The show_bookmarks_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_bookmarks_snap_in

    @show_bookmarks_snap_in.setter
    def show_bookmarks_snap_in(self, show_bookmarks_snap_in):
        """Sets the show_bookmarks_snap_in of this DocuViewareControlState.

        Specifies whether the Bookmarks SnapIn is enabled.  # noqa: E501

        :param show_bookmarks_snap_in: The show_bookmarks_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_bookmarks_snap_in = show_bookmarks_snap_in

    @property
    def show_annotations_snap_in(self):
        """Gets the show_annotations_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the annotations SnapIn is enabled.  # noqa: E501

        :return: The show_annotations_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_annotations_snap_in

    @show_annotations_snap_in.setter
    def show_annotations_snap_in(self, show_annotations_snap_in):
        """Sets the show_annotations_snap_in of this DocuViewareControlState.

        Specifies whether the annotations SnapIn is enabled.  # noqa: E501

        :param show_annotations_snap_in: The show_annotations_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_annotations_snap_in = show_annotations_snap_in

    @property
    def show_annotations_comments_snap_in(self):
        """Gets the show_annotations_comments_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Annotations Comments SnapIn is enabled.  # noqa: E501

        :return: The show_annotations_comments_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_annotations_comments_snap_in

    @show_annotations_comments_snap_in.setter
    def show_annotations_comments_snap_in(self, show_annotations_comments_snap_in):
        """Sets the show_annotations_comments_snap_in of this DocuViewareControlState.

        Specifies whether the Annotations Comments SnapIn is enabled.  # noqa: E501

        :param show_annotations_comments_snap_in: The show_annotations_comments_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_annotations_comments_snap_in = show_annotations_comments_snap_in

    @property
    def show_redaction_snap_in(self):
        """Gets the show_redaction_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>  # noqa: E501

        :return: The show_redaction_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_redaction_snap_in

    @show_redaction_snap_in.setter
    def show_redaction_snap_in(self, show_redaction_snap_in):
        """Sets the show_redaction_snap_in of this DocuViewareControlState.

        Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>  # noqa: E501

        :param show_redaction_snap_in: The show_redaction_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_redaction_snap_in = show_redaction_snap_in

    @property
    def show_digital_signature_snap_in(self):
        """Gets the show_digital_signature_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>  # noqa: E501

        :return: The show_digital_signature_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_digital_signature_snap_in

    @show_digital_signature_snap_in.setter
    def show_digital_signature_snap_in(self, show_digital_signature_snap_in):
        """Sets the show_digital_signature_snap_in of this DocuViewareControlState.

        Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>  # noqa: E501

        :param show_digital_signature_snap_in: The show_digital_signature_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_digital_signature_snap_in = show_digital_signature_snap_in

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this DocuViewareControlState.  # noqa: E501

        The width, in pixels, of each thumbnail.  # noqa: E501

        :return: The thumbnail_width of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this DocuViewareControlState.

        The width, in pixels, of each thumbnail.  # noqa: E501

        :param thumbnail_width: The thumbnail_width of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this DocuViewareControlState.  # noqa: E501

        The height, in pixels, of each thumbnail.  # noqa: E501

        :return: The thumbnail_height of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this DocuViewareControlState.

        The height, in pixels, of each thumbnail.  # noqa: E501

        :param thumbnail_height: The thumbnail_height of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def snap_in_panel_default_width(self):
        """Gets the snap_in_panel_default_width of this DocuViewareControlState.  # noqa: E501

        Specifies the Snap-in panel default width.  # noqa: E501

        :return: The snap_in_panel_default_width of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._snap_in_panel_default_width

    @snap_in_panel_default_width.setter
    def snap_in_panel_default_width(self, snap_in_panel_default_width):
        """Sets the snap_in_panel_default_width of this DocuViewareControlState.

        Specifies the Snap-in panel default width.  # noqa: E501

        :param snap_in_panel_default_width: The snap_in_panel_default_width of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._snap_in_panel_default_width = snap_in_panel_default_width

    @property
    def collapsed_snap_in(self):
        """Gets the collapsed_snap_in of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Snap-in panel is collapsed or not.  # noqa: E501

        :return: The collapsed_snap_in of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed_snap_in

    @collapsed_snap_in.setter
    def collapsed_snap_in(self, collapsed_snap_in):
        """Sets the collapsed_snap_in of this DocuViewareControlState.

        Specifies whether the Snap-in panel is collapsed or not.  # noqa: E501

        :param collapsed_snap_in: The collapsed_snap_in of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._collapsed_snap_in = collapsed_snap_in

    @property
    def collapse_snapin_on_document_closed(self):
        """Gets the collapse_snapin_on_document_closed of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.  # noqa: E501

        :return: The collapse_snapin_on_document_closed of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._collapse_snapin_on_document_closed

    @collapse_snapin_on_document_closed.setter
    def collapse_snapin_on_document_closed(self, collapse_snapin_on_document_closed):
        """Sets the collapse_snapin_on_document_closed of this DocuViewareControlState.

        Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.  # noqa: E501

        :param collapse_snapin_on_document_closed: The collapse_snapin_on_document_closed of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._collapse_snapin_on_document_closed = collapse_snapin_on_document_closed

    @property
    def show_snap_in_collapse_button(self):
        """Gets the show_snap_in_collapse_button of this DocuViewareControlState.  # noqa: E501

        Specifies whether the button that collapses the Snap-in panel is displayed or not.  # noqa: E501

        :return: The show_snap_in_collapse_button of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_snap_in_collapse_button

    @show_snap_in_collapse_button.setter
    def show_snap_in_collapse_button(self, show_snap_in_collapse_button):
        """Sets the show_snap_in_collapse_button of this DocuViewareControlState.

        Specifies whether the button that collapses the Snap-in panel is displayed or not.  # noqa: E501

        :param show_snap_in_collapse_button: The show_snap_in_collapse_button of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_snap_in_collapse_button = show_snap_in_collapse_button

    @property
    def show_snap_in_panel_header(self):
        """Gets the show_snap_in_panel_header of this DocuViewareControlState.  # noqa: E501

        Specifies whether the header of the Snap-in panel is displayed or not.  # noqa: E501

        :return: The show_snap_in_panel_header of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_snap_in_panel_header

    @show_snap_in_panel_header.setter
    def show_snap_in_panel_header(self, show_snap_in_panel_header):
        """Sets the show_snap_in_panel_header of this DocuViewareControlState.

        Specifies whether the header of the Snap-in panel is displayed or not.  # noqa: E501

        :param show_snap_in_panel_header: The show_snap_in_panel_header of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_snap_in_panel_header = show_snap_in_panel_header

    @property
    def show_snap_in_button_strip(self):
        """Gets the show_snap_in_button_strip of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Snap-in button strip is displayed or not.  # noqa: E501

        :return: The show_snap_in_button_strip of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_snap_in_button_strip

    @show_snap_in_button_strip.setter
    def show_snap_in_button_strip(self, show_snap_in_button_strip):
        """Sets the show_snap_in_button_strip of this DocuViewareControlState.

        Specifies whether the Snap-in button strip is displayed or not.  # noqa: E501

        :param show_snap_in_button_strip: The show_snap_in_button_strip of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_snap_in_button_strip = show_snap_in_button_strip

    @property
    def show_toolbar(self):
        """Gets the show_toolbar of this DocuViewareControlState.  # noqa: E501

        Specifies whether the Toolbars are visible or not.  # noqa: E501

        :return: The show_toolbar of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._show_toolbar

    @show_toolbar.setter
    def show_toolbar(self, show_toolbar):
        """Sets the show_toolbar of this DocuViewareControlState.

        Specifies whether the Toolbars are visible or not.  # noqa: E501

        :param show_toolbar: The show_toolbar of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._show_toolbar = show_toolbar

    @property
    def toolbar_style(self):
        """Gets the toolbar_style of this DocuViewareControlState.  # noqa: E501


        :return: The toolbar_style of this DocuViewareControlState.  # noqa: E501
        :rtype: ToolbarStyle
        """
        return self._toolbar_style

    @toolbar_style.setter
    def toolbar_style(self, toolbar_style):
        """Sets the toolbar_style of this DocuViewareControlState.


        :param toolbar_style: The toolbar_style of this DocuViewareControlState.  # noqa: E501
        :type: ToolbarStyle
        """

        self._toolbar_style = toolbar_style

    @property
    def toolbar_buttons_spacing(self):
        """Gets the toolbar_buttons_spacing of this DocuViewareControlState.  # noqa: E501

        The space, in pixels, between each button of the toolbar.  # noqa: E501

        :return: The toolbar_buttons_spacing of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._toolbar_buttons_spacing

    @toolbar_buttons_spacing.setter
    def toolbar_buttons_spacing(self, toolbar_buttons_spacing):
        """Sets the toolbar_buttons_spacing of this DocuViewareControlState.

        The space, in pixels, between each button of the toolbar.  # noqa: E501

        :param toolbar_buttons_spacing: The toolbar_buttons_spacing of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._toolbar_buttons_spacing = toolbar_buttons_spacing

    @property
    def toolbar_height(self):
        """Gets the toolbar_height of this DocuViewareControlState.  # noqa: E501

        The height, in pixels, of the toolbar.  # noqa: E501

        :return: The toolbar_height of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._toolbar_height

    @toolbar_height.setter
    def toolbar_height(self, toolbar_height):
        """Sets the toolbar_height of this DocuViewareControlState.

        The height, in pixels, of the toolbar.  # noqa: E501

        :param toolbar_height: The toolbar_height of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._toolbar_height = toolbar_height

    @property
    def stroke_color(self):
        """Gets the stroke_color of this DocuViewareControlState.  # noqa: E501

        Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.  # noqa: E501

        :return: The stroke_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._stroke_color

    @stroke_color.setter
    def stroke_color(self, stroke_color):
        """Sets the stroke_color of this DocuViewareControlState.

        Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.  # noqa: E501

        :param stroke_color: The stroke_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._stroke_color = stroke_color

    @property
    def misc_border_color(self):
        """Gets the misc_border_color of this DocuViewareControlState.  # noqa: E501

        Specifies the color used to define dropdowns borders, buttons separators, line separators.  # noqa: E501

        :return: The misc_border_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._misc_border_color

    @misc_border_color.setter
    def misc_border_color(self, misc_border_color):
        """Sets the misc_border_color of this DocuViewareControlState.

        Specifies the color used to define dropdowns borders, buttons separators, line separators.  # noqa: E501

        :param misc_border_color: The misc_border_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._misc_border_color = misc_border_color

    @property
    def header_color(self):
        """Gets the header_color of this DocuViewareControlState.  # noqa: E501

        Specifies the color used in both dialogs and snap-ins headers.  # noqa: E501

        :return: The header_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._header_color

    @header_color.setter
    def header_color(self, header_color):
        """Sets the header_color of this DocuViewareControlState.

        Specifies the color used in both dialogs and snap-ins headers.  # noqa: E501

        :param header_color: The header_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._header_color = header_color

    @property
    def panel_back_color(self):
        """Gets the panel_back_color of this DocuViewareControlState.  # noqa: E501

        Specifies the color used in both dialogs and snap-ins body background.  # noqa: E501

        :return: The panel_back_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._panel_back_color

    @panel_back_color.setter
    def panel_back_color(self, panel_back_color):
        """Sets the panel_back_color of this DocuViewareControlState.

        Specifies the color used in both dialogs and snap-ins body background.  # noqa: E501

        :param panel_back_color: The panel_back_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._panel_back_color = panel_back_color

    @property
    def viewer_back_color(self):
        """Gets the viewer_back_color of this DocuViewareControlState.  # noqa: E501

        Specifies the viewer area background color.  # noqa: E501

        :return: The viewer_back_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._viewer_back_color

    @viewer_back_color.setter
    def viewer_back_color(self, viewer_back_color):
        """Sets the viewer_back_color of this DocuViewareControlState.

        Specifies the viewer area background color.  # noqa: E501

        :param viewer_back_color: The viewer_back_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._viewer_back_color = viewer_back_color

    @property
    def active_selected_color(self):
        """Gets the active_selected_color of this DocuViewareControlState.  # noqa: E501

        Specifies the selected and active elements stroke color.  # noqa: E501

        :return: The active_selected_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._active_selected_color

    @active_selected_color.setter
    def active_selected_color(self, active_selected_color):
        """Sets the active_selected_color of this DocuViewareControlState.

        Specifies the selected and active elements stroke color.  # noqa: E501

        :param active_selected_color: The active_selected_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._active_selected_color = active_selected_color

    @property
    def toolbar_back_color(self):
        """Gets the toolbar_back_color of this DocuViewareControlState.  # noqa: E501

        Viewer Toolbar Background Color.  # noqa: E501

        :return: The toolbar_back_color of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._toolbar_back_color

    @toolbar_back_color.setter
    def toolbar_back_color(self, toolbar_back_color):
        """Sets the toolbar_back_color of this DocuViewareControlState.

        Viewer Toolbar Background Color.  # noqa: E501

        :param toolbar_back_color: The toolbar_back_color of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._toolbar_back_color = toolbar_back_color

    @property
    def custom_notification_icon_error(self):
        """Gets the custom_notification_icon_error of this DocuViewareControlState.  # noqa: E501

        Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.  # noqa: E501

        :return: The custom_notification_icon_error of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_icon_error

    @custom_notification_icon_error.setter
    def custom_notification_icon_error(self, custom_notification_icon_error):
        """Sets the custom_notification_icon_error of this DocuViewareControlState.

        Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.  # noqa: E501

        :param custom_notification_icon_error: The custom_notification_icon_error of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._custom_notification_icon_error = custom_notification_icon_error

    @property
    def custom_notification_icon_question(self):
        """Gets the custom_notification_icon_question of this DocuViewareControlState.  # noqa: E501

        Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.  # noqa: E501

        :return: The custom_notification_icon_question of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_icon_question

    @custom_notification_icon_question.setter
    def custom_notification_icon_question(self, custom_notification_icon_question):
        """Sets the custom_notification_icon_question of this DocuViewareControlState.

        Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.  # noqa: E501

        :param custom_notification_icon_question: The custom_notification_icon_question of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._custom_notification_icon_question = custom_notification_icon_question

    @property
    def custom_notification_icon_warning(self):
        """Gets the custom_notification_icon_warning of this DocuViewareControlState.  # noqa: E501

        Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.  # noqa: E501

        :return: The custom_notification_icon_warning of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_icon_warning

    @custom_notification_icon_warning.setter
    def custom_notification_icon_warning(self, custom_notification_icon_warning):
        """Sets the custom_notification_icon_warning of this DocuViewareControlState.

        Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.  # noqa: E501

        :param custom_notification_icon_warning: The custom_notification_icon_warning of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._custom_notification_icon_warning = custom_notification_icon_warning

    @property
    def custom_notification_icon_info(self):
        """Gets the custom_notification_icon_info of this DocuViewareControlState.  # noqa: E501

        Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.  # noqa: E501

        :return: The custom_notification_icon_info of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_icon_info

    @custom_notification_icon_info.setter
    def custom_notification_icon_info(self, custom_notification_icon_info):
        """Sets the custom_notification_icon_info of this DocuViewareControlState.

        Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.  # noqa: E501

        :param custom_notification_icon_info: The custom_notification_icon_info of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._custom_notification_icon_info = custom_notification_icon_info

    @property
    def custom_notification_icon_ok(self):
        """Gets the custom_notification_icon_ok of this DocuViewareControlState.  # noqa: E501

        Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.  # noqa: E501

        :return: The custom_notification_icon_ok of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._custom_notification_icon_ok

    @custom_notification_icon_ok.setter
    def custom_notification_icon_ok(self, custom_notification_icon_ok):
        """Sets the custom_notification_icon_ok of this DocuViewareControlState.

        Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.  # noqa: E501

        :param custom_notification_icon_ok: The custom_notification_icon_ok of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._custom_notification_icon_ok = custom_notification_icon_ok

    @property
    def allowed_export_formats(self):
        """Gets the allowed_export_formats of this DocuViewareControlState.  # noqa: E501

        Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.  # noqa: E501

        :return: The allowed_export_formats of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._allowed_export_formats

    @allowed_export_formats.setter
    def allowed_export_formats(self, allowed_export_formats):
        """Sets the allowed_export_formats of this DocuViewareControlState.

        Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.  # noqa: E501

        :param allowed_export_formats: The allowed_export_formats of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._allowed_export_formats = allowed_export_formats

    @property
    def disable_annotation_drawing_mode_panel(self):
        """Gets the disable_annotation_drawing_mode_panel of this DocuViewareControlState.  # noqa: E501

        Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :return: The disable_annotation_drawing_mode_panel of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._disable_annotation_drawing_mode_panel

    @disable_annotation_drawing_mode_panel.setter
    def disable_annotation_drawing_mode_panel(self, disable_annotation_drawing_mode_panel):
        """Sets the disable_annotation_drawing_mode_panel of this DocuViewareControlState.

        Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.  # noqa: E501

        :param disable_annotation_drawing_mode_panel: The disable_annotation_drawing_mode_panel of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._disable_annotation_drawing_mode_panel = disable_annotation_drawing_mode_panel

    @property
    def image_quality(self):
        """Gets the image_quality of this DocuViewareControlState.  # noqa: E501


        :return: The image_quality of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this DocuViewareControlState.


        :param image_quality: The image_quality of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._image_quality = image_quality

    @property
    def print_quality(self):
        """Gets the print_quality of this DocuViewareControlState.  # noqa: E501


        :return: The print_quality of this DocuViewareControlState.  # noqa: E501
        :rtype: PrintQuality
        """
        return self._print_quality

    @print_quality.setter
    def print_quality(self, print_quality):
        """Sets the print_quality of this DocuViewareControlState.


        :param print_quality: The print_quality of this DocuViewareControlState.  # noqa: E501
        :type: PrintQuality
        """

        self._print_quality = print_quality

    @property
    def enable_documents_drop(self):
        """Gets the enable_documents_drop of this DocuViewareControlState.  # noqa: E501

        Specifies whether documents drag & drop is allowed into the viewer area.  # noqa: E501

        :return: The enable_documents_drop of this DocuViewareControlState.  # noqa: E501
        :rtype: bool
        """
        return self._enable_documents_drop

    @enable_documents_drop.setter
    def enable_documents_drop(self, enable_documents_drop):
        """Sets the enable_documents_drop of this DocuViewareControlState.

        Specifies whether documents drag & drop is allowed into the viewer area.  # noqa: E501

        :param enable_documents_drop: The enable_documents_drop of this DocuViewareControlState.  # noqa: E501
        :type: bool
        """

        self._enable_documents_drop = enable_documents_drop

    @property
    def ajax_custom_headers(self):
        """Gets the ajax_custom_headers of this DocuViewareControlState.  # noqa: E501

        Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.  # noqa: E501

        :return: The ajax_custom_headers of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._ajax_custom_headers

    @ajax_custom_headers.setter
    def ajax_custom_headers(self, ajax_custom_headers):
        """Sets the ajax_custom_headers of this DocuViewareControlState.

        Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.  # noqa: E501

        :param ajax_custom_headers: The ajax_custom_headers of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._ajax_custom_headers = ajax_custom_headers

    @property
    def file_download_custom_headers(self):
        """Gets the file_download_custom_headers of this DocuViewareControlState.  # noqa: E501

        Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.  # noqa: E501

        :return: The file_download_custom_headers of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._file_download_custom_headers

    @file_download_custom_headers.setter
    def file_download_custom_headers(self, file_download_custom_headers):
        """Sets the file_download_custom_headers of this DocuViewareControlState.

        Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.  # noqa: E501

        :param file_download_custom_headers: The file_download_custom_headers of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._file_download_custom_headers = file_download_custom_headers

    @property
    def text_search_max_results(self):
        """Gets the text_search_max_results of this DocuViewareControlState.  # noqa: E501

        Specifies the maximum number of results provided by a text search request.  # noqa: E501

        :return: The text_search_max_results of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._text_search_max_results

    @text_search_max_results.setter
    def text_search_max_results(self, text_search_max_results):
        """Sets the text_search_max_results of this DocuViewareControlState.

        Specifies the maximum number of results provided by a text search request.  # noqa: E501

        :param text_search_max_results: The text_search_max_results of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._text_search_max_results = text_search_max_results

    @property
    def max_upload_size(self):
        """Gets the max_upload_size of this DocuViewareControlState.  # noqa: E501

        Specifies, in bytes, the upload size limit.  # noqa: E501

        :return: The max_upload_size of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._max_upload_size

    @max_upload_size.setter
    def max_upload_size(self, max_upload_size):
        """Sets the max_upload_size of this DocuViewareControlState.

        Specifies, in bytes, the upload size limit.  # noqa: E501

        :param max_upload_size: The max_upload_size of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._max_upload_size = max_upload_size

    @property
    def max_download_size(self):
        """Gets the max_download_size of this DocuViewareControlState.  # noqa: E501

        Specifies, in bytes, the download size limit.  # noqa: E501

        :return: The max_download_size of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._max_download_size

    @max_download_size.setter
    def max_download_size(self, max_download_size):
        """Sets the max_download_size of this DocuViewareControlState.

        Specifies, in bytes, the download size limit.  # noqa: E501

        :param max_download_size: The max_download_size of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._max_download_size = max_download_size

    @property
    def max_pages(self):
        """Gets the max_pages of this DocuViewareControlState.  # noqa: E501

        Specifies the maximum of pages per loaded document.  # noqa: E501

        :return: The max_pages of this DocuViewareControlState.  # noqa: E501
        :rtype: int
        """
        return self._max_pages

    @max_pages.setter
    def max_pages(self, max_pages):
        """Sets the max_pages of this DocuViewareControlState.

        Specifies the maximum of pages per loaded document.  # noqa: E501

        :param max_pages: The max_pages of this DocuViewareControlState.  # noqa: E501
        :type: int
        """

        self._max_pages = max_pages

    @property
    def certificates(self):
        """Gets the certificates of this DocuViewareControlState.  # noqa: E501

        Specifies a list of certificates to be made available on the client side to apply digital signature to documents.  # noqa: E501

        :return: The certificates of this DocuViewareControlState.  # noqa: E501
        :rtype: list[DocuViewareCertificate]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this DocuViewareControlState.

        Specifies a list of certificates to be made available on the client side to apply digital signature to documents.  # noqa: E501

        :param certificates: The certificates of this DocuViewareControlState.  # noqa: E501
        :type: list[DocuViewareCertificate]
        """

        self._certificates = certificates

    @property
    def extra_features(self):
        """Gets the extra_features of this DocuViewareControlState.  # noqa: E501

        A formatted string specifying undocumented extra features to handle.  # noqa: E501

        :return: The extra_features of this DocuViewareControlState.  # noqa: E501
        :rtype: str
        """
        return self._extra_features

    @extra_features.setter
    def extra_features(self, extra_features):
        """Sets the extra_features of this DocuViewareControlState.

        A formatted string specifying undocumented extra features to handle.  # noqa: E501

        :param extra_features: The extra_features of this DocuViewareControlState.  # noqa: E501
        :type: str
        """

        self._extra_features = extra_features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocuViewareControlState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocuViewareControlState):
            return True

        return self.to_dict() != other.to_dict()
