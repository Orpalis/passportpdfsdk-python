# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MICRSymbolInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'symbol_value': 'str',
        'symbol_value2': 'str',
        'top': 'int',
        'left': 'int',
        'bottom': 'int',
        'right': 'int',
        'line': 'int',
        'confidence': 'float',
        'confidence2': 'float'
    }

    attribute_map = {
        'symbol_value': 'SymbolValue',
        'symbol_value2': 'SymbolValue2',
        'top': 'Top',
        'left': 'Left',
        'bottom': 'Bottom',
        'right': 'Right',
        'line': 'Line',
        'confidence': 'Confidence',
        'confidence2': 'Confidence2'
    }

    def __init__(self, symbol_value=None, symbol_value2=None, top=None, left=None, bottom=None, right=None, line=None, confidence=None, confidence2=None, local_vars_configuration=None):  # noqa: E501
        """MICRSymbolInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._symbol_value = None
        self._symbol_value2 = None
        self._top = None
        self._left = None
        self._bottom = None
        self._right = None
        self._line = None
        self._confidence = None
        self._confidence2 = None
        self.discriminator = None

        self.symbol_value = symbol_value
        self.symbol_value2 = symbol_value2
        if top is not None:
            self.top = top
        if left is not None:
            self.left = left
        if bottom is not None:
            self.bottom = bottom
        if right is not None:
            self.right = right
        if line is not None:
            self.line = line
        if confidence is not None:
            self.confidence = confidence
        if confidence2 is not None:
            self.confidence2 = confidence2

    @property
    def symbol_value(self):
        """Gets the symbol_value of this MICRSymbolInfo.  # noqa: E501

        Specifies the best candidate for the character representation of the detected symbol.  # noqa: E501

        :return: The symbol_value of this MICRSymbolInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol_value

    @symbol_value.setter
    def symbol_value(self, symbol_value):
        """Sets the symbol_value of this MICRSymbolInfo.

        Specifies the best candidate for the character representation of the detected symbol.  # noqa: E501

        :param symbol_value: The symbol_value of this MICRSymbolInfo.  # noqa: E501
        :type: str
        """

        self._symbol_value = symbol_value

    @property
    def symbol_value2(self):
        """Gets the symbol_value2 of this MICRSymbolInfo.  # noqa: E501

        Specifies the second best candidate for the character representation of the detected symbol.  # noqa: E501

        :return: The symbol_value2 of this MICRSymbolInfo.  # noqa: E501
        :rtype: str
        """
        return self._symbol_value2

    @symbol_value2.setter
    def symbol_value2(self, symbol_value2):
        """Sets the symbol_value2 of this MICRSymbolInfo.

        Specifies the second best candidate for the character representation of the detected symbol.  # noqa: E501

        :param symbol_value2: The symbol_value2 of this MICRSymbolInfo.  # noqa: E501
        :type: str
        """

        self._symbol_value2 = symbol_value2

    @property
    def top(self):
        """Gets the top of this MICRSymbolInfo.  # noqa: E501

        Specifies the top coordinate of the symbol, in pixels.  # noqa: E501

        :return: The top of this MICRSymbolInfo.  # noqa: E501
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this MICRSymbolInfo.

        Specifies the top coordinate of the symbol, in pixels.  # noqa: E501

        :param top: The top of this MICRSymbolInfo.  # noqa: E501
        :type: int
        """

        self._top = top

    @property
    def left(self):
        """Gets the left of this MICRSymbolInfo.  # noqa: E501

        Specifies the left coordinate of the symbol, in pixels.  # noqa: E501

        :return: The left of this MICRSymbolInfo.  # noqa: E501
        :rtype: int
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this MICRSymbolInfo.

        Specifies the left coordinate of the symbol, in pixels.  # noqa: E501

        :param left: The left of this MICRSymbolInfo.  # noqa: E501
        :type: int
        """

        self._left = left

    @property
    def bottom(self):
        """Gets the bottom of this MICRSymbolInfo.  # noqa: E501

        Specifies the bottom coordinate of the symbol, in pixels.  # noqa: E501

        :return: The bottom of this MICRSymbolInfo.  # noqa: E501
        :rtype: int
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this MICRSymbolInfo.

        Specifies the bottom coordinate of the symbol, in pixels.  # noqa: E501

        :param bottom: The bottom of this MICRSymbolInfo.  # noqa: E501
        :type: int
        """

        self._bottom = bottom

    @property
    def right(self):
        """Gets the right of this MICRSymbolInfo.  # noqa: E501

        Specifies the right coordinate of the symbol, in pixels.  # noqa: E501

        :return: The right of this MICRSymbolInfo.  # noqa: E501
        :rtype: int
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this MICRSymbolInfo.

        Specifies the right coordinate of the symbol, in pixels.  # noqa: E501

        :param right: The right of this MICRSymbolInfo.  # noqa: E501
        :type: int
        """

        self._right = right

    @property
    def line(self):
        """Gets the line of this MICRSymbolInfo.  # noqa: E501

        Specifies the number of the line on which the symbol has been detected.  # noqa: E501

        :return: The line of this MICRSymbolInfo.  # noqa: E501
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this MICRSymbolInfo.

        Specifies the number of the line on which the symbol has been detected.  # noqa: E501

        :param line: The line of this MICRSymbolInfo.  # noqa: E501
        :type: int
        """

        self._line = line

    @property
    def confidence(self):
        """Gets the confidence of this MICRSymbolInfo.  # noqa: E501

        Specifies the level of confidence of the best detected symbol candidate.  # noqa: E501

        :return: The confidence of this MICRSymbolInfo.  # noqa: E501
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this MICRSymbolInfo.

        Specifies the level of confidence of the best detected symbol candidate.  # noqa: E501

        :param confidence: The confidence of this MICRSymbolInfo.  # noqa: E501
        :type: float
        """

        self._confidence = confidence

    @property
    def confidence2(self):
        """Gets the confidence2 of this MICRSymbolInfo.  # noqa: E501

        Specifies the level of confidence of the second best detected symbol candidate.  # noqa: E501

        :return: The confidence2 of this MICRSymbolInfo.  # noqa: E501
        :rtype: float
        """
        return self._confidence2

    @confidence2.setter
    def confidence2(self, confidence2):
        """Sets the confidence2 of this MICRSymbolInfo.

        Specifies the level of confidence of the second best detected symbol candidate.  # noqa: E501

        :param confidence2: The confidence2 of this MICRSymbolInfo.  # noqa: E501
        :type: float
        """

        self._confidence2 = confidence2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MICRSymbolInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MICRSymbolInfo):
            return True

        return self.to_dict() != other.to_dict()
