# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfSetPageBoxParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'left': 'float',
        'top': 'float',
        'right': 'float',
        'bottom': 'float',
        'page_box': 'PdfPageBox'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'left': 'Left',
        'top': 'Top',
        'right': 'Right',
        'bottom': 'Bottom',
        'page_box': 'PageBox'
    }

    def __init__(self, file_id=None, page_range=None, left=None, top=None, right=None, bottom=None, page_box=None, local_vars_configuration=None):  # noqa: E501
        """PdfSetPageBoxParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._left = None
        self._top = None
        self._right = None
        self._bottom = None
        self._page_box = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        self.left = left
        self.top = top
        self.right = right
        self.bottom = bottom
        if page_box is not None:
            self.page_box = page_box

    @property
    def file_id(self):
        """Gets the file_id of this PdfSetPageBoxParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfSetPageBoxParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfSetPageBoxParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this PdfSetPageBoxParameters.  # noqa: E501

        Specifies the number of the page, or the range of page whose page box shall be set.  # noqa: E501

        :return: The page_range of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this PdfSetPageBoxParameters.

        Specifies the number of the page, or the range of page whose page box shall be set.  # noqa: E501

        :param page_range: The page_range of this PdfSetPageBoxParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def left(self):
        """Gets the left of this PdfSetPageBoxParameters.  # noqa: E501

        Specifies, in points, the newly defined left position of the specified page box.  # noqa: E501

        :return: The left of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this PdfSetPageBoxParameters.

        Specifies, in points, the newly defined left position of the specified page box.  # noqa: E501

        :param left: The left of this PdfSetPageBoxParameters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and left is None:  # noqa: E501
            raise ValueError("Invalid value for `left`, must not be `None`")  # noqa: E501

        self._left = left

    @property
    def top(self):
        """Gets the top of this PdfSetPageBoxParameters.  # noqa: E501

        Specifies, in points, the newly defined top position of the specified page box.  # noqa: E501

        :return: The top of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this PdfSetPageBoxParameters.

        Specifies, in points, the newly defined top position of the specified page box.  # noqa: E501

        :param top: The top of this PdfSetPageBoxParameters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and top is None:  # noqa: E501
            raise ValueError("Invalid value for `top`, must not be `None`")  # noqa: E501

        self._top = top

    @property
    def right(self):
        """Gets the right of this PdfSetPageBoxParameters.  # noqa: E501

        Specifies, in points, the newly defined right position of the specified page box.  # noqa: E501

        :return: The right of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this PdfSetPageBoxParameters.

        Specifies, in points, the newly defined right position of the specified page box.  # noqa: E501

        :param right: The right of this PdfSetPageBoxParameters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and right is None:  # noqa: E501
            raise ValueError("Invalid value for `right`, must not be `None`")  # noqa: E501

        self._right = right

    @property
    def bottom(self):
        """Gets the bottom of this PdfSetPageBoxParameters.  # noqa: E501

        Specifies, in points, the newly defined bottom position of the specified page box.  # noqa: E501

        :return: The bottom of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: float
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this PdfSetPageBoxParameters.

        Specifies, in points, the newly defined bottom position of the specified page box.  # noqa: E501

        :param bottom: The bottom of this PdfSetPageBoxParameters.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and bottom is None:  # noqa: E501
            raise ValueError("Invalid value for `bottom`, must not be `None`")  # noqa: E501

        self._bottom = bottom

    @property
    def page_box(self):
        """Gets the page_box of this PdfSetPageBoxParameters.  # noqa: E501


        :return: The page_box of this PdfSetPageBoxParameters.  # noqa: E501
        :rtype: PdfPageBox
        """
        return self._page_box

    @page_box.setter
    def page_box(self, page_box):
        """Sets the page_box of this PdfSetPageBoxParameters.


        :param page_box: The page_box of this PdfSetPageBoxParameters.  # noqa: E501
        :type: PdfPageBox
        """

        self._page_box = page_box

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfSetPageBoxParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfSetPageBoxParameters):
            return True

        return self.to_dict() != other.to_dict()
