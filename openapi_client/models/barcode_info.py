# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BarcodeInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'BarcodeType',
        'barcode1_d_symbology': 'Barcode1DSymbology',
        'data': 'str',
        'x1': 'int',
        'x2': 'int',
        'x3': 'int',
        'x4': 'int',
        'y1': 'int',
        'y2': 'int',
        'y3': 'int',
        'y4': 'int',
        'bbox_left_inches': 'float',
        'bbox_top_inches': 'float',
        'bbox_width_inches': 'float',
        'bbox_height_inches': 'float',
        'page_number': 'int',
        'page_pixel_width': 'int',
        'page_pixel_height': 'int',
        'page_horizontal_resolution': 'float',
        'page_vertical_resolution': 'float'
    }

    attribute_map = {
        'type': 'Type',
        'barcode1_d_symbology': 'Barcode1DSymbology',
        'data': 'Data',
        'x1': 'X1',
        'x2': 'X2',
        'x3': 'X3',
        'x4': 'X4',
        'y1': 'Y1',
        'y2': 'Y2',
        'y3': 'Y3',
        'y4': 'Y4',
        'bbox_left_inches': 'BboxLeftInches',
        'bbox_top_inches': 'BboxTopInches',
        'bbox_width_inches': 'BboxWidthInches',
        'bbox_height_inches': 'BboxHeightInches',
        'page_number': 'PageNumber',
        'page_pixel_width': 'PagePixelWidth',
        'page_pixel_height': 'PagePixelHeight',
        'page_horizontal_resolution': 'PageHorizontalResolution',
        'page_vertical_resolution': 'PageVerticalResolution'
    }

    def __init__(self, type=None, barcode1_d_symbology=None, data=None, x1=None, x2=None, x3=None, x4=None, y1=None, y2=None, y3=None, y4=None, bbox_left_inches=None, bbox_top_inches=None, bbox_width_inches=None, bbox_height_inches=None, page_number=None, page_pixel_width=None, page_pixel_height=None, page_horizontal_resolution=None, page_vertical_resolution=None, local_vars_configuration=None):  # noqa: E501
        """BarcodeInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._barcode1_d_symbology = None
        self._data = None
        self._x1 = None
        self._x2 = None
        self._x3 = None
        self._x4 = None
        self._y1 = None
        self._y2 = None
        self._y3 = None
        self._y4 = None
        self._bbox_left_inches = None
        self._bbox_top_inches = None
        self._bbox_width_inches = None
        self._bbox_height_inches = None
        self._page_number = None
        self._page_pixel_width = None
        self._page_pixel_height = None
        self._page_horizontal_resolution = None
        self._page_vertical_resolution = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if barcode1_d_symbology is not None:
            self.barcode1_d_symbology = barcode1_d_symbology
        self.data = data
        if x1 is not None:
            self.x1 = x1
        if x2 is not None:
            self.x2 = x2
        if x3 is not None:
            self.x3 = x3
        if x4 is not None:
            self.x4 = x4
        if y1 is not None:
            self.y1 = y1
        if y2 is not None:
            self.y2 = y2
        if y3 is not None:
            self.y3 = y3
        if y4 is not None:
            self.y4 = y4
        if bbox_left_inches is not None:
            self.bbox_left_inches = bbox_left_inches
        if bbox_top_inches is not None:
            self.bbox_top_inches = bbox_top_inches
        if bbox_width_inches is not None:
            self.bbox_width_inches = bbox_width_inches
        if bbox_height_inches is not None:
            self.bbox_height_inches = bbox_height_inches
        if page_number is not None:
            self.page_number = page_number
        if page_pixel_width is not None:
            self.page_pixel_width = page_pixel_width
        if page_pixel_height is not None:
            self.page_pixel_height = page_pixel_height
        if page_horizontal_resolution is not None:
            self.page_horizontal_resolution = page_horizontal_resolution
        if page_vertical_resolution is not None:
            self.page_vertical_resolution = page_vertical_resolution

    @property
    def type(self):
        """Gets the type of this BarcodeInfo.  # noqa: E501


        :return: The type of this BarcodeInfo.  # noqa: E501
        :rtype: BarcodeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BarcodeInfo.


        :param type: The type of this BarcodeInfo.  # noqa: E501
        :type: BarcodeType
        """

        self._type = type

    @property
    def barcode1_d_symbology(self):
        """Gets the barcode1_d_symbology of this BarcodeInfo.  # noqa: E501


        :return: The barcode1_d_symbology of this BarcodeInfo.  # noqa: E501
        :rtype: Barcode1DSymbology
        """
        return self._barcode1_d_symbology

    @barcode1_d_symbology.setter
    def barcode1_d_symbology(self, barcode1_d_symbology):
        """Sets the barcode1_d_symbology of this BarcodeInfo.


        :param barcode1_d_symbology: The barcode1_d_symbology of this BarcodeInfo.  # noqa: E501
        :type: Barcode1DSymbology
        """

        self._barcode1_d_symbology = barcode1_d_symbology

    @property
    def data(self):
        """Gets the data of this BarcodeInfo.  # noqa: E501

        Specifies the data contained within the barcode.  # noqa: E501

        :return: The data of this BarcodeInfo.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this BarcodeInfo.

        Specifies the data contained within the barcode.  # noqa: E501

        :param data: The data of this BarcodeInfo.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def x1(self):
        """Gets the x1 of this BarcodeInfo.  # noqa: E501

        Specifies the horizontal top-left position of the barcode, in pixels.  # noqa: E501

        :return: The x1 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._x1

    @x1.setter
    def x1(self, x1):
        """Sets the x1 of this BarcodeInfo.

        Specifies the horizontal top-left position of the barcode, in pixels.  # noqa: E501

        :param x1: The x1 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._x1 = x1

    @property
    def x2(self):
        """Gets the x2 of this BarcodeInfo.  # noqa: E501

        Specifies the horizontal top-right position of the barcode, in pixels.  # noqa: E501

        :return: The x2 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._x2

    @x2.setter
    def x2(self, x2):
        """Sets the x2 of this BarcodeInfo.

        Specifies the horizontal top-right position of the barcode, in pixels.  # noqa: E501

        :param x2: The x2 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._x2 = x2

    @property
    def x3(self):
        """Gets the x3 of this BarcodeInfo.  # noqa: E501

        Specifies the horizontal bottom-left position of the barcode, in pixels.  # noqa: E501

        :return: The x3 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._x3

    @x3.setter
    def x3(self, x3):
        """Sets the x3 of this BarcodeInfo.

        Specifies the horizontal bottom-left position of the barcode, in pixels.  # noqa: E501

        :param x3: The x3 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._x3 = x3

    @property
    def x4(self):
        """Gets the x4 of this BarcodeInfo.  # noqa: E501

        Specifies the horizontal bottom-right position of the barcode, in pixels.  # noqa: E501

        :return: The x4 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._x4

    @x4.setter
    def x4(self, x4):
        """Sets the x4 of this BarcodeInfo.

        Specifies the horizontal bottom-right position of the barcode, in pixels.  # noqa: E501

        :param x4: The x4 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._x4 = x4

    @property
    def y1(self):
        """Gets the y1 of this BarcodeInfo.  # noqa: E501

        Specifies the vertical top-left position of the barcode, in pixels.  # noqa: E501

        :return: The y1 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._y1

    @y1.setter
    def y1(self, y1):
        """Sets the y1 of this BarcodeInfo.

        Specifies the vertical top-left position of the barcode, in pixels.  # noqa: E501

        :param y1: The y1 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._y1 = y1

    @property
    def y2(self):
        """Gets the y2 of this BarcodeInfo.  # noqa: E501

        Specifies the vertical top-right position of the barcode, in pixels.  # noqa: E501

        :return: The y2 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._y2

    @y2.setter
    def y2(self, y2):
        """Sets the y2 of this BarcodeInfo.

        Specifies the vertical top-right position of the barcode, in pixels.  # noqa: E501

        :param y2: The y2 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._y2 = y2

    @property
    def y3(self):
        """Gets the y3 of this BarcodeInfo.  # noqa: E501

        Specifies the vertical bottom-left position of the barcode, in pixels.  # noqa: E501

        :return: The y3 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._y3

    @y3.setter
    def y3(self, y3):
        """Sets the y3 of this BarcodeInfo.

        Specifies the vertical bottom-left position of the barcode, in pixels.  # noqa: E501

        :param y3: The y3 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._y3 = y3

    @property
    def y4(self):
        """Gets the y4 of this BarcodeInfo.  # noqa: E501

        Specifies the vertical bottom-right position of the barcode, in pixels.  # noqa: E501

        :return: The y4 of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._y4

    @y4.setter
    def y4(self, y4):
        """Sets the y4 of this BarcodeInfo.

        Specifies the vertical bottom-right position of the barcode, in pixels.  # noqa: E501

        :param y4: The y4 of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._y4 = y4

    @property
    def bbox_left_inches(self):
        """Gets the bbox_left_inches of this BarcodeInfo.  # noqa: E501

        Specifies the left coordinates of the bounding box of the barcode, in inches.  # noqa: E501

        :return: The bbox_left_inches of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._bbox_left_inches

    @bbox_left_inches.setter
    def bbox_left_inches(self, bbox_left_inches):
        """Sets the bbox_left_inches of this BarcodeInfo.

        Specifies the left coordinates of the bounding box of the barcode, in inches.  # noqa: E501

        :param bbox_left_inches: The bbox_left_inches of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._bbox_left_inches = bbox_left_inches

    @property
    def bbox_top_inches(self):
        """Gets the bbox_top_inches of this BarcodeInfo.  # noqa: E501

        Specifies the top coordinates of the bounding box of the barcode, in inches.  # noqa: E501

        :return: The bbox_top_inches of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._bbox_top_inches

    @bbox_top_inches.setter
    def bbox_top_inches(self, bbox_top_inches):
        """Sets the bbox_top_inches of this BarcodeInfo.

        Specifies the top coordinates of the bounding box of the barcode, in inches.  # noqa: E501

        :param bbox_top_inches: The bbox_top_inches of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._bbox_top_inches = bbox_top_inches

    @property
    def bbox_width_inches(self):
        """Gets the bbox_width_inches of this BarcodeInfo.  # noqa: E501

        Specifies the width of the bounding box of the barcode, in inches.  # noqa: E501

        :return: The bbox_width_inches of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._bbox_width_inches

    @bbox_width_inches.setter
    def bbox_width_inches(self, bbox_width_inches):
        """Sets the bbox_width_inches of this BarcodeInfo.

        Specifies the width of the bounding box of the barcode, in inches.  # noqa: E501

        :param bbox_width_inches: The bbox_width_inches of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._bbox_width_inches = bbox_width_inches

    @property
    def bbox_height_inches(self):
        """Gets the bbox_height_inches of this BarcodeInfo.  # noqa: E501

        Specifies the height of the bounding box of the barcode, in inches.  # noqa: E501

        :return: The bbox_height_inches of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._bbox_height_inches

    @bbox_height_inches.setter
    def bbox_height_inches(self, bbox_height_inches):
        """Sets the bbox_height_inches of this BarcodeInfo.

        Specifies the height of the bounding box of the barcode, in inches.  # noqa: E501

        :param bbox_height_inches: The bbox_height_inches of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._bbox_height_inches = bbox_height_inches

    @property
    def page_number(self):
        """Gets the page_number of this BarcodeInfo.  # noqa: E501

        Specifies the number of the page on which the barcode was read.  # noqa: E501

        :return: The page_number of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this BarcodeInfo.

        Specifies the number of the page on which the barcode was read.  # noqa: E501

        :param page_number: The page_number of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_pixel_width(self):
        """Gets the page_pixel_width of this BarcodeInfo.  # noqa: E501

        Specifies the width, in pixels, of the page where the barcode has been decoded.  # noqa: E501

        :return: The page_pixel_width of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._page_pixel_width

    @page_pixel_width.setter
    def page_pixel_width(self, page_pixel_width):
        """Sets the page_pixel_width of this BarcodeInfo.

        Specifies the width, in pixels, of the page where the barcode has been decoded.  # noqa: E501

        :param page_pixel_width: The page_pixel_width of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._page_pixel_width = page_pixel_width

    @property
    def page_pixel_height(self):
        """Gets the page_pixel_height of this BarcodeInfo.  # noqa: E501

        Specifies the height, in pixels, of the page where the barcode has been decoded.  # noqa: E501

        :return: The page_pixel_height of this BarcodeInfo.  # noqa: E501
        :rtype: int
        """
        return self._page_pixel_height

    @page_pixel_height.setter
    def page_pixel_height(self, page_pixel_height):
        """Sets the page_pixel_height of this BarcodeInfo.

        Specifies the height, in pixels, of the page where the barcode has been decoded.  # noqa: E501

        :param page_pixel_height: The page_pixel_height of this BarcodeInfo.  # noqa: E501
        :type: int
        """

        self._page_pixel_height = page_pixel_height

    @property
    def page_horizontal_resolution(self):
        """Gets the page_horizontal_resolution of this BarcodeInfo.  # noqa: E501

        Specifies the horizontal resolution, in pixel per inches, of the page where the barcode has been decoded.  # noqa: E501

        :return: The page_horizontal_resolution of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._page_horizontal_resolution

    @page_horizontal_resolution.setter
    def page_horizontal_resolution(self, page_horizontal_resolution):
        """Sets the page_horizontal_resolution of this BarcodeInfo.

        Specifies the horizontal resolution, in pixel per inches, of the page where the barcode has been decoded.  # noqa: E501

        :param page_horizontal_resolution: The page_horizontal_resolution of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._page_horizontal_resolution = page_horizontal_resolution

    @property
    def page_vertical_resolution(self):
        """Gets the page_vertical_resolution of this BarcodeInfo.  # noqa: E501

        Specifies the vertical resolution, in pixel per inches, of the page where the barcode has been decoded.  # noqa: E501

        :return: The page_vertical_resolution of this BarcodeInfo.  # noqa: E501
        :rtype: float
        """
        return self._page_vertical_resolution

    @page_vertical_resolution.setter
    def page_vertical_resolution(self, page_vertical_resolution):
        """Sets the page_vertical_resolution of this BarcodeInfo.

        Specifies the vertical resolution, in pixel per inches, of the page where the barcode has been decoded.  # noqa: E501

        :param page_vertical_resolution: The page_vertical_resolution of this BarcodeInfo.  # noqa: E501
        :type: float
        """

        self._page_vertical_resolution = page_vertical_resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BarcodeInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BarcodeInfo):
            return True

        return self.to_dict() != other.to_dict()
