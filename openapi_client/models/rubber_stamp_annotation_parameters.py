# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RubberStampAnnotationParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotation_layout': 'DrawableContentLayoutParameters',
        'rubber_stamp_icon': 'RubberStampAnnotationIcon',
        'title': 'str',
        'content': 'str',
        'color': 'str'
    }

    attribute_map = {
        'annotation_layout': 'AnnotationLayout',
        'rubber_stamp_icon': 'RubberStampIcon',
        'title': 'Title',
        'content': 'Content',
        'color': 'Color'
    }

    def __init__(self, annotation_layout=None, rubber_stamp_icon=None, title=None, content=None, color='red', local_vars_configuration=None):  # noqa: E501
        """RubberStampAnnotationParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotation_layout = None
        self._rubber_stamp_icon = None
        self._title = None
        self._content = None
        self._color = None
        self.discriminator = None

        self.annotation_layout = annotation_layout
        if rubber_stamp_icon is not None:
            self.rubber_stamp_icon = rubber_stamp_icon
        self.title = title
        self.content = content
        self.color = color

    @property
    def annotation_layout(self):
        """Gets the annotation_layout of this RubberStampAnnotationParameters.  # noqa: E501


        :return: The annotation_layout of this RubberStampAnnotationParameters.  # noqa: E501
        :rtype: DrawableContentLayoutParameters
        """
        return self._annotation_layout

    @annotation_layout.setter
    def annotation_layout(self, annotation_layout):
        """Sets the annotation_layout of this RubberStampAnnotationParameters.


        :param annotation_layout: The annotation_layout of this RubberStampAnnotationParameters.  # noqa: E501
        :type: DrawableContentLayoutParameters
        """
        if self.local_vars_configuration.client_side_validation and annotation_layout is None:  # noqa: E501
            raise ValueError("Invalid value for `annotation_layout`, must not be `None`")  # noqa: E501

        self._annotation_layout = annotation_layout

    @property
    def rubber_stamp_icon(self):
        """Gets the rubber_stamp_icon of this RubberStampAnnotationParameters.  # noqa: E501


        :return: The rubber_stamp_icon of this RubberStampAnnotationParameters.  # noqa: E501
        :rtype: RubberStampAnnotationIcon
        """
        return self._rubber_stamp_icon

    @rubber_stamp_icon.setter
    def rubber_stamp_icon(self, rubber_stamp_icon):
        """Sets the rubber_stamp_icon of this RubberStampAnnotationParameters.


        :param rubber_stamp_icon: The rubber_stamp_icon of this RubberStampAnnotationParameters.  # noqa: E501
        :type: RubberStampAnnotationIcon
        """

        self._rubber_stamp_icon = rubber_stamp_icon

    @property
    def title(self):
        """Gets the title of this RubberStampAnnotationParameters.  # noqa: E501

        Specifies the title of the annotation, if any.  # noqa: E501

        :return: The title of this RubberStampAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RubberStampAnnotationParameters.

        Specifies the title of the annotation, if any.  # noqa: E501

        :param title: The title of this RubberStampAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def content(self):
        """Gets the content of this RubberStampAnnotationParameters.  # noqa: E501

        Specify the content of the annotation, if any.  # noqa: E501

        :return: The content of this RubberStampAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this RubberStampAnnotationParameters.

        Specify the content of the annotation, if any.  # noqa: E501

        :param content: The content of this RubberStampAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def color(self):
        """Gets the color of this RubberStampAnnotationParameters.  # noqa: E501

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :return: The color of this RubberStampAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this RubberStampAnnotationParameters.

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :param color: The color of this RubberStampAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RubberStampAnnotationParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RubberStampAnnotationParameters):
            return True

        return self.to_dict() != other.to_dict()
