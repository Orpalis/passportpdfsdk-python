# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PassportPDFPassport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'passport_id': 'str',
        'plan_id': 'int',
        'optional_linked_subscription_id': 'str',
        'subscription_date': 'datetime',
        'expiration_date': 'datetime',
        'current_tokens_used': 'int',
        'extra_tokens': 'int',
        'extra_tokens_end_date': 'datetime',
        'is_yearly_paid': 'bool',
        'is_active': 'bool',
        'tokens_percent_usage_alert': 'int',
        'tokens_percent_usage_alert_sent': 'bool',
        'is_managed': 'bool',
        'next_monthly_term': 'datetime',
        'remaining_tokens': 'int'
    }

    attribute_map = {
        'passport_id': 'PassportId',
        'plan_id': 'PlanId',
        'optional_linked_subscription_id': 'OptionalLinkedSubscriptionId',
        'subscription_date': 'SubscriptionDate',
        'expiration_date': 'ExpirationDate',
        'current_tokens_used': 'CurrentTokensUsed',
        'extra_tokens': 'ExtraTokens',
        'extra_tokens_end_date': 'ExtraTokensEndDate',
        'is_yearly_paid': 'IsYearlyPaid',
        'is_active': 'IsActive',
        'tokens_percent_usage_alert': 'TokensPercentUsageAlert',
        'tokens_percent_usage_alert_sent': 'TokensPercentUsageAlertSent',
        'is_managed': 'IsManaged',
        'next_monthly_term': 'NextMonthlyTerm',
        'remaining_tokens': 'RemainingTokens'
    }

    def __init__(self, passport_id=None, plan_id=None, optional_linked_subscription_id=None, subscription_date=None, expiration_date=None, current_tokens_used=None, extra_tokens=None, extra_tokens_end_date=None, is_yearly_paid=None, is_active=None, tokens_percent_usage_alert=None, tokens_percent_usage_alert_sent=None, is_managed=None, next_monthly_term=None, remaining_tokens=None, local_vars_configuration=None):  # noqa: E501
        """PassportPDFPassport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._passport_id = None
        self._plan_id = None
        self._optional_linked_subscription_id = None
        self._subscription_date = None
        self._expiration_date = None
        self._current_tokens_used = None
        self._extra_tokens = None
        self._extra_tokens_end_date = None
        self._is_yearly_paid = None
        self._is_active = None
        self._tokens_percent_usage_alert = None
        self._tokens_percent_usage_alert_sent = None
        self._is_managed = None
        self._next_monthly_term = None
        self._remaining_tokens = None
        self.discriminator = None

        self.passport_id = passport_id
        if plan_id is not None:
            self.plan_id = plan_id
        self.optional_linked_subscription_id = optional_linked_subscription_id
        if subscription_date is not None:
            self.subscription_date = subscription_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if current_tokens_used is not None:
            self.current_tokens_used = current_tokens_used
        if extra_tokens is not None:
            self.extra_tokens = extra_tokens
        if extra_tokens_end_date is not None:
            self.extra_tokens_end_date = extra_tokens_end_date
        if is_yearly_paid is not None:
            self.is_yearly_paid = is_yearly_paid
        if is_active is not None:
            self.is_active = is_active
        if tokens_percent_usage_alert is not None:
            self.tokens_percent_usage_alert = tokens_percent_usage_alert
        if tokens_percent_usage_alert_sent is not None:
            self.tokens_percent_usage_alert_sent = tokens_percent_usage_alert_sent
        if is_managed is not None:
            self.is_managed = is_managed
        if next_monthly_term is not None:
            self.next_monthly_term = next_monthly_term
        if remaining_tokens is not None:
            self.remaining_tokens = remaining_tokens

    @property
    def passport_id(self):
        """Gets the passport_id of this PassportPDFPassport.  # noqa: E501


        :return: The passport_id of this PassportPDFPassport.  # noqa: E501
        :rtype: str
        """
        return self._passport_id

    @passport_id.setter
    def passport_id(self, passport_id):
        """Sets the passport_id of this PassportPDFPassport.


        :param passport_id: The passport_id of this PassportPDFPassport.  # noqa: E501
        :type: str
        """

        self._passport_id = passport_id

    @property
    def plan_id(self):
        """Gets the plan_id of this PassportPDFPassport.  # noqa: E501


        :return: The plan_id of this PassportPDFPassport.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this PassportPDFPassport.


        :param plan_id: The plan_id of this PassportPDFPassport.  # noqa: E501
        :type: int
        """

        self._plan_id = plan_id

    @property
    def optional_linked_subscription_id(self):
        """Gets the optional_linked_subscription_id of this PassportPDFPassport.  # noqa: E501


        :return: The optional_linked_subscription_id of this PassportPDFPassport.  # noqa: E501
        :rtype: str
        """
        return self._optional_linked_subscription_id

    @optional_linked_subscription_id.setter
    def optional_linked_subscription_id(self, optional_linked_subscription_id):
        """Sets the optional_linked_subscription_id of this PassportPDFPassport.


        :param optional_linked_subscription_id: The optional_linked_subscription_id of this PassportPDFPassport.  # noqa: E501
        :type: str
        """

        self._optional_linked_subscription_id = optional_linked_subscription_id

    @property
    def subscription_date(self):
        """Gets the subscription_date of this PassportPDFPassport.  # noqa: E501


        :return: The subscription_date of this PassportPDFPassport.  # noqa: E501
        :rtype: datetime
        """
        return self._subscription_date

    @subscription_date.setter
    def subscription_date(self, subscription_date):
        """Sets the subscription_date of this PassportPDFPassport.


        :param subscription_date: The subscription_date of this PassportPDFPassport.  # noqa: E501
        :type: datetime
        """

        self._subscription_date = subscription_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this PassportPDFPassport.  # noqa: E501


        :return: The expiration_date of this PassportPDFPassport.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this PassportPDFPassport.


        :param expiration_date: The expiration_date of this PassportPDFPassport.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def current_tokens_used(self):
        """Gets the current_tokens_used of this PassportPDFPassport.  # noqa: E501


        :return: The current_tokens_used of this PassportPDFPassport.  # noqa: E501
        :rtype: int
        """
        return self._current_tokens_used

    @current_tokens_used.setter
    def current_tokens_used(self, current_tokens_used):
        """Sets the current_tokens_used of this PassportPDFPassport.


        :param current_tokens_used: The current_tokens_used of this PassportPDFPassport.  # noqa: E501
        :type: int
        """

        self._current_tokens_used = current_tokens_used

    @property
    def extra_tokens(self):
        """Gets the extra_tokens of this PassportPDFPassport.  # noqa: E501


        :return: The extra_tokens of this PassportPDFPassport.  # noqa: E501
        :rtype: int
        """
        return self._extra_tokens

    @extra_tokens.setter
    def extra_tokens(self, extra_tokens):
        """Sets the extra_tokens of this PassportPDFPassport.


        :param extra_tokens: The extra_tokens of this PassportPDFPassport.  # noqa: E501
        :type: int
        """

        self._extra_tokens = extra_tokens

    @property
    def extra_tokens_end_date(self):
        """Gets the extra_tokens_end_date of this PassportPDFPassport.  # noqa: E501


        :return: The extra_tokens_end_date of this PassportPDFPassport.  # noqa: E501
        :rtype: datetime
        """
        return self._extra_tokens_end_date

    @extra_tokens_end_date.setter
    def extra_tokens_end_date(self, extra_tokens_end_date):
        """Sets the extra_tokens_end_date of this PassportPDFPassport.


        :param extra_tokens_end_date: The extra_tokens_end_date of this PassportPDFPassport.  # noqa: E501
        :type: datetime
        """

        self._extra_tokens_end_date = extra_tokens_end_date

    @property
    def is_yearly_paid(self):
        """Gets the is_yearly_paid of this PassportPDFPassport.  # noqa: E501


        :return: The is_yearly_paid of this PassportPDFPassport.  # noqa: E501
        :rtype: bool
        """
        return self._is_yearly_paid

    @is_yearly_paid.setter
    def is_yearly_paid(self, is_yearly_paid):
        """Sets the is_yearly_paid of this PassportPDFPassport.


        :param is_yearly_paid: The is_yearly_paid of this PassportPDFPassport.  # noqa: E501
        :type: bool
        """

        self._is_yearly_paid = is_yearly_paid

    @property
    def is_active(self):
        """Gets the is_active of this PassportPDFPassport.  # noqa: E501


        :return: The is_active of this PassportPDFPassport.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PassportPDFPassport.


        :param is_active: The is_active of this PassportPDFPassport.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def tokens_percent_usage_alert(self):
        """Gets the tokens_percent_usage_alert of this PassportPDFPassport.  # noqa: E501


        :return: The tokens_percent_usage_alert of this PassportPDFPassport.  # noqa: E501
        :rtype: int
        """
        return self._tokens_percent_usage_alert

    @tokens_percent_usage_alert.setter
    def tokens_percent_usage_alert(self, tokens_percent_usage_alert):
        """Sets the tokens_percent_usage_alert of this PassportPDFPassport.


        :param tokens_percent_usage_alert: The tokens_percent_usage_alert of this PassportPDFPassport.  # noqa: E501
        :type: int
        """

        self._tokens_percent_usage_alert = tokens_percent_usage_alert

    @property
    def tokens_percent_usage_alert_sent(self):
        """Gets the tokens_percent_usage_alert_sent of this PassportPDFPassport.  # noqa: E501


        :return: The tokens_percent_usage_alert_sent of this PassportPDFPassport.  # noqa: E501
        :rtype: bool
        """
        return self._tokens_percent_usage_alert_sent

    @tokens_percent_usage_alert_sent.setter
    def tokens_percent_usage_alert_sent(self, tokens_percent_usage_alert_sent):
        """Sets the tokens_percent_usage_alert_sent of this PassportPDFPassport.


        :param tokens_percent_usage_alert_sent: The tokens_percent_usage_alert_sent of this PassportPDFPassport.  # noqa: E501
        :type: bool
        """

        self._tokens_percent_usage_alert_sent = tokens_percent_usage_alert_sent

    @property
    def is_managed(self):
        """Gets the is_managed of this PassportPDFPassport.  # noqa: E501


        :return: The is_managed of this PassportPDFPassport.  # noqa: E501
        :rtype: bool
        """
        return self._is_managed

    @is_managed.setter
    def is_managed(self, is_managed):
        """Sets the is_managed of this PassportPDFPassport.


        :param is_managed: The is_managed of this PassportPDFPassport.  # noqa: E501
        :type: bool
        """

        self._is_managed = is_managed

    @property
    def next_monthly_term(self):
        """Gets the next_monthly_term of this PassportPDFPassport.  # noqa: E501


        :return: The next_monthly_term of this PassportPDFPassport.  # noqa: E501
        :rtype: datetime
        """
        return self._next_monthly_term

    @next_monthly_term.setter
    def next_monthly_term(self, next_monthly_term):
        """Sets the next_monthly_term of this PassportPDFPassport.


        :param next_monthly_term: The next_monthly_term of this PassportPDFPassport.  # noqa: E501
        :type: datetime
        """

        self._next_monthly_term = next_monthly_term

    @property
    def remaining_tokens(self):
        """Gets the remaining_tokens of this PassportPDFPassport.  # noqa: E501


        :return: The remaining_tokens of this PassportPDFPassport.  # noqa: E501
        :rtype: int
        """
        return self._remaining_tokens

    @remaining_tokens.setter
    def remaining_tokens(self, remaining_tokens):
        """Sets the remaining_tokens of this PassportPDFPassport.


        :param remaining_tokens: The remaining_tokens of this PassportPDFPassport.  # noqa: E501
        :type: int
        """

        self._remaining_tokens = remaining_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PassportPDFPassport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PassportPDFPassport):
            return True

        return self.to_dict() != other.to_dict()
