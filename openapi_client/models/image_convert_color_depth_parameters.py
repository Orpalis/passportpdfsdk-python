# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageConvertColorDepthParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'convert_color_depth_mode': 'ColorDepthConversionMethod',
        'depth1_bpp_otsu_threshold': 'int',
        'depth1_bpp_bradley_threshold': 'int',
        'depth1_bpp_sauvola_factor': 'float'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'convert_color_depth_mode': 'ConvertColorDepthMode',
        'depth1_bpp_otsu_threshold': 'Depth1BppOtsuThreshold',
        'depth1_bpp_bradley_threshold': 'Depth1BppBradleyThreshold',
        'depth1_bpp_sauvola_factor': 'Depth1BppSauvolaFactor'
    }

    def __init__(self, file_id=None, page_range=None, convert_color_depth_mode=None, depth1_bpp_otsu_threshold=50, depth1_bpp_bradley_threshold=38, depth1_bpp_sauvola_factor=0.35, local_vars_configuration=None):  # noqa: E501
        """ImageConvertColorDepthParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._convert_color_depth_mode = None
        self._depth1_bpp_otsu_threshold = None
        self._depth1_bpp_bradley_threshold = None
        self._depth1_bpp_sauvola_factor = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        self.convert_color_depth_mode = convert_color_depth_mode
        if depth1_bpp_otsu_threshold is not None:
            self.depth1_bpp_otsu_threshold = depth1_bpp_otsu_threshold
        if depth1_bpp_bradley_threshold is not None:
            self.depth1_bpp_bradley_threshold = depth1_bpp_bradley_threshold
        if depth1_bpp_sauvola_factor is not None:
            self.depth1_bpp_sauvola_factor = depth1_bpp_sauvola_factor

    @property
    def file_id(self):
        """Gets the file_id of this ImageConvertColorDepthParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageConvertColorDepthParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageConvertColorDepthParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to process.  # noqa: E501

        :return: The page_range of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageConvertColorDepthParameters.

        Specifies the number of the page, or the range of pages to process.  # noqa: E501

        :param page_range: The page_range of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def convert_color_depth_mode(self):
        """Gets the convert_color_depth_mode of this ImageConvertColorDepthParameters.  # noqa: E501


        :return: The convert_color_depth_mode of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: ColorDepthConversionMethod
        """
        return self._convert_color_depth_mode

    @convert_color_depth_mode.setter
    def convert_color_depth_mode(self, convert_color_depth_mode):
        """Sets the convert_color_depth_mode of this ImageConvertColorDepthParameters.


        :param convert_color_depth_mode: The convert_color_depth_mode of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: ColorDepthConversionMethod
        """
        if self.local_vars_configuration.client_side_validation and convert_color_depth_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `convert_color_depth_mode`, must not be `None`")  # noqa: E501

        self._convert_color_depth_mode = convert_color_depth_mode

    @property
    def depth1_bpp_otsu_threshold(self):
        """Gets the depth1_bpp_otsu_threshold of this ImageConvertColorDepthParameters.  # noqa: E501

        Specifies the threshold for a conversion using the Depth1BppOtsu method.  # noqa: E501

        :return: The depth1_bpp_otsu_threshold of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: int
        """
        return self._depth1_bpp_otsu_threshold

    @depth1_bpp_otsu_threshold.setter
    def depth1_bpp_otsu_threshold(self, depth1_bpp_otsu_threshold):
        """Sets the depth1_bpp_otsu_threshold of this ImageConvertColorDepthParameters.

        Specifies the threshold for a conversion using the Depth1BppOtsu method.  # noqa: E501

        :param depth1_bpp_otsu_threshold: The depth1_bpp_otsu_threshold of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: int
        """

        self._depth1_bpp_otsu_threshold = depth1_bpp_otsu_threshold

    @property
    def depth1_bpp_bradley_threshold(self):
        """Gets the depth1_bpp_bradley_threshold of this ImageConvertColorDepthParameters.  # noqa: E501

        Specifies the threshold for a conversion using the Depth1BppBradley method.  # noqa: E501

        :return: The depth1_bpp_bradley_threshold of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: int
        """
        return self._depth1_bpp_bradley_threshold

    @depth1_bpp_bradley_threshold.setter
    def depth1_bpp_bradley_threshold(self, depth1_bpp_bradley_threshold):
        """Sets the depth1_bpp_bradley_threshold of this ImageConvertColorDepthParameters.

        Specifies the threshold for a conversion using the Depth1BppBradley method.  # noqa: E501

        :param depth1_bpp_bradley_threshold: The depth1_bpp_bradley_threshold of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: int
        """

        self._depth1_bpp_bradley_threshold = depth1_bpp_bradley_threshold

    @property
    def depth1_bpp_sauvola_factor(self):
        """Gets the depth1_bpp_sauvola_factor of this ImageConvertColorDepthParameters.  # noqa: E501

        Specifies the factor for a conversion using the Depth1BppSauvola method.  # noqa: E501

        :return: The depth1_bpp_sauvola_factor of this ImageConvertColorDepthParameters.  # noqa: E501
        :rtype: float
        """
        return self._depth1_bpp_sauvola_factor

    @depth1_bpp_sauvola_factor.setter
    def depth1_bpp_sauvola_factor(self, depth1_bpp_sauvola_factor):
        """Sets the depth1_bpp_sauvola_factor of this ImageConvertColorDepthParameters.

        Specifies the factor for a conversion using the Depth1BppSauvola method.  # noqa: E501

        :param depth1_bpp_sauvola_factor: The depth1_bpp_sauvola_factor of this ImageConvertColorDepthParameters.  # noqa: E501
        :type: float
        """

        self._depth1_bpp_sauvola_factor = depth1_bpp_sauvola_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageConvertColorDepthParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageConvertColorDepthParameters):
            return True

        return self.to_dict() != other.to_dict()
