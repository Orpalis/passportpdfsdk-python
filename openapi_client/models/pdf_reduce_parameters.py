# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfReduceParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'output_version': 'PdfVersion',
        'image_quality': 'ImageQuality',
        'recompress_images': 'bool',
        'enable_color_detection': 'bool',
        'pack_document': 'bool',
        'pack_fonts': 'bool',
        'downscale_images': 'bool',
        'downscale_resolution': 'int',
        'fast_web_view': 'bool',
        'remove_form_fields': 'bool',
        'remove_annotations': 'bool',
        'remove_bookmarks': 'bool',
        'remove_hyperlinks': 'bool',
        'remove_embedded_files': 'bool',
        'remove_blank_pages': 'bool',
        'remove_java_script': 'bool',
        'enable_jpeg2000': 'bool',
        'enable_jbig2': 'bool',
        'enable_char_repair': 'bool',
        'enable_mrc': 'bool',
        'preserve_smoothing': 'bool',
        'downscale_resolution_mrc': 'int',
        'remove_metadata': 'bool',
        'remove_page_thumbnails': 'bool',
        'remove_page_piece_info': 'bool',
        'jbig2_pms_threshold': 'float'
    }

    attribute_map = {
        'file_id': 'FileId',
        'output_version': 'OutputVersion',
        'image_quality': 'ImageQuality',
        'recompress_images': 'RecompressImages',
        'enable_color_detection': 'EnableColorDetection',
        'pack_document': 'PackDocument',
        'pack_fonts': 'PackFonts',
        'downscale_images': 'DownscaleImages',
        'downscale_resolution': 'DownscaleResolution',
        'fast_web_view': 'FastWebView',
        'remove_form_fields': 'RemoveFormFields',
        'remove_annotations': 'RemoveAnnotations',
        'remove_bookmarks': 'RemoveBookmarks',
        'remove_hyperlinks': 'RemoveHyperlinks',
        'remove_embedded_files': 'RemoveEmbeddedFiles',
        'remove_blank_pages': 'RemoveBlankPages',
        'remove_java_script': 'RemoveJavaScript',
        'enable_jpeg2000': 'EnableJPEG2000',
        'enable_jbig2': 'EnableJBIG2',
        'enable_char_repair': 'EnableCharRepair',
        'enable_mrc': 'EnableMRC',
        'preserve_smoothing': 'PreserveSmoothing',
        'downscale_resolution_mrc': 'DownscaleResolutionMRC',
        'remove_metadata': 'RemoveMetadata',
        'remove_page_thumbnails': 'RemovePageThumbnails',
        'remove_page_piece_info': 'RemovePagePieceInfo',
        'jbig2_pms_threshold': 'JBIG2PMSThreshold'
    }

    def __init__(self, file_id=None, output_version=None, image_quality=None, recompress_images=True, enable_color_detection=True, pack_document=True, pack_fonts=True, downscale_images=True, downscale_resolution=150, fast_web_view=False, remove_form_fields=False, remove_annotations=False, remove_bookmarks=False, remove_hyperlinks=False, remove_embedded_files=False, remove_blank_pages=False, remove_java_script=False, enable_jpeg2000=True, enable_jbig2=True, enable_char_repair=False, enable_mrc=False, preserve_smoothing=False, downscale_resolution_mrc=100, remove_metadata=False, remove_page_thumbnails=False, remove_page_piece_info=False, jbig2_pms_threshold=0.85, local_vars_configuration=None):  # noqa: E501
        """PdfReduceParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._output_version = None
        self._image_quality = None
        self._recompress_images = None
        self._enable_color_detection = None
        self._pack_document = None
        self._pack_fonts = None
        self._downscale_images = None
        self._downscale_resolution = None
        self._fast_web_view = None
        self._remove_form_fields = None
        self._remove_annotations = None
        self._remove_bookmarks = None
        self._remove_hyperlinks = None
        self._remove_embedded_files = None
        self._remove_blank_pages = None
        self._remove_java_script = None
        self._enable_jpeg2000 = None
        self._enable_jbig2 = None
        self._enable_char_repair = None
        self._enable_mrc = None
        self._preserve_smoothing = None
        self._downscale_resolution_mrc = None
        self._remove_metadata = None
        self._remove_page_thumbnails = None
        self._remove_page_piece_info = None
        self._jbig2_pms_threshold = None
        self.discriminator = None

        self.file_id = file_id
        if output_version is not None:
            self.output_version = output_version
        if image_quality is not None:
            self.image_quality = image_quality
        if recompress_images is not None:
            self.recompress_images = recompress_images
        if enable_color_detection is not None:
            self.enable_color_detection = enable_color_detection
        if pack_document is not None:
            self.pack_document = pack_document
        if pack_fonts is not None:
            self.pack_fonts = pack_fonts
        if downscale_images is not None:
            self.downscale_images = downscale_images
        if downscale_resolution is not None:
            self.downscale_resolution = downscale_resolution
        if fast_web_view is not None:
            self.fast_web_view = fast_web_view
        if remove_form_fields is not None:
            self.remove_form_fields = remove_form_fields
        if remove_annotations is not None:
            self.remove_annotations = remove_annotations
        if remove_bookmarks is not None:
            self.remove_bookmarks = remove_bookmarks
        if remove_hyperlinks is not None:
            self.remove_hyperlinks = remove_hyperlinks
        if remove_embedded_files is not None:
            self.remove_embedded_files = remove_embedded_files
        if remove_blank_pages is not None:
            self.remove_blank_pages = remove_blank_pages
        if remove_java_script is not None:
            self.remove_java_script = remove_java_script
        if enable_jpeg2000 is not None:
            self.enable_jpeg2000 = enable_jpeg2000
        if enable_jbig2 is not None:
            self.enable_jbig2 = enable_jbig2
        if enable_char_repair is not None:
            self.enable_char_repair = enable_char_repair
        if enable_mrc is not None:
            self.enable_mrc = enable_mrc
        if preserve_smoothing is not None:
            self.preserve_smoothing = preserve_smoothing
        if downscale_resolution_mrc is not None:
            self.downscale_resolution_mrc = downscale_resolution_mrc
        if remove_metadata is not None:
            self.remove_metadata = remove_metadata
        if remove_page_thumbnails is not None:
            self.remove_page_thumbnails = remove_page_thumbnails
        if remove_page_piece_info is not None:
            self.remove_page_piece_info = remove_page_piece_info
        if jbig2_pms_threshold is not None:
            self.jbig2_pms_threshold = jbig2_pms_threshold

    @property
    def file_id(self):
        """Gets the file_id of this PdfReduceParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfReduceParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfReduceParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfReduceParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def output_version(self):
        """Gets the output_version of this PdfReduceParameters.  # noqa: E501


        :return: The output_version of this PdfReduceParameters.  # noqa: E501
        :rtype: PdfVersion
        """
        return self._output_version

    @output_version.setter
    def output_version(self, output_version):
        """Sets the output_version of this PdfReduceParameters.


        :param output_version: The output_version of this PdfReduceParameters.  # noqa: E501
        :type: PdfVersion
        """

        self._output_version = output_version

    @property
    def image_quality(self):
        """Gets the image_quality of this PdfReduceParameters.  # noqa: E501


        :return: The image_quality of this PdfReduceParameters.  # noqa: E501
        :rtype: ImageQuality
        """
        return self._image_quality

    @image_quality.setter
    def image_quality(self, image_quality):
        """Sets the image_quality of this PdfReduceParameters.


        :param image_quality: The image_quality of this PdfReduceParameters.  # noqa: E501
        :type: ImageQuality
        """

        self._image_quality = image_quality

    @property
    def recompress_images(self):
        """Gets the recompress_images of this PdfReduceParameters.  # noqa: E501

        Specifies whether the images from the PDF shall be recompressed.  # noqa: E501

        :return: The recompress_images of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._recompress_images

    @recompress_images.setter
    def recompress_images(self, recompress_images):
        """Sets the recompress_images of this PdfReduceParameters.

        Specifies whether the images from the PDF shall be recompressed.  # noqa: E501

        :param recompress_images: The recompress_images of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._recompress_images = recompress_images

    @property
    def enable_color_detection(self):
        """Gets the enable_color_detection of this PdfReduceParameters.  # noqa: E501

        Specifies whether color detection must be performed on the images from the PDF.  # noqa: E501

        :return: The enable_color_detection of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_color_detection

    @enable_color_detection.setter
    def enable_color_detection(self, enable_color_detection):
        """Sets the enable_color_detection of this PdfReduceParameters.

        Specifies whether color detection must be performed on the images from the PDF.  # noqa: E501

        :param enable_color_detection: The enable_color_detection of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._enable_color_detection = enable_color_detection

    @property
    def pack_document(self):
        """Gets the pack_document of this PdfReduceParameters.  # noqa: E501

        Specifies whether the PDF shall be packed when saved in order to reduce its size.  # noqa: E501

        :return: The pack_document of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._pack_document

    @pack_document.setter
    def pack_document(self, pack_document):
        """Sets the pack_document of this PdfReduceParameters.

        Specifies whether the PDF shall be packed when saved in order to reduce its size.  # noqa: E501

        :param pack_document: The pack_document of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._pack_document = pack_document

    @property
    def pack_fonts(self):
        """Gets the pack_fonts of this PdfReduceParameters.  # noqa: E501

        Specifies whether the PDF fonts must be packed in order to reduce their size.  # noqa: E501

        :return: The pack_fonts of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._pack_fonts

    @pack_fonts.setter
    def pack_fonts(self, pack_fonts):
        """Sets the pack_fonts of this PdfReduceParameters.

        Specifies whether the PDF fonts must be packed in order to reduce their size.  # noqa: E501

        :param pack_fonts: The pack_fonts of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._pack_fonts = pack_fonts

    @property
    def downscale_images(self):
        """Gets the downscale_images of this PdfReduceParameters.  # noqa: E501

        Specifies whether the images from the PDF shall be downscaled.  # noqa: E501

        :return: The downscale_images of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._downscale_images

    @downscale_images.setter
    def downscale_images(self, downscale_images):
        """Sets the downscale_images of this PdfReduceParameters.

        Specifies whether the images from the PDF shall be downscaled.  # noqa: E501

        :param downscale_images: The downscale_images of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._downscale_images = downscale_images

    @property
    def downscale_resolution(self):
        """Gets the downscale_resolution of this PdfReduceParameters.  # noqa: E501

        Specifies the resolution to be used to downscale images.  # noqa: E501

        :return: The downscale_resolution of this PdfReduceParameters.  # noqa: E501
        :rtype: int
        """
        return self._downscale_resolution

    @downscale_resolution.setter
    def downscale_resolution(self, downscale_resolution):
        """Sets the downscale_resolution of this PdfReduceParameters.

        Specifies the resolution to be used to downscale images.  # noqa: E501

        :param downscale_resolution: The downscale_resolution of this PdfReduceParameters.  # noqa: E501
        :type: int
        """

        self._downscale_resolution = downscale_resolution

    @property
    def fast_web_view(self):
        """Gets the fast_web_view of this PdfReduceParameters.  # noqa: E501

        Specifies whether the PDF shall be optimized for online distribution.  # noqa: E501

        :return: The fast_web_view of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._fast_web_view

    @fast_web_view.setter
    def fast_web_view(self, fast_web_view):
        """Sets the fast_web_view of this PdfReduceParameters.

        Specifies whether the PDF shall be optimized for online distribution.  # noqa: E501

        :param fast_web_view: The fast_web_view of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._fast_web_view = fast_web_view

    @property
    def remove_form_fields(self):
        """Gets the remove_form_fields of this PdfReduceParameters.  # noqa: E501

        Specifies whether the form fields shall be removed from the PDF.  # noqa: E501

        :return: The remove_form_fields of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_form_fields

    @remove_form_fields.setter
    def remove_form_fields(self, remove_form_fields):
        """Sets the remove_form_fields of this PdfReduceParameters.

        Specifies whether the form fields shall be removed from the PDF.  # noqa: E501

        :param remove_form_fields: The remove_form_fields of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_form_fields = remove_form_fields

    @property
    def remove_annotations(self):
        """Gets the remove_annotations of this PdfReduceParameters.  # noqa: E501

        Specifies whether the annotations shall be removed from the PDF.  # noqa: E501

        :return: The remove_annotations of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_annotations

    @remove_annotations.setter
    def remove_annotations(self, remove_annotations):
        """Sets the remove_annotations of this PdfReduceParameters.

        Specifies whether the annotations shall be removed from the PDF.  # noqa: E501

        :param remove_annotations: The remove_annotations of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_annotations = remove_annotations

    @property
    def remove_bookmarks(self):
        """Gets the remove_bookmarks of this PdfReduceParameters.  # noqa: E501

        Specifies whether the bookmarks shall be removed from the PDF.  # noqa: E501

        :return: The remove_bookmarks of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_bookmarks

    @remove_bookmarks.setter
    def remove_bookmarks(self, remove_bookmarks):
        """Sets the remove_bookmarks of this PdfReduceParameters.

        Specifies whether the bookmarks shall be removed from the PDF.  # noqa: E501

        :param remove_bookmarks: The remove_bookmarks of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_bookmarks = remove_bookmarks

    @property
    def remove_hyperlinks(self):
        """Gets the remove_hyperlinks of this PdfReduceParameters.  # noqa: E501

        Specifies whether the hyperlinks shall be removed from the PDF.  # noqa: E501

        :return: The remove_hyperlinks of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_hyperlinks

    @remove_hyperlinks.setter
    def remove_hyperlinks(self, remove_hyperlinks):
        """Sets the remove_hyperlinks of this PdfReduceParameters.

        Specifies whether the hyperlinks shall be removed from the PDF.  # noqa: E501

        :param remove_hyperlinks: The remove_hyperlinks of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_hyperlinks = remove_hyperlinks

    @property
    def remove_embedded_files(self):
        """Gets the remove_embedded_files of this PdfReduceParameters.  # noqa: E501

        Specifies whether the embedded files shall be removed from the PDF.  # noqa: E501

        :return: The remove_embedded_files of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_embedded_files

    @remove_embedded_files.setter
    def remove_embedded_files(self, remove_embedded_files):
        """Sets the remove_embedded_files of this PdfReduceParameters.

        Specifies whether the embedded files shall be removed from the PDF.  # noqa: E501

        :param remove_embedded_files: The remove_embedded_files of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_embedded_files = remove_embedded_files

    @property
    def remove_blank_pages(self):
        """Gets the remove_blank_pages of this PdfReduceParameters.  # noqa: E501

        Specifies whether the blank pages shall be removed.  # noqa: E501

        :return: The remove_blank_pages of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_blank_pages

    @remove_blank_pages.setter
    def remove_blank_pages(self, remove_blank_pages):
        """Sets the remove_blank_pages of this PdfReduceParameters.

        Specifies whether the blank pages shall be removed.  # noqa: E501

        :param remove_blank_pages: The remove_blank_pages of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_blank_pages = remove_blank_pages

    @property
    def remove_java_script(self):
        """Gets the remove_java_script of this PdfReduceParameters.  # noqa: E501

        Specifies whether the JavaScript shall be removed.  # noqa: E501

        :return: The remove_java_script of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_java_script

    @remove_java_script.setter
    def remove_java_script(self, remove_java_script):
        """Sets the remove_java_script of this PdfReduceParameters.

        Specifies whether the JavaScript shall be removed.  # noqa: E501

        :param remove_java_script: The remove_java_script of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_java_script = remove_java_script

    @property
    def enable_jpeg2000(self):
        """Gets the enable_jpeg2000 of this PdfReduceParameters.  # noqa: E501

        Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.  # noqa: E501

        :return: The enable_jpeg2000 of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_jpeg2000

    @enable_jpeg2000.setter
    def enable_jpeg2000(self, enable_jpeg2000):
        """Sets the enable_jpeg2000 of this PdfReduceParameters.

        Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.  # noqa: E501

        :param enable_jpeg2000: The enable_jpeg2000 of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._enable_jpeg2000 = enable_jpeg2000

    @property
    def enable_jbig2(self):
        """Gets the enable_jbig2 of this PdfReduceParameters.  # noqa: E501

        Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.  # noqa: E501

        :return: The enable_jbig2 of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_jbig2

    @enable_jbig2.setter
    def enable_jbig2(self, enable_jbig2):
        """Sets the enable_jbig2 of this PdfReduceParameters.

        Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.  # noqa: E501

        :param enable_jbig2: The enable_jbig2 of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._enable_jbig2 = enable_jbig2

    @property
    def enable_char_repair(self):
        """Gets the enable_char_repair of this PdfReduceParameters.  # noqa: E501

        Specifies whether characters repairing shall be performed during bitonal conversion.  # noqa: E501

        :return: The enable_char_repair of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_char_repair

    @enable_char_repair.setter
    def enable_char_repair(self, enable_char_repair):
        """Sets the enable_char_repair of this PdfReduceParameters.

        Specifies whether characters repairing shall be performed during bitonal conversion.  # noqa: E501

        :param enable_char_repair: The enable_char_repair of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._enable_char_repair = enable_char_repair

    @property
    def enable_mrc(self):
        """Gets the enable_mrc of this PdfReduceParameters.  # noqa: E501

        Specifies whether MRC shall be used for compressing the PDF contents.  # noqa: E501

        :return: The enable_mrc of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_mrc

    @enable_mrc.setter
    def enable_mrc(self, enable_mrc):
        """Sets the enable_mrc of this PdfReduceParameters.

        Specifies whether MRC shall be used for compressing the PDF contents.  # noqa: E501

        :param enable_mrc: The enable_mrc of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._enable_mrc = enable_mrc

    @property
    def preserve_smoothing(self):
        """Gets the preserve_smoothing of this PdfReduceParameters.  # noqa: E501

        Specifies if the MRC engine shall try to preserve smoothing between different layers.  # noqa: E501

        :return: The preserve_smoothing of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_smoothing

    @preserve_smoothing.setter
    def preserve_smoothing(self, preserve_smoothing):
        """Sets the preserve_smoothing of this PdfReduceParameters.

        Specifies if the MRC engine shall try to preserve smoothing between different layers.  # noqa: E501

        :param preserve_smoothing: The preserve_smoothing of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._preserve_smoothing = preserve_smoothing

    @property
    def downscale_resolution_mrc(self):
        """Gets the downscale_resolution_mrc of this PdfReduceParameters.  # noqa: E501

        Specifies the resolution for downscaling the background layer by the MRC engine, if any.  # noqa: E501

        :return: The downscale_resolution_mrc of this PdfReduceParameters.  # noqa: E501
        :rtype: int
        """
        return self._downscale_resolution_mrc

    @downscale_resolution_mrc.setter
    def downscale_resolution_mrc(self, downscale_resolution_mrc):
        """Sets the downscale_resolution_mrc of this PdfReduceParameters.

        Specifies the resolution for downscaling the background layer by the MRC engine, if any.  # noqa: E501

        :param downscale_resolution_mrc: The downscale_resolution_mrc of this PdfReduceParameters.  # noqa: E501
        :type: int
        """

        self._downscale_resolution_mrc = downscale_resolution_mrc

    @property
    def remove_metadata(self):
        """Gets the remove_metadata of this PdfReduceParameters.  # noqa: E501

        Specifies whether the metadata shall be removed.  # noqa: E501

        :return: The remove_metadata of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_metadata

    @remove_metadata.setter
    def remove_metadata(self, remove_metadata):
        """Sets the remove_metadata of this PdfReduceParameters.

        Specifies whether the metadata shall be removed.  # noqa: E501

        :param remove_metadata: The remove_metadata of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_metadata = remove_metadata

    @property
    def remove_page_thumbnails(self):
        """Gets the remove_page_thumbnails of this PdfReduceParameters.  # noqa: E501

        Specifies whether the page thumbnails shall be removed.  # noqa: E501

        :return: The remove_page_thumbnails of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_page_thumbnails

    @remove_page_thumbnails.setter
    def remove_page_thumbnails(self, remove_page_thumbnails):
        """Sets the remove_page_thumbnails of this PdfReduceParameters.

        Specifies whether the page thumbnails shall be removed.  # noqa: E501

        :param remove_page_thumbnails: The remove_page_thumbnails of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_page_thumbnails = remove_page_thumbnails

    @property
    def remove_page_piece_info(self):
        """Gets the remove_page_piece_info of this PdfReduceParameters.  # noqa: E501

        Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.  # noqa: E501

        :return: The remove_page_piece_info of this PdfReduceParameters.  # noqa: E501
        :rtype: bool
        """
        return self._remove_page_piece_info

    @remove_page_piece_info.setter
    def remove_page_piece_info(self, remove_page_piece_info):
        """Sets the remove_page_piece_info of this PdfReduceParameters.

        Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.  # noqa: E501

        :param remove_page_piece_info: The remove_page_piece_info of this PdfReduceParameters.  # noqa: E501
        :type: bool
        """

        self._remove_page_piece_info = remove_page_piece_info

    @property
    def jbig2_pms_threshold(self):
        """Gets the jbig2_pms_threshold of this PdfReduceParameters.  # noqa: E501

        Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.  # noqa: E501

        :return: The jbig2_pms_threshold of this PdfReduceParameters.  # noqa: E501
        :rtype: float
        """
        return self._jbig2_pms_threshold

    @jbig2_pms_threshold.setter
    def jbig2_pms_threshold(self, jbig2_pms_threshold):
        """Sets the jbig2_pms_threshold of this PdfReduceParameters.

        Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.  # noqa: E501

        :param jbig2_pms_threshold: The jbig2_pms_threshold of this PdfReduceParameters.  # noqa: E501
        :type: float
        """

        self._jbig2_pms_threshold = jbig2_pms_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfReduceParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfReduceParameters):
            return True

        return self.to_dict() != other.to_dict()
