# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfLoadDocumentFromByteArrayParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'content': 'str',
        'file_name': 'str',
        'password': 'str',
        'conformance': 'PdfConformance',
        'content_encoding': 'ContentEncoding',
        'enable_color_detection': 'bool',
        'get_preview': 'bool',
        'thumbnail_width': 'int',
        'thumbnail_height': 'int',
        'thumbnail_background_color': 'str',
        'thumbnail_fit_to_page_size': 'bool',
        'txt_page_width': 'float',
        'txt_page_height': 'float',
        'txt_page_margin_left': 'float',
        'txt_page_margin_top': 'float',
        'txt_page_margin_right': 'float',
        'txt_page_margin_bottom': 'float',
        'txt_horizontal_text_alignment': 'TextAlignment',
        'txt_font_size': 'float',
        'txt_font_family': 'str',
        'txt_font_bold': 'bool',
        'txt_font_italic': 'bool'
    }

    attribute_map = {
        'content': 'Content',
        'file_name': 'FileName',
        'password': 'Password',
        'conformance': 'Conformance',
        'content_encoding': 'ContentEncoding',
        'enable_color_detection': 'EnableColorDetection',
        'get_preview': 'GetPreview',
        'thumbnail_width': 'ThumbnailWidth',
        'thumbnail_height': 'ThumbnailHeight',
        'thumbnail_background_color': 'ThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size': 'ThumbnailFitToPageSize',
        'txt_page_width': 'TxtPageWidth',
        'txt_page_height': 'TxtPageHeight',
        'txt_page_margin_left': 'TxtPageMarginLeft',
        'txt_page_margin_top': 'TxtPageMarginTop',
        'txt_page_margin_right': 'TxtPageMarginRight',
        'txt_page_margin_bottom': 'TxtPageMarginBottom',
        'txt_horizontal_text_alignment': 'TxtHorizontalTextAlignment',
        'txt_font_size': 'TxtFontSize',
        'txt_font_family': 'TxtFontFamily',
        'txt_font_bold': 'TxtFontBold',
        'txt_font_italic': 'TxtFontItalic'
    }

    def __init__(self, content=None, file_name=None, password=None, conformance=None, content_encoding=None, enable_color_detection=False, get_preview=False, thumbnail_width=140, thumbnail_height=220, thumbnail_background_color='rgba(0,0,0,0)', thumbnail_fit_to_page_size=True, txt_page_width=595, txt_page_height=842, txt_page_margin_left=10, txt_page_margin_top=10, txt_page_margin_right=10, txt_page_margin_bottom=10, txt_horizontal_text_alignment=None, txt_font_size=12, txt_font_family='Arial Unicode MS', txt_font_bold=False, txt_font_italic=False, local_vars_configuration=None):  # noqa: E501
        """PdfLoadDocumentFromByteArrayParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._content = None
        self._file_name = None
        self._password = None
        self._conformance = None
        self._content_encoding = None
        self._enable_color_detection = None
        self._get_preview = None
        self._thumbnail_width = None
        self._thumbnail_height = None
        self._thumbnail_background_color = None
        self._thumbnail_fit_to_page_size = None
        self._txt_page_width = None
        self._txt_page_height = None
        self._txt_page_margin_left = None
        self._txt_page_margin_top = None
        self._txt_page_margin_right = None
        self._txt_page_margin_bottom = None
        self._txt_horizontal_text_alignment = None
        self._txt_font_size = None
        self._txt_font_family = None
        self._txt_font_bold = None
        self._txt_font_italic = None
        self.discriminator = None

        self.content = content
        self.file_name = file_name
        self.password = password
        if conformance is not None:
            self.conformance = conformance
        if content_encoding is not None:
            self.content_encoding = content_encoding
        if enable_color_detection is not None:
            self.enable_color_detection = enable_color_detection
        if get_preview is not None:
            self.get_preview = get_preview
        if thumbnail_width is not None:
            self.thumbnail_width = thumbnail_width
        if thumbnail_height is not None:
            self.thumbnail_height = thumbnail_height
        self.thumbnail_background_color = thumbnail_background_color
        if thumbnail_fit_to_page_size is not None:
            self.thumbnail_fit_to_page_size = thumbnail_fit_to_page_size
        if txt_page_width is not None:
            self.txt_page_width = txt_page_width
        if txt_page_height is not None:
            self.txt_page_height = txt_page_height
        if txt_page_margin_left is not None:
            self.txt_page_margin_left = txt_page_margin_left
        if txt_page_margin_top is not None:
            self.txt_page_margin_top = txt_page_margin_top
        if txt_page_margin_right is not None:
            self.txt_page_margin_right = txt_page_margin_right
        if txt_page_margin_bottom is not None:
            self.txt_page_margin_bottom = txt_page_margin_bottom
        if txt_horizontal_text_alignment is not None:
            self.txt_horizontal_text_alignment = txt_horizontal_text_alignment
        if txt_font_size is not None:
            self.txt_font_size = txt_font_size
        self.txt_font_family = txt_font_family
        if txt_font_bold is not None:
            self.txt_font_bold = txt_font_bold
        if txt_font_italic is not None:
            self.txt_font_italic = txt_font_italic

    @property
    def content(self):
        """Gets the content of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the data of the document.  # noqa: E501

        :return: The content of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the data of the document.  # noqa: E501

        :param content: The content of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and content is None:  # noqa: E501
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def file_name(self):
        """Gets the file_name of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the name of the document.  # noqa: E501

        :return: The file_name of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the name of the document.  # noqa: E501

        :param file_name: The file_name of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def password(self):
        """Gets the password of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the password of the document.  # noqa: E501

        :return: The password of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the password of the document.  # noqa: E501

        :param password: The password of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def conformance(self):
        """Gets the conformance of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501


        :return: The conformance of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: PdfConformance
        """
        return self._conformance

    @conformance.setter
    def conformance(self, conformance):
        """Sets the conformance of this PdfLoadDocumentFromByteArrayParameters.


        :param conformance: The conformance of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: PdfConformance
        """

        self._conformance = conformance

    @property
    def content_encoding(self):
        """Gets the content_encoding of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501


        :return: The content_encoding of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: ContentEncoding
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this PdfLoadDocumentFromByteArrayParameters.


        :param content_encoding: The content_encoding of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: ContentEncoding
        """

        self._content_encoding = content_encoding

    @property
    def enable_color_detection(self):
        """Gets the enable_color_detection of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies whether color detection must be used while importing a raster format to PDF.  # noqa: E501

        :return: The enable_color_detection of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enable_color_detection

    @enable_color_detection.setter
    def enable_color_detection(self, enable_color_detection):
        """Sets the enable_color_detection of this PdfLoadDocumentFromByteArrayParameters.

        Specifies whether color detection must be used while importing a raster format to PDF.  # noqa: E501

        :param enable_color_detection: The enable_color_detection of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._enable_color_detection = enable_color_detection

    @property
    def get_preview(self):
        """Gets the get_preview of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies whether the response must contain a thumbnail of the first page of the document.  # noqa: E501

        :return: The get_preview of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._get_preview

    @get_preview.setter
    def get_preview(self, get_preview):
        """Sets the get_preview of this PdfLoadDocumentFromByteArrayParameters.

        Specifies whether the response must contain a thumbnail of the first page of the document.  # noqa: E501

        :param get_preview: The get_preview of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._get_preview = get_preview

    @property
    def thumbnail_width(self):
        """Gets the thumbnail_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_width

    @thumbnail_width.setter
    def thumbnail_width(self, thumbnail_width):
        """Sets the thumbnail_width of this PdfLoadDocumentFromByteArrayParameters.

        Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_width: The thumbnail_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: int
        """

        self._thumbnail_width = thumbnail_width

    @property
    def thumbnail_height(self):
        """Gets the thumbnail_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_height

    @thumbnail_height.setter
    def thumbnail_height(self, thumbnail_height):
        """Sets the thumbnail_height of this PdfLoadDocumentFromByteArrayParameters.

        Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_height: The thumbnail_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: int
        """

        self._thumbnail_height = thumbnail_height

    @property
    def thumbnail_background_color(self):
        """Gets the thumbnail_background_color of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_background_color of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_background_color

    @thumbnail_background_color.setter
    def thumbnail_background_color(self, thumbnail_background_color):
        """Sets the thumbnail_background_color of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_background_color: The thumbnail_background_color of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._thumbnail_background_color = thumbnail_background_color

    @property
    def thumbnail_fit_to_page_size(self):
        """Gets the thumbnail_fit_to_page_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :return: The thumbnail_fit_to_page_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._thumbnail_fit_to_page_size

    @thumbnail_fit_to_page_size.setter
    def thumbnail_fit_to_page_size(self, thumbnail_fit_to_page_size):
        """Sets the thumbnail_fit_to_page_size of this PdfLoadDocumentFromByteArrayParameters.

        Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.  # noqa: E501

        :param thumbnail_fit_to_page_size: The thumbnail_fit_to_page_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._thumbnail_fit_to_page_size = thumbnail_fit_to_page_size

    @property
    def txt_page_width(self):
        """Gets the txt_page_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page width, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_width

    @txt_page_width.setter
    def txt_page_width(self, txt_page_width):
        """Sets the txt_page_width of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page width, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_width: The txt_page_width of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_width = txt_page_width

    @property
    def txt_page_height(self):
        """Gets the txt_page_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page height, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_height

    @txt_page_height.setter
    def txt_page_height(self, txt_page_height):
        """Sets the txt_page_height of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page height, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_height: The txt_page_height of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_height = txt_page_height

    @property
    def txt_page_margin_left(self):
        """Gets the txt_page_margin_left of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page margin left, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_margin_left of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_margin_left

    @txt_page_margin_left.setter
    def txt_page_margin_left(self, txt_page_margin_left):
        """Sets the txt_page_margin_left of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page margin left, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_margin_left: The txt_page_margin_left of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_margin_left = txt_page_margin_left

    @property
    def txt_page_margin_top(self):
        """Gets the txt_page_margin_top of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page margin top, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_margin_top of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_margin_top

    @txt_page_margin_top.setter
    def txt_page_margin_top(self, txt_page_margin_top):
        """Sets the txt_page_margin_top of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page margin top, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_margin_top: The txt_page_margin_top of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_margin_top = txt_page_margin_top

    @property
    def txt_page_margin_right(self):
        """Gets the txt_page_margin_right of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page margin right, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_margin_right of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_margin_right

    @txt_page_margin_right.setter
    def txt_page_margin_right(self, txt_page_margin_right):
        """Sets the txt_page_margin_right of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page margin right, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_margin_right: The txt_page_margin_right of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_margin_right = txt_page_margin_right

    @property
    def txt_page_margin_bottom(self):
        """Gets the txt_page_margin_bottom of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the page margin bottom, in points, of produced documents from txt files.  # noqa: E501

        :return: The txt_page_margin_bottom of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_page_margin_bottom

    @txt_page_margin_bottom.setter
    def txt_page_margin_bottom(self, txt_page_margin_bottom):
        """Sets the txt_page_margin_bottom of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the page margin bottom, in points, of produced documents from txt files.  # noqa: E501

        :param txt_page_margin_bottom: The txt_page_margin_bottom of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_page_margin_bottom = txt_page_margin_bottom

    @property
    def txt_horizontal_text_alignment(self):
        """Gets the txt_horizontal_text_alignment of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501


        :return: The txt_horizontal_text_alignment of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: TextAlignment
        """
        return self._txt_horizontal_text_alignment

    @txt_horizontal_text_alignment.setter
    def txt_horizontal_text_alignment(self, txt_horizontal_text_alignment):
        """Sets the txt_horizontal_text_alignment of this PdfLoadDocumentFromByteArrayParameters.


        :param txt_horizontal_text_alignment: The txt_horizontal_text_alignment of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: TextAlignment
        """

        self._txt_horizontal_text_alignment = txt_horizontal_text_alignment

    @property
    def txt_font_size(self):
        """Gets the txt_font_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the text size, in points, to be used for producing documents from txt files.  # noqa: E501

        :return: The txt_font_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: float
        """
        return self._txt_font_size

    @txt_font_size.setter
    def txt_font_size(self, txt_font_size):
        """Sets the txt_font_size of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the text size, in points, to be used for producing documents from txt files.  # noqa: E501

        :param txt_font_size: The txt_font_size of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: float
        """

        self._txt_font_size = txt_font_size

    @property
    def txt_font_family(self):
        """Gets the txt_font_family of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies the name of the font to be used for producing documents from txt files.  # noqa: E501

        :return: The txt_font_family of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: str
        """
        return self._txt_font_family

    @txt_font_family.setter
    def txt_font_family(self, txt_font_family):
        """Sets the txt_font_family of this PdfLoadDocumentFromByteArrayParameters.

        Specifies the name of the font to be used for producing documents from txt files.  # noqa: E501

        :param txt_font_family: The txt_font_family of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: str
        """

        self._txt_font_family = txt_font_family

    @property
    def txt_font_bold(self):
        """Gets the txt_font_bold of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies whether the font to be used for producing documents from txt files must have a bold style.  # noqa: E501

        :return: The txt_font_bold of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._txt_font_bold

    @txt_font_bold.setter
    def txt_font_bold(self, txt_font_bold):
        """Sets the txt_font_bold of this PdfLoadDocumentFromByteArrayParameters.

        Specifies whether the font to be used for producing documents from txt files must have a bold style.  # noqa: E501

        :param txt_font_bold: The txt_font_bold of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._txt_font_bold = txt_font_bold

    @property
    def txt_font_italic(self):
        """Gets the txt_font_italic of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501

        Specifies whether the font to be used for producing documents from txt files must have an italic style.  # noqa: E501

        :return: The txt_font_italic of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :rtype: bool
        """
        return self._txt_font_italic

    @txt_font_italic.setter
    def txt_font_italic(self, txt_font_italic):
        """Sets the txt_font_italic of this PdfLoadDocumentFromByteArrayParameters.

        Specifies whether the font to be used for producing documents from txt files must have an italic style.  # noqa: E501

        :param txt_font_italic: The txt_font_italic of this PdfLoadDocumentFromByteArrayParameters.  # noqa: E501
        :type: bool
        """

        self._txt_font_italic = txt_font_italic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfLoadDocumentFromByteArrayParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfLoadDocumentFromByteArrayParameters):
            return True

        return self.to_dict() != other.to_dict()
