# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DocuViewareSaveParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'session_id': 'str',
        'control_id': 'str',
        'file_name': 'str',
        'format': 'str',
        'page_range': 'str'
    }

    attribute_map = {
        'session_id': 'SessionId',
        'control_id': 'ControlId',
        'file_name': 'FileName',
        'format': 'Format',
        'page_range': 'PageRange'
    }

    def __init__(self, session_id=None, control_id=None, file_name=None, format=None, page_range='*', local_vars_configuration=None):  # noqa: E501
        """DocuViewareSaveParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._session_id = None
        self._control_id = None
        self._file_name = None
        self._format = None
        self._page_range = None
        self.discriminator = None

        self.session_id = session_id
        self.control_id = control_id
        self.file_name = file_name
        self.format = format
        self.page_range = page_range

    @property
    def session_id(self):
        """Gets the session_id of this DocuViewareSaveParameters.  # noqa: E501

        Specifies the unique identifier used to identify the user session.  # noqa: E501

        :return: The session_id of this DocuViewareSaveParameters.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this DocuViewareSaveParameters.

        Specifies the unique identifier used to identify the user session.  # noqa: E501

        :param session_id: The session_id of this DocuViewareSaveParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and session_id is None:  # noqa: E501
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def control_id(self):
        """Gets the control_id of this DocuViewareSaveParameters.  # noqa: E501

        Specifies the identifier associated with the control.  # noqa: E501

        :return: The control_id of this DocuViewareSaveParameters.  # noqa: E501
        :rtype: str
        """
        return self._control_id

    @control_id.setter
    def control_id(self, control_id):
        """Sets the control_id of this DocuViewareSaveParameters.

        Specifies the identifier associated with the control.  # noqa: E501

        :param control_id: The control_id of this DocuViewareSaveParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and control_id is None:  # noqa: E501
            raise ValueError("Invalid value for `control_id`, must not be `None`")  # noqa: E501

        self._control_id = control_id

    @property
    def file_name(self):
        """Gets the file_name of this DocuViewareSaveParameters.  # noqa: E501

        Specifies the name of the file to create.  # noqa: E501

        :return: The file_name of this DocuViewareSaveParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DocuViewareSaveParameters.

        Specifies the name of the file to create.  # noqa: E501

        :param file_name: The file_name of this DocuViewareSaveParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_name is None:  # noqa: E501
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def format(self):
        """Gets the format of this DocuViewareSaveParameters.  # noqa: E501

        Specifies the format of the document to save.  Supported values are tiff, pdf, pdf/a, pdf/a1a, pdf/a1b, pdf/a2a, pdf/a2b, pdf/a2u, pdf/a3a, pdf/a3b, pdf/a3u.  # noqa: E501

        :return: The format of this DocuViewareSaveParameters.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DocuViewareSaveParameters.

        Specifies the format of the document to save.  Supported values are tiff, pdf, pdf/a, pdf/a1a, pdf/a1b, pdf/a2a, pdf/a2b, pdf/a2u, pdf/a3a, pdf/a3b, pdf/a3u.  # noqa: E501

        :param format: The format of this DocuViewareSaveParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and format is None:  # noqa: E501
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def page_range(self):
        """Gets the page_range of this DocuViewareSaveParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to be saved into the new file.  # noqa: E501

        :return: The page_range of this DocuViewareSaveParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this DocuViewareSaveParameters.

        Specifies the number of the page, or the range of pages to be saved into the new file.  # noqa: E501

        :param page_range: The page_range of this DocuViewareSaveParameters.  # noqa: E501
        :type: str
        """

        self._page_range = page_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocuViewareSaveParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DocuViewareSaveParameters):
            return True

        return self.to_dict() != other.to_dict()
