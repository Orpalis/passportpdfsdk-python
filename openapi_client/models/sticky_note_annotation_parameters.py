# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class StickyNoteAnnotationParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotation_layout': 'DrawableContentLayoutParameters',
        'sticky_note_icon': 'StickyNoteAnnotationIcon',
        'author': 'str',
        'subject': 'str',
        'content': 'str',
        'open_popup': 'bool',
        'color': 'str'
    }

    attribute_map = {
        'annotation_layout': 'AnnotationLayout',
        'sticky_note_icon': 'StickyNoteIcon',
        'author': 'Author',
        'subject': 'Subject',
        'content': 'Content',
        'open_popup': 'OpenPopup',
        'color': 'Color'
    }

    def __init__(self, annotation_layout=None, sticky_note_icon=None, author=None, subject=None, content=None, open_popup=None, color='red', local_vars_configuration=None):  # noqa: E501
        """StickyNoteAnnotationParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotation_layout = None
        self._sticky_note_icon = None
        self._author = None
        self._subject = None
        self._content = None
        self._open_popup = None
        self._color = None
        self.discriminator = None

        self.annotation_layout = annotation_layout
        if sticky_note_icon is not None:
            self.sticky_note_icon = sticky_note_icon
        self.author = author
        self.subject = subject
        self.content = content
        if open_popup is not None:
            self.open_popup = open_popup
        self.color = color

    @property
    def annotation_layout(self):
        """Gets the annotation_layout of this StickyNoteAnnotationParameters.  # noqa: E501


        :return: The annotation_layout of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: DrawableContentLayoutParameters
        """
        return self._annotation_layout

    @annotation_layout.setter
    def annotation_layout(self, annotation_layout):
        """Sets the annotation_layout of this StickyNoteAnnotationParameters.


        :param annotation_layout: The annotation_layout of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: DrawableContentLayoutParameters
        """
        if self.local_vars_configuration.client_side_validation and annotation_layout is None:  # noqa: E501
            raise ValueError("Invalid value for `annotation_layout`, must not be `None`")  # noqa: E501

        self._annotation_layout = annotation_layout

    @property
    def sticky_note_icon(self):
        """Gets the sticky_note_icon of this StickyNoteAnnotationParameters.  # noqa: E501


        :return: The sticky_note_icon of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: StickyNoteAnnotationIcon
        """
        return self._sticky_note_icon

    @sticky_note_icon.setter
    def sticky_note_icon(self, sticky_note_icon):
        """Sets the sticky_note_icon of this StickyNoteAnnotationParameters.


        :param sticky_note_icon: The sticky_note_icon of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: StickyNoteAnnotationIcon
        """

        self._sticky_note_icon = sticky_note_icon

    @property
    def author(self):
        """Gets the author of this StickyNoteAnnotationParameters.  # noqa: E501

        Specify the author of the annotation, if any.  # noqa: E501

        :return: The author of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this StickyNoteAnnotationParameters.

        Specify the author of the annotation, if any.  # noqa: E501

        :param author: The author of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def subject(self):
        """Gets the subject of this StickyNoteAnnotationParameters.  # noqa: E501

        Specify the subject of the annotation, if any.  # noqa: E501

        :return: The subject of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this StickyNoteAnnotationParameters.

        Specify the subject of the annotation, if any.  # noqa: E501

        :param subject: The subject of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def content(self):
        """Gets the content of this StickyNoteAnnotationParameters.  # noqa: E501

        Specify the content of the annotation, if any.  # noqa: E501

        :return: The content of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this StickyNoteAnnotationParameters.

        Specify the content of the annotation, if any.  # noqa: E501

        :param content: The content of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def open_popup(self):
        """Gets the open_popup of this StickyNoteAnnotationParameters.  # noqa: E501

        Specifies if the popup of annotation shall be opened by default.  # noqa: E501

        :return: The open_popup of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: bool
        """
        return self._open_popup

    @open_popup.setter
    def open_popup(self, open_popup):
        """Sets the open_popup of this StickyNoteAnnotationParameters.

        Specifies if the popup of annotation shall be opened by default.  # noqa: E501

        :param open_popup: The open_popup of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: bool
        """

        self._open_popup = open_popup

    @property
    def color(self):
        """Gets the color of this StickyNoteAnnotationParameters.  # noqa: E501

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :return: The color of this StickyNoteAnnotationParameters.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this StickyNoteAnnotationParameters.

        Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").  # noqa: E501

        :param color: The color of this StickyNoteAnnotationParameters.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StickyNoteAnnotationParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StickyNoteAnnotationParameters):
            return True

        return self.to_dict() != other.to_dict()
