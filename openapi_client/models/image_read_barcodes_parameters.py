# coding: utf-8

"""
    PassportPDF API

          Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.    # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageReadBarcodesParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'roi_left': 'int',
        'roi_top': 'int',
        'roi_width': 'int',
        'roi_height': 'int',
        'scan_mode': 'ScanMode',
        'scan_barcode1_d': 'bool',
        'scan_barcode_qr': 'bool',
        'scan_barcode_micro_qr': 'bool',
        'scan_barcode_pdf417': 'bool',
        'scan_barcode_data_matrix': 'bool',
        'scan_barcode_aztec': 'bool'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'roi_left': 'RoiLeft',
        'roi_top': 'RoiTop',
        'roi_width': 'RoiWidth',
        'roi_height': 'RoiHeight',
        'scan_mode': 'ScanMode',
        'scan_barcode1_d': 'ScanBarcode1D',
        'scan_barcode_qr': 'ScanBarcodeQR',
        'scan_barcode_micro_qr': 'ScanBarcodeMicroQR',
        'scan_barcode_pdf417': 'ScanBarcodePDF417',
        'scan_barcode_data_matrix': 'ScanBarcodeDataMatrix',
        'scan_barcode_aztec': 'ScanBarcodeAztec'
    }

    def __init__(self, file_id=None, page_range=None, roi_left=0, roi_top=0, roi_width=0, roi_height=0, scan_mode=None, scan_barcode1_d=True, scan_barcode_qr=True, scan_barcode_micro_qr=True, scan_barcode_pdf417=True, scan_barcode_data_matrix=True, scan_barcode_aztec=True, local_vars_configuration=None):  # noqa: E501
        """ImageReadBarcodesParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._roi_left = None
        self._roi_top = None
        self._roi_width = None
        self._roi_height = None
        self._scan_mode = None
        self._scan_barcode1_d = None
        self._scan_barcode_qr = None
        self._scan_barcode_micro_qr = None
        self._scan_barcode_pdf417 = None
        self._scan_barcode_data_matrix = None
        self._scan_barcode_aztec = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        if roi_left is not None:
            self.roi_left = roi_left
        if roi_top is not None:
            self.roi_top = roi_top
        if roi_width is not None:
            self.roi_width = roi_width
        if roi_height is not None:
            self.roi_height = roi_height
        if scan_mode is not None:
            self.scan_mode = scan_mode
        if scan_barcode1_d is not None:
            self.scan_barcode1_d = scan_barcode1_d
        if scan_barcode_qr is not None:
            self.scan_barcode_qr = scan_barcode_qr
        if scan_barcode_micro_qr is not None:
            self.scan_barcode_micro_qr = scan_barcode_micro_qr
        if scan_barcode_pdf417 is not None:
            self.scan_barcode_pdf417 = scan_barcode_pdf417
        if scan_barcode_data_matrix is not None:
            self.scan_barcode_data_matrix = scan_barcode_data_matrix
        if scan_barcode_aztec is not None:
            self.scan_barcode_aztec = scan_barcode_aztec

    @property
    def file_id(self):
        """Gets the file_id of this ImageReadBarcodesParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageReadBarcodesParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageReadBarcodesParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to read the barcodes from.  # noqa: E501

        :return: The page_range of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageReadBarcodesParameters.

        Specifies the number of the page, or the range of pages to read the barcodes from.  # noqa: E501

        :param page_range: The page_range of this ImageReadBarcodesParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def roi_left(self):
        """Gets the roi_left of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_left of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_left

    @roi_left.setter
    def roi_left(self, roi_left):
        """Sets the roi_left of this ImageReadBarcodesParameters.

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_left: The roi_left of this ImageReadBarcodesParameters.  # noqa: E501
        :type: int
        """

        self._roi_left = roi_left

    @property
    def roi_top(self):
        """Gets the roi_top of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_top of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_top

    @roi_top.setter
    def roi_top(self, roi_top):
        """Sets the roi_top of this ImageReadBarcodesParameters.

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_top: The roi_top of this ImageReadBarcodesParameters.  # noqa: E501
        :type: int
        """

        self._roi_top = roi_top

    @property
    def roi_width(self):
        """Gets the roi_width of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_width of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_width

    @roi_width.setter
    def roi_width(self, roi_width):
        """Sets the roi_width of this ImageReadBarcodesParameters.

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_width: The roi_width of this ImageReadBarcodesParameters.  # noqa: E501
        :type: int
        """

        self._roi_width = roi_width

    @property
    def roi_height(self):
        """Gets the roi_height of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_height of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_height

    @roi_height.setter
    def roi_height(self, roi_height):
        """Sets the roi_height of this ImageReadBarcodesParameters.

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_height: The roi_height of this ImageReadBarcodesParameters.  # noqa: E501
        :type: int
        """

        self._roi_height = roi_height

    @property
    def scan_mode(self):
        """Gets the scan_mode of this ImageReadBarcodesParameters.  # noqa: E501


        :return: The scan_mode of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: ScanMode
        """
        return self._scan_mode

    @scan_mode.setter
    def scan_mode(self, scan_mode):
        """Sets the scan_mode of this ImageReadBarcodesParameters.


        :param scan_mode: The scan_mode of this ImageReadBarcodesParameters.  # noqa: E501
        :type: ScanMode
        """

        self._scan_mode = scan_mode

    @property
    def scan_barcode1_d(self):
        """Gets the scan_barcode1_d of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type 1D shall be read.  # noqa: E501

        :return: The scan_barcode1_d of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode1_d

    @scan_barcode1_d.setter
    def scan_barcode1_d(self, scan_barcode1_d):
        """Sets the scan_barcode1_d of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type 1D shall be read.  # noqa: E501

        :param scan_barcode1_d: The scan_barcode1_d of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode1_d = scan_barcode1_d

    @property
    def scan_barcode_qr(self):
        """Gets the scan_barcode_qr of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type QR shall be read.  # noqa: E501

        :return: The scan_barcode_qr of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode_qr

    @scan_barcode_qr.setter
    def scan_barcode_qr(self, scan_barcode_qr):
        """Sets the scan_barcode_qr of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type QR shall be read.  # noqa: E501

        :param scan_barcode_qr: The scan_barcode_qr of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode_qr = scan_barcode_qr

    @property
    def scan_barcode_micro_qr(self):
        """Gets the scan_barcode_micro_qr of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type Micro QR shall be read.  # noqa: E501

        :return: The scan_barcode_micro_qr of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode_micro_qr

    @scan_barcode_micro_qr.setter
    def scan_barcode_micro_qr(self, scan_barcode_micro_qr):
        """Sets the scan_barcode_micro_qr of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type Micro QR shall be read.  # noqa: E501

        :param scan_barcode_micro_qr: The scan_barcode_micro_qr of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode_micro_qr = scan_barcode_micro_qr

    @property
    def scan_barcode_pdf417(self):
        """Gets the scan_barcode_pdf417 of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type PDF 147 shall be read.  # noqa: E501

        :return: The scan_barcode_pdf417 of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode_pdf417

    @scan_barcode_pdf417.setter
    def scan_barcode_pdf417(self, scan_barcode_pdf417):
        """Sets the scan_barcode_pdf417 of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type PDF 147 shall be read.  # noqa: E501

        :param scan_barcode_pdf417: The scan_barcode_pdf417 of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode_pdf417 = scan_barcode_pdf417

    @property
    def scan_barcode_data_matrix(self):
        """Gets the scan_barcode_data_matrix of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type Data Matrix shall be read.  # noqa: E501

        :return: The scan_barcode_data_matrix of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode_data_matrix

    @scan_barcode_data_matrix.setter
    def scan_barcode_data_matrix(self, scan_barcode_data_matrix):
        """Sets the scan_barcode_data_matrix of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type Data Matrix shall be read.  # noqa: E501

        :param scan_barcode_data_matrix: The scan_barcode_data_matrix of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode_data_matrix = scan_barcode_data_matrix

    @property
    def scan_barcode_aztec(self):
        """Gets the scan_barcode_aztec of this ImageReadBarcodesParameters.  # noqa: E501

        Specifies whether the barcodes of type Aztec shall be read.  # noqa: E501

        :return: The scan_barcode_aztec of this ImageReadBarcodesParameters.  # noqa: E501
        :rtype: bool
        """
        return self._scan_barcode_aztec

    @scan_barcode_aztec.setter
    def scan_barcode_aztec(self, scan_barcode_aztec):
        """Sets the scan_barcode_aztec of this ImageReadBarcodesParameters.

        Specifies whether the barcodes of type Aztec shall be read.  # noqa: E501

        :param scan_barcode_aztec: The scan_barcode_aztec of this ImageReadBarcodesParameters.  # noqa: E501
        :type: bool
        """

        self._scan_barcode_aztec = scan_barcode_aztec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageReadBarcodesParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageReadBarcodesParameters):
            return True

        return self.to_dict() != other.to_dict()
