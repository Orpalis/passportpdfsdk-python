# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfReduceResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error': 'Error',
        'remaining_tokens': 'int',
        'error_info': 'ReduceErrorInfo',
        'warnings_info': 'list[ReduceWarningInfo]',
        'content_removed': 'bool',
        'version_changed': 'bool',
        'new_file_size': 'int'
    }

    attribute_map = {
        'error': 'Error',
        'remaining_tokens': 'RemainingTokens',
        'error_info': 'ErrorInfo',
        'warnings_info': 'WarningsInfo',
        'content_removed': 'ContentRemoved',
        'version_changed': 'VersionChanged',
        'new_file_size': 'NewFileSize'
    }

    def __init__(self, error=None, remaining_tokens=None, error_info=None, warnings_info=None, content_removed=None, version_changed=None, new_file_size=None, local_vars_configuration=None):  # noqa: E501
        """PdfReduceResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error = None
        self._remaining_tokens = None
        self._error_info = None
        self._warnings_info = None
        self._content_removed = None
        self._version_changed = None
        self._new_file_size = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if remaining_tokens is not None:
            self.remaining_tokens = remaining_tokens
        if error_info is not None:
            self.error_info = error_info
        self.warnings_info = warnings_info
        if content_removed is not None:
            self.content_removed = content_removed
        if version_changed is not None:
            self.version_changed = version_changed
        if new_file_size is not None:
            self.new_file_size = new_file_size

    @property
    def error(self):
        """Gets the error of this PdfReduceResponse.  # noqa: E501


        :return: The error of this PdfReduceResponse.  # noqa: E501
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PdfReduceResponse.


        :param error: The error of this PdfReduceResponse.  # noqa: E501
        :type: Error
        """

        self._error = error

    @property
    def remaining_tokens(self):
        """Gets the remaining_tokens of this PdfReduceResponse.  # noqa: E501

        Specifies the number of remaining tokens.  # noqa: E501

        :return: The remaining_tokens of this PdfReduceResponse.  # noqa: E501
        :rtype: int
        """
        return self._remaining_tokens

    @remaining_tokens.setter
    def remaining_tokens(self, remaining_tokens):
        """Sets the remaining_tokens of this PdfReduceResponse.

        Specifies the number of remaining tokens.  # noqa: E501

        :param remaining_tokens: The remaining_tokens of this PdfReduceResponse.  # noqa: E501
        :type: int
        """

        self._remaining_tokens = remaining_tokens

    @property
    def error_info(self):
        """Gets the error_info of this PdfReduceResponse.  # noqa: E501


        :return: The error_info of this PdfReduceResponse.  # noqa: E501
        :rtype: ReduceErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this PdfReduceResponse.


        :param error_info: The error_info of this PdfReduceResponse.  # noqa: E501
        :type: ReduceErrorInfo
        """

        self._error_info = error_info

    @property
    def warnings_info(self):
        """Gets the warnings_info of this PdfReduceResponse.  # noqa: E501

        Specifies the different warnings that occured during the process of the reduce action.  # noqa: E501

        :return: The warnings_info of this PdfReduceResponse.  # noqa: E501
        :rtype: list[ReduceWarningInfo]
        """
        return self._warnings_info

    @warnings_info.setter
    def warnings_info(self, warnings_info):
        """Sets the warnings_info of this PdfReduceResponse.

        Specifies the different warnings that occured during the process of the reduce action.  # noqa: E501

        :param warnings_info: The warnings_info of this PdfReduceResponse.  # noqa: E501
        :type: list[ReduceWarningInfo]
        """

        self._warnings_info = warnings_info

    @property
    def content_removed(self):
        """Gets the content_removed of this PdfReduceResponse.  # noqa: E501

        Specifies whether content has been removed from the PDF during the process of the reduce action.  # noqa: E501

        :return: The content_removed of this PdfReduceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._content_removed

    @content_removed.setter
    def content_removed(self, content_removed):
        """Sets the content_removed of this PdfReduceResponse.

        Specifies whether content has been removed from the PDF during the process of the reduce action.  # noqa: E501

        :param content_removed: The content_removed of this PdfReduceResponse.  # noqa: E501
        :type: bool
        """

        self._content_removed = content_removed

    @property
    def version_changed(self):
        """Gets the version_changed of this PdfReduceResponse.  # noqa: E501

        Specifies whether the version of the PDF has changed during the process of the reduce action.  # noqa: E501

        :return: The version_changed of this PdfReduceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._version_changed

    @version_changed.setter
    def version_changed(self, version_changed):
        """Sets the version_changed of this PdfReduceResponse.

        Specifies whether the version of the PDF has changed during the process of the reduce action.  # noqa: E501

        :param version_changed: The version_changed of this PdfReduceResponse.  # noqa: E501
        :type: bool
        """

        self._version_changed = version_changed

    @property
    def new_file_size(self):
        """Gets the new_file_size of this PdfReduceResponse.  # noqa: E501

        Specify the size of the new created document.  # noqa: E501

        :return: The new_file_size of this PdfReduceResponse.  # noqa: E501
        :rtype: int
        """
        return self._new_file_size

    @new_file_size.setter
    def new_file_size(self, new_file_size):
        """Sets the new_file_size of this PdfReduceResponse.

        Specify the size of the new created document.  # noqa: E501

        :param new_file_size: The new_file_size of this PdfReduceResponse.  # noqa: E501
        :type: int
        """

        self._new_file_size = new_file_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfReduceResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfReduceResponse):
            return True

        return self.to_dict() != other.to_dict()
