# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfMovePageParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'source_page_range': 'str',
        'destination_page': 'int'
    }

    attribute_map = {
        'file_id': 'FileId',
        'source_page_range': 'SourcePageRange',
        'destination_page': 'DestinationPage'
    }

    def __init__(self, file_id=None, source_page_range=None, destination_page=None, local_vars_configuration=None):  # noqa: E501
        """PdfMovePageParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._source_page_range = None
        self._destination_page = None
        self.discriminator = None

        self.file_id = file_id
        self.source_page_range = source_page_range
        self.destination_page = destination_page

    @property
    def file_id(self):
        """Gets the file_id of this PdfMovePageParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfMovePageParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfMovePageParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfMovePageParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def source_page_range(self):
        """Gets the source_page_range of this PdfMovePageParameters.  # noqa: E501

        Specifies the number of the page, or the range of pages to be moved.  # noqa: E501

        :return: The source_page_range of this PdfMovePageParameters.  # noqa: E501
        :rtype: str
        """
        return self._source_page_range

    @source_page_range.setter
    def source_page_range(self, source_page_range):
        """Sets the source_page_range of this PdfMovePageParameters.

        Specifies the number of the page, or the range of pages to be moved.  # noqa: E501

        :param source_page_range: The source_page_range of this PdfMovePageParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `source_page_range`, must not be `None`")  # noqa: E501

        self._source_page_range = source_page_range

    @property
    def destination_page(self):
        """Gets the destination_page of this PdfMovePageParameters.  # noqa: E501

        Specifies the number of the destination page.  # noqa: E501

        :return: The destination_page of this PdfMovePageParameters.  # noqa: E501
        :rtype: int
        """
        return self._destination_page

    @destination_page.setter
    def destination_page(self, destination_page):
        """Sets the destination_page of this PdfMovePageParameters.

        Specifies the number of the destination page.  # noqa: E501

        :param destination_page: The destination_page of this PdfMovePageParameters.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and destination_page is None:  # noqa: E501
            raise ValueError("Invalid value for `destination_page`, must not be `None`")  # noqa: E501

        self._destination_page = destination_page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfMovePageParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfMovePageParameters):
            return True

        return self.to_dict() != other.to_dict()
