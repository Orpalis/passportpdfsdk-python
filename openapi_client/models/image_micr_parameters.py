# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ImageMICRParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'font': 'MicrFont',
        'context': 'MicrContext',
        'white_list': 'str',
        'roi_left': 'int',
        'roi_top': 'int',
        'roi_width': 'int',
        'roi_height': 'int',
        'expected_symbols_count': 'int'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'font': 'Font',
        'context': 'Context',
        'white_list': 'WhiteList',
        'roi_left': 'RoiLeft',
        'roi_top': 'RoiTop',
        'roi_width': 'RoiWidth',
        'roi_height': 'RoiHeight',
        'expected_symbols_count': 'ExpectedSymbolsCount'
    }

    def __init__(self, file_id=None, page_range=None, font=None, context=None, white_list='', roi_left=0, roi_top=0, roi_width=0, roi_height=0, expected_symbols_count=0, local_vars_configuration=None):  # noqa: E501
        """ImageMICRParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._font = None
        self._context = None
        self._white_list = None
        self._roi_left = None
        self._roi_top = None
        self._roi_width = None
        self._roi_height = None
        self._expected_symbols_count = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        self.font = font
        self.context = context
        self.white_list = white_list
        if roi_left is not None:
            self.roi_left = roi_left
        if roi_top is not None:
            self.roi_top = roi_top
        if roi_width is not None:
            self.roi_width = roi_width
        if roi_height is not None:
            self.roi_height = roi_height
        if expected_symbols_count is not None:
            self.expected_symbols_count = expected_symbols_count

    @property
    def file_id(self):
        """Gets the file_id of this ImageMICRParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this ImageMICRParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this ImageMICRParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this ImageMICRParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this ImageMICRParameters.  # noqa: E501

        Specifies the page or the range of page to be processed.  # noqa: E501

        :return: The page_range of this ImageMICRParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this ImageMICRParameters.

        Specifies the page or the range of page to be processed.  # noqa: E501

        :param page_range: The page_range of this ImageMICRParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def font(self):
        """Gets the font of this ImageMICRParameters.  # noqa: E501


        :return: The font of this ImageMICRParameters.  # noqa: E501
        :rtype: MicrFont
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this ImageMICRParameters.


        :param font: The font of this ImageMICRParameters.  # noqa: E501
        :type: MicrFont
        """
        if self.local_vars_configuration.client_side_validation and font is None:  # noqa: E501
            raise ValueError("Invalid value for `font`, must not be `None`")  # noqa: E501

        self._font = font

    @property
    def context(self):
        """Gets the context of this ImageMICRParameters.  # noqa: E501


        :return: The context of this ImageMICRParameters.  # noqa: E501
        :rtype: MicrContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ImageMICRParameters.


        :param context: The context of this ImageMICRParameters.  # noqa: E501
        :type: MicrContext
        """
        if self.local_vars_configuration.client_side_validation and context is None:  # noqa: E501
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def white_list(self):
        """Gets the white_list of this ImageMICRParameters.  # noqa: E501

        Specifies the characters to be ignored by the recognition process.  # noqa: E501

        :return: The white_list of this ImageMICRParameters.  # noqa: E501
        :rtype: str
        """
        return self._white_list

    @white_list.setter
    def white_list(self, white_list):
        """Sets the white_list of this ImageMICRParameters.

        Specifies the characters to be ignored by the recognition process.  # noqa: E501

        :param white_list: The white_list of this ImageMICRParameters.  # noqa: E501
        :type: str
        """

        self._white_list = white_list

    @property
    def roi_left(self):
        """Gets the roi_left of this ImageMICRParameters.  # noqa: E501

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_left of this ImageMICRParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_left

    @roi_left.setter
    def roi_left(self, roi_left):
        """Sets the roi_left of this ImageMICRParameters.

        Specifies the left coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_left: The roi_left of this ImageMICRParameters.  # noqa: E501
        :type: int
        """

        self._roi_left = roi_left

    @property
    def roi_top(self):
        """Gets the roi_top of this ImageMICRParameters.  # noqa: E501

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :return: The roi_top of this ImageMICRParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_top

    @roi_top.setter
    def roi_top(self, roi_top):
        """Sets the roi_top of this ImageMICRParameters.

        Specifies the top coordinate, in pixel, of the region to process.  # noqa: E501

        :param roi_top: The roi_top of this ImageMICRParameters.  # noqa: E501
        :type: int
        """

        self._roi_top = roi_top

    @property
    def roi_width(self):
        """Gets the roi_width of this ImageMICRParameters.  # noqa: E501

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_width of this ImageMICRParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_width

    @roi_width.setter
    def roi_width(self, roi_width):
        """Sets the roi_width of this ImageMICRParameters.

        Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_width: The roi_width of this ImageMICRParameters.  # noqa: E501
        :type: int
        """

        self._roi_width = roi_width

    @property
    def roi_height(self):
        """Gets the roi_height of this ImageMICRParameters.  # noqa: E501

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :return: The roi_height of this ImageMICRParameters.  # noqa: E501
        :rtype: int
        """
        return self._roi_height

    @roi_height.setter
    def roi_height(self, roi_height):
        """Sets the roi_height of this ImageMICRParameters.

        Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.  # noqa: E501

        :param roi_height: The roi_height of this ImageMICRParameters.  # noqa: E501
        :type: int
        """

        self._roi_height = roi_height

    @property
    def expected_symbols_count(self):
        """Gets the expected_symbols_count of this ImageMICRParameters.  # noqa: E501

        Specifies the number of symbols expected to be detected, use 0 if unknown.  # noqa: E501

        :return: The expected_symbols_count of this ImageMICRParameters.  # noqa: E501
        :rtype: int
        """
        return self._expected_symbols_count

    @expected_symbols_count.setter
    def expected_symbols_count(self, expected_symbols_count):
        """Sets the expected_symbols_count of this ImageMICRParameters.

        Specifies the number of symbols expected to be detected, use 0 if unknown.  # noqa: E501

        :param expected_symbols_count: The expected_symbols_count of this ImageMICRParameters.  # noqa: E501
        :type: int
        """

        self._expected_symbols_count = expected_symbols_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImageMICRParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImageMICRParameters):
            return True

        return self.to_dict() != other.to_dict()
