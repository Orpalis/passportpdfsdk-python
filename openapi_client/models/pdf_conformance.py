# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfConformance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNKNOWN = "Unknown"
    PDF10 = "PDF10"
    PDF11 = "PDF11"
    PDF12 = "PDF12"
    PDF13 = "PDF13"
    PDF14 = "PDF14"
    PDF15 = "PDF15"
    PDF16 = "PDF16"
    PDF17 = "PDF17"
    PDF20 = "PDF20"
    PDFA1A = "PDFA1a"
    PDFA1B = "PDFA1b"
    PDFA2A = "PDFA2a"
    PDFA2U = "PDFA2u"
    PDFA2B = "PDFA2b"
    PDFA3A = "PDFA3a"
    PDFA3U = "PDFA3u"
    PDFA3B = "PDFA3b"
    PDFUA1 = "PDFUA1"

    allowable_values = [UNKNOWN, PDF10, PDF11, PDF12, PDF13, PDF14, PDF15, PDF16, PDF17, PDF20, PDFA1A, PDFA1B, PDFA2A, PDFA2U, PDFA2B, PDFA3A, PDFA3U, PDFA3B, PDFUA1]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """PdfConformance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfConformance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfConformance):
            return True

        return self.to_dict() != other.to_dict()
