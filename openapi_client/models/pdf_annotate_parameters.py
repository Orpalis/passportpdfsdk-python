# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PdfAnnotateParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'file_id': 'str',
        'page_range': 'str',
        'annotation_type': 'AnnotationType',
        'sticky_note_annotation_parameters': 'StickyNoteAnnotationParameters',
        'link_annotation_parameters': 'LinkAnnotationParameters',
        'free_text_annotation_parameters': 'FreeTextAnnotationParameters',
        'line_annotation_parameters': 'LineAnnotationParameters',
        'square_and_circle_annotation_parameters': 'SquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters': 'RubberStampAnnotationParameters'
    }

    attribute_map = {
        'file_id': 'FileId',
        'page_range': 'PageRange',
        'annotation_type': 'AnnotationType',
        'sticky_note_annotation_parameters': 'StickyNoteAnnotationParameters',
        'link_annotation_parameters': 'LinkAnnotationParameters',
        'free_text_annotation_parameters': 'FreeTextAnnotationParameters',
        'line_annotation_parameters': 'LineAnnotationParameters',
        'square_and_circle_annotation_parameters': 'SquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters': 'RubberStampAnnotationParameters'
    }

    def __init__(self, file_id=None, page_range=None, annotation_type=None, sticky_note_annotation_parameters=None, link_annotation_parameters=None, free_text_annotation_parameters=None, line_annotation_parameters=None, square_and_circle_annotation_parameters=None, rubber_stamp_annotation_parameters=None, local_vars_configuration=None):  # noqa: E501
        """PdfAnnotateParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._file_id = None
        self._page_range = None
        self._annotation_type = None
        self._sticky_note_annotation_parameters = None
        self._link_annotation_parameters = None
        self._free_text_annotation_parameters = None
        self._line_annotation_parameters = None
        self._square_and_circle_annotation_parameters = None
        self._rubber_stamp_annotation_parameters = None
        self.discriminator = None

        self.file_id = file_id
        self.page_range = page_range
        if annotation_type is not None:
            self.annotation_type = annotation_type
        if sticky_note_annotation_parameters is not None:
            self.sticky_note_annotation_parameters = sticky_note_annotation_parameters
        if link_annotation_parameters is not None:
            self.link_annotation_parameters = link_annotation_parameters
        if free_text_annotation_parameters is not None:
            self.free_text_annotation_parameters = free_text_annotation_parameters
        if line_annotation_parameters is not None:
            self.line_annotation_parameters = line_annotation_parameters
        if square_and_circle_annotation_parameters is not None:
            self.square_and_circle_annotation_parameters = square_and_circle_annotation_parameters
        if rubber_stamp_annotation_parameters is not None:
            self.rubber_stamp_annotation_parameters = rubber_stamp_annotation_parameters

    @property
    def file_id(self):
        """Gets the file_id of this PdfAnnotateParameters.  # noqa: E501

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :return: The file_id of this PdfAnnotateParameters.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this PdfAnnotateParameters.

        The identifier of the previously uploaded file to be processed.  # noqa: E501

        :param file_id: The file_id of this PdfAnnotateParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_id is None:  # noqa: E501
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501

        self._file_id = file_id

    @property
    def page_range(self):
        """Gets the page_range of this PdfAnnotateParameters.  # noqa: E501

        Specifies the page or the range of page to be annotated.  # noqa: E501

        :return: The page_range of this PdfAnnotateParameters.  # noqa: E501
        :rtype: str
        """
        return self._page_range

    @page_range.setter
    def page_range(self, page_range):
        """Sets the page_range of this PdfAnnotateParameters.

        Specifies the page or the range of page to be annotated.  # noqa: E501

        :param page_range: The page_range of this PdfAnnotateParameters.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and page_range is None:  # noqa: E501
            raise ValueError("Invalid value for `page_range`, must not be `None`")  # noqa: E501

        self._page_range = page_range

    @property
    def annotation_type(self):
        """Gets the annotation_type of this PdfAnnotateParameters.  # noqa: E501


        :return: The annotation_type of this PdfAnnotateParameters.  # noqa: E501
        :rtype: AnnotationType
        """
        return self._annotation_type

    @annotation_type.setter
    def annotation_type(self, annotation_type):
        """Sets the annotation_type of this PdfAnnotateParameters.


        :param annotation_type: The annotation_type of this PdfAnnotateParameters.  # noqa: E501
        :type: AnnotationType
        """

        self._annotation_type = annotation_type

    @property
    def sticky_note_annotation_parameters(self):
        """Gets the sticky_note_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The sticky_note_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: StickyNoteAnnotationParameters
        """
        return self._sticky_note_annotation_parameters

    @sticky_note_annotation_parameters.setter
    def sticky_note_annotation_parameters(self, sticky_note_annotation_parameters):
        """Sets the sticky_note_annotation_parameters of this PdfAnnotateParameters.


        :param sticky_note_annotation_parameters: The sticky_note_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: StickyNoteAnnotationParameters
        """

        self._sticky_note_annotation_parameters = sticky_note_annotation_parameters

    @property
    def link_annotation_parameters(self):
        """Gets the link_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The link_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: LinkAnnotationParameters
        """
        return self._link_annotation_parameters

    @link_annotation_parameters.setter
    def link_annotation_parameters(self, link_annotation_parameters):
        """Sets the link_annotation_parameters of this PdfAnnotateParameters.


        :param link_annotation_parameters: The link_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: LinkAnnotationParameters
        """

        self._link_annotation_parameters = link_annotation_parameters

    @property
    def free_text_annotation_parameters(self):
        """Gets the free_text_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The free_text_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: FreeTextAnnotationParameters
        """
        return self._free_text_annotation_parameters

    @free_text_annotation_parameters.setter
    def free_text_annotation_parameters(self, free_text_annotation_parameters):
        """Sets the free_text_annotation_parameters of this PdfAnnotateParameters.


        :param free_text_annotation_parameters: The free_text_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: FreeTextAnnotationParameters
        """

        self._free_text_annotation_parameters = free_text_annotation_parameters

    @property
    def line_annotation_parameters(self):
        """Gets the line_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The line_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: LineAnnotationParameters
        """
        return self._line_annotation_parameters

    @line_annotation_parameters.setter
    def line_annotation_parameters(self, line_annotation_parameters):
        """Sets the line_annotation_parameters of this PdfAnnotateParameters.


        :param line_annotation_parameters: The line_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: LineAnnotationParameters
        """

        self._line_annotation_parameters = line_annotation_parameters

    @property
    def square_and_circle_annotation_parameters(self):
        """Gets the square_and_circle_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The square_and_circle_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: SquareAndCircleAnnotationParameters
        """
        return self._square_and_circle_annotation_parameters

    @square_and_circle_annotation_parameters.setter
    def square_and_circle_annotation_parameters(self, square_and_circle_annotation_parameters):
        """Sets the square_and_circle_annotation_parameters of this PdfAnnotateParameters.


        :param square_and_circle_annotation_parameters: The square_and_circle_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: SquareAndCircleAnnotationParameters
        """

        self._square_and_circle_annotation_parameters = square_and_circle_annotation_parameters

    @property
    def rubber_stamp_annotation_parameters(self):
        """Gets the rubber_stamp_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501


        :return: The rubber_stamp_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :rtype: RubberStampAnnotationParameters
        """
        return self._rubber_stamp_annotation_parameters

    @rubber_stamp_annotation_parameters.setter
    def rubber_stamp_annotation_parameters(self, rubber_stamp_annotation_parameters):
        """Sets the rubber_stamp_annotation_parameters of this PdfAnnotateParameters.


        :param rubber_stamp_annotation_parameters: The rubber_stamp_annotation_parameters of this PdfAnnotateParameters.  # noqa: E501
        :type: RubberStampAnnotationParameters
        """

        self._rubber_stamp_annotation_parameters = rubber_stamp_annotation_parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PdfAnnotateParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PdfAnnotateParameters):
            return True

        return self.to_dict() != other.to_dict()
