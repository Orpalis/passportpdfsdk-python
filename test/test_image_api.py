# coding: utf-8

"""
    PassportPDF API

    Another brick in the cloud  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import openapi_client
from openapi_client.api.image_api import ImageApi  # noqa: E501
from openapi_client.rest import ApiException


class TestImageApi(unittest.TestCase):
    """ImageApi unit test stubs"""

    def setUp(self):
        self.api = openapi_client.api.image_api.ImageApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_image_adjust(self):
        """Test case for image_adjust

        Adjusts a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_auto_crop(self):
        """Test case for image_auto_crop

        Automatically crops a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_cleanup_document(self):
        """Test case for image_cleanup_document

        Cleanup a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_clone_regions(self):
        """Test case for image_clone_regions

        Clones regions from a previously uploaded image into new images.  # noqa: E501
        """
        pass

    def test_image_close(self):
        """Test case for image_close

        Closes a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_convert_color_depth(self):
        """Test case for image_convert_color_depth

        Converts the color depth of a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_crop(self):
        """Test case for image_crop

        Crops a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_delete_page(self):
        """Test case for image_delete_page

        Deletes a page range from a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_detect_blank_pages(self):
        """Test case for image_detect_blank_pages

        Detects the blank page(s) from a previously uploaded image and offers to remove them.  # noqa: E501
        """
        pass

    def test_image_detect_color(self):
        """Test case for image_detect_color

        Performs color detection  on a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_detect_page_orientation(self):
        """Test case for image_detect_page_orientation

        Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.  # noqa: E501
        """
        pass

    def test_image_filter(self):
        """Test case for image_filter

        Applies filters to a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_get_page_thumbnail(self):
        """Test case for image_get_page_thumbnail

        Gets a thumbnail of each page within the provided page range from a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_get_supported_file_extensions(self):
        """Test case for image_get_supported_file_extensions

        Gets the supported file extensions by the image loading actions.  # noqa: E501
        """
        pass

    def test_image_load(self):
        """Test case for image_load

        Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.  # noqa: E501
        """
        pass

    def test_image_load_multipart(self):
        """Test case for image_load_multipart

        Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.  # noqa: E501
        """
        pass

    def test_image_micr(self):
        """Test case for image_micr

        Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_read_barcodes(self):
        """Test case for image_read_barcodes

        Reads barcodes from a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_resize(self):
        """Test case for image_resize

        Resizes a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_rotate(self):
        """Test case for image_rotate

        Rotates and/or flips a previously uploaded image.  # noqa: E501
        """
        pass

    def test_image_save_as_jpeg(self):
        """Test case for image_save_as_jpeg

        Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_jpeg_file(self):
        """Test case for image_save_as_jpeg_file

        Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_save_as_pdf(self):
        """Test case for image_save_as_pdf

        Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_pdf_file(self):
        """Test case for image_save_as_pdf_file

        Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_save_as_pdfmrc(self):
        """Test case for image_save_as_pdfmrc

        Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_pdfmrc_file(self):
        """Test case for image_save_as_pdfmrc_file

        Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_save_as_png(self):
        """Test case for image_save_as_png

        Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_png_file(self):
        """Test case for image_save_as_png_file

        Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_save_as_tiff(self):
        """Test case for image_save_as_tiff

        Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_tiff_file(self):
        """Test case for image_save_as_tiff_file

        Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_save_as_tiff_multipage(self):
        """Test case for image_save_as_tiff_multipage

        Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object.  # noqa: E501
        """
        pass

    def test_image_save_as_tiff_multipage_file(self):
        """Test case for image_save_as_tiff_multipage_file

        Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).  # noqa: E501
        """
        pass

    def test_image_swap_pages(self):
        """Test case for image_swap_pages

        Swaps two pages from a previously uploaded image.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
